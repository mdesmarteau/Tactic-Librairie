{
  "TT": {
    "Api": {
      "Credentials": "Case (\r\r~component = \"licenceCheck_api\" ;\rLet (\r[\r$username = \"x\" ;\r$password = \"y\" ; \r$credentials = GetValue ( Base64Encode ( $username & \":\" & $password ) ; 1 ) ;\r$key = \"z\"\r] ;\r\"OK\"\r) ;\r\r\r\r\r~component = \"licenceCheck_console\" ;\rLet (\r[\r$username = \"x\" ;\r$password = \"y\" \r] ;\r\"OK\"\r) ;\r\r\r\r\r~component = \"AWS\" ;\rLet (\r[\r$username = \"x\" ;\r$password = \"y\" ;\r$server = \"email-smtp.us-east-1.amazonaws.com\" ;\r$port = 587\r] ;\r\"OK\"\r) ;\r\r\r\r\r~component = \"printNode\" ;\rLet (\r[\r$key = \"x\" \r] ;\r\"OK\"\r) ;\r\r\"ERR\"\r\r)",
      "Curl": "Substitute ( \r\rList (\r\"--show-error\" ;\r\"--dump-header $headers\" ;\r\"-X \" & ~method ;\rIf ( ~payloadVariableName ≠ \"\" ; \"--data @\" & ~payloadVariableName ) ;\rIf ( not IsEmpty ( ~contentType ) and not IsEmpty ( FilterValues ( \"POST¶PUT¶PATCH\" ; ~method ) ) ; \"--header Content-Type:\" & ~contentType ) ;\rIf ( ~authType ≠ \"\" and ~auth ≠ \"\" ; \"--header \" & Quote ( \"Authorization: \" & ~authType & \" \" & ~auth ) )\r) ;\r\r¶ ; \" \"\r)",
      "FmDataApi": {
        "Error": "JSONGetElement ( ~result ; \"response.messages[0].code\" ) & \" (\" & JSONGetElement ( ~result ; \"response.messages[0].message\" ) & \")\"",
        "Token": "JSONGetElement ( ~loginResult ; \"response.response.token\" )"
      },
      "Result": "JSONSetElement ( \"{}\" ; \r\r[ \"response\" ; ~response ; JSONRaw ] ; \r[ \"fmError.code\" ; Get ( LastError ) ; 2 ] ; \r[ \"fmError.details\" ; Get ( LastExternalErrorDetail ) ; 1 ] ;\r[ \"headers\" ; ~headers ; 1 ] ;\r[ \"url\" ; ~url ; 1 ] ;\r[ \"curl\" ; ~curl ; 1 ] ;\r[ \"payload\" ; ~payload ; JSONRaw ] ;\r\r[ \"status\" ; Case ( \rValueCount ( ~headers ) < 3 ; 500 ;\rPosition ( ~headers ; \"500 FileMaker Data API Engine Error\" ; 1 ; 1 ) and JSONGetElement ( ~response ; \"messages[0].code\" ) = 401 ; 200 ;\r\rTT.Text.GetBetween ( \rGetValue ( ~headers ; 1 ) ; \rIf ( TT.Fm.TypeOf ( Left ( ~headers ; 3 ) ) = \"number\" ; \"\" ; \" \" ) ;\r\" \" ; \r1 ; \r0 \r) \r\r) ; \r2 ]\r\r)",
      "Success": "Let (\r~status = JsonGetElement ( ~result ; \"status\" ) ;\rLeft ( ~status ; 1 ) = 2\r)"
    },
    "AuditTrail": {
      "Process": "Case ( not IsEmpty ( ~fieldsList ) ;\r     Let ( [ \r          ~thisFieldName = GetValue ( ~fieldsList ; 1 ) ; \r          ~thisTableName = GetValue ( Substitute ( ~auditFieldName ; \"::\" ; ¶ ) ; 1 ) ;\r\t  ~auditFieldRef = GetField ( ~auditFieldName ) ;\r\t  ~thisFieldType = FieldType ( \"\" ; ~thisFieldName ) ; \r          ~isContainer = MiddleWords ( ~thisFieldType ; 2 ; 1 ) = \"Container\"\r     ] ; \r\r\r               List (\t// Record a change for this field value if it's not a calculation field, and it's not in our ignored list\r                    Case ( \r                         Right ( LeftWords ( ~thisFieldType ; 1 ) ; 4 ) ≠ \"Calc\" and \r                         ~thisTableName & \"::\" & ~thisFieldName ≠ ~auditFieldName // exclude changelog field from auditing\r                    ;\r\r                         Case ( ~isContainer or\r                              Let  ( [\r                                   $thisFieldValue = GetField ( ~thisTableName & \"::\" & ~thisFieldName ) ;\r\r                                   // Parse previous value for this field from the existing Change Log text\r                                   // Use special \"arrowhead\" characters to reduce the likelihood of finding a match within field contents\r                                   ~prevValueNameStart = Position ( ~auditFieldRef ; \"˂\" & ~thisFieldName & \"˃\" ; 1 ; 1 ) ;\r                                   ~prevValueStart = Case ( ~prevValueNameStart ; \r                                        Position ( ~auditFieldRef ; Quote ( \" à \" ) ; ~prevValueNameStart ; 1 ) + 5 ) ;\r                                   $prevValue = Case ( ~prevValueStart ; \r                                        Middle ( \r                                             ~auditFieldRef ; \r                                             ~prevValueStart ; \r\t\t\t\t\t     Position ( ~auditFieldRef ; \"\\\"\" ; Position ( ~auditFieldRef & ¶ ; ¶ ; ~prevValueStart ; 1 ) ; -1 ) - ~prevValueStart\r//                                             Position ( ~auditFieldRef & ¶ ; ¶ ; ~prevValueStart ; 1 ) - ~prevValueStart - 1 \r                                        ) \r                                   )\r                              ] ; \r                                   $prevValue ≠ $thisFieldValue \r                              ) \r                         ;\r                              Get ( CurrentHostTimestamp ) & \": \" & Get ( AccountName ) & \" a changé ˂\" & ~thisFieldName & \"˃\" & // Using \"arrowhead\" characters\r                              Case ( not ~isContainer ; \" de \" & Quote ( $prevValue ) & \" à \" & Quote ( $thisFieldValue ) ) &\r\t\t\t      If ( ~scriptModifierId and Get ( ScriptName ) = TT.Fm.Database.Name_Id ( ~scriptModifierId ; \"S\" ; \"\" ) ; \" \" & ~scriptModifierValue )\r\t\t\t  )\r                    ) ;\r\r                    // Call the custom function again for all remaining fields in the list\r                    Case ( ValueCount ( ~fieldsList ) > 1 ; TT.AuditTrail.Process ( MiddleValues ( ~fieldsList ; 2 ; ValueCount ( ~fieldsList ) ) ; ~auditFieldName ; ~scriptModifierId ; ~scriptModifierValue ) )\r               )\r          \r     )\r)",
      "Trigger": "Let (\r[\r~auditFieldName = If ( not Position ( ~auditField ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~auditField ) ; ~auditField ) ;\r~auditFieldRef = GetField ( ~auditFieldName ) ;\r~table = GetValue ( Substitute ( ~auditFieldName ; \"::\" ; ¶ ) ; 1 ) ;\r\r~modifiedFields = Get ( ModifiedFields ) ;\r/*\r~modifiedFields = \rIf ( Get ( RecordModificationCount ) and not IsEmpty ( ~auditFieldRef ) and not IsEmpty ( Get ( ModifiedFields ) ) ; \rGet ( ModifiedFields ) ; //Si modification reconnue, seulement traiter rubriques modifiées\rSubstitute ( ~auditedFields ; ~table & \"::\" ; \"\" ) //Sinon il faut toutes les passer\r) ;*/\r\r~modifiedAuditedFields = FilterValues ( ~modifiedFields ; Substitute ( ~auditedFields ; ~table & \"::\" ; \"\" ) )\r] ;\r\rLeftValues (\rList ( \rTT.AuditTrail.Process ( ~modifiedAuditedFields ; ~auditFieldName ; ~scriptModifierId ; ~scriptModifierValue ) ; \r~auditFieldRef \r) ;\rIf ( ~limit ; ~limit ; 9999 )\r)\r\r)"
    },
    "CSS": {
      "Blink": "\".blink {\r  font-weight: bold;\r  animation: blink 2s infinite;\r}\r@keyframes blink {\r  0% {\r    opacity: 1;\r  }\r  50% {\r    opacity: 0;\r  }\r  100% {\r    opacity: 1;\r  }\r}\""
    },
    "Date": {
      "Convert": {
        "DataApiToFm": "Let (  \r[\r~list = Substitute ( ~apiDate ; \"/\" ; ¶ ) ;\r~year = GetValue ( ~list ; 3 ) ;\r~month = GetValue ( ~list ; 1 ) ;\r~day = GetValue ( ~list ; 2 )\r] ;\r\rDate ( ~month ; ~day ; ~year )\r)",
        "FmToDataApi": "Substitute ( \r\rList ( \rRight ( \"00\" & Month ( ~date ) ; 2 ) ; \rRight ( \"00\" & Day ( ~date ) ; 2 ) ;\rYear ( ~date ) \r\r) ; \r\r¶ ; \"/\" \r\r)",
        "FmToIso": "Substitute ( \r\rList ( \rYear ( ~date ) ; \rRight ( \"00\" & Month ( ~date ) ; 2 ) ; \rRight ( \"00\" & Day ( ~date ) ; 2 ) \r) ; \r\r¶ ; \"-\" \r)",
        "IsoToFm": "Let (  \r[\r~list = Substitute ( ~isoDate ; \"-\" ; ¶ ) ;\r~year = GetValue ( ~list ; 1 ) ;\r~month = GetValue ( ~list ; 2 ) ;\r~day = GetValue ( ~list ; 3 )\r] ;\r\rDate ( ~month ; ~day ; ~year )\r)",
        "StringToFM": "Let ( \r[\r~dateList = Substitute ( ~dateString ; [ \"-\" ; ¶ ] ; [ \"/\" ; ¶ ] ; [ \" \" ; ¶ ] ; [ \".\" ; ¶ ] ; [ \"\\\\\" ; ¶ ] ) ;\r~formatList = Substitute ( ~format ; [ \"-\" ; ¶ ] ; [ \"/\" ; ¶ ] ; [ \" \" ; ¶ ] ) ;\r\r~dayPosition = ValueCount ( Left ( ¶ & ~formatList & ¶ ; Position ( ¶ & ~formatList & ¶ ; ¶ & \"#D\" & ¶ ; 0 ; 1 ) ) ) ;\r~monthPosition = ValueCount ( Left ( ¶ & ~formatList & ¶ ; Position ( ¶ & ~formatList & ¶ ; ¶ & \"#M\" & ¶ ; 0 ; 1 ) ) ) ;\r~yearPosition = ValueCount ( Left ( ¶ & ~formatList & ¶ ; Position ( ¶ & ~formatList & ¶ ; ¶ & \"#Y\" & ¶ ; 0 ; 1 ) ) ) ;\r\r~day = GetValue ( ~dateList ; ~dayPosition ) ;\r~month = GetValue ( ~dateList ; ~monthPosition ) ;\r~year = GetValue ( ~dateList ; ~yearPosition )\r] ; \r\rDate ( ~month ; ~day ; ~year )\r\r)"
      },
      "Day": {
        "NameList": "Let ( ~lcid = Left ( Lower ( Trim ( ~localeID ) ) ; 2 ) ;\r  Case ( ~lcid = \"nl\" ;   // Dutch\r    \"zondag¶maandag¶dinsdag¶woensdag¶donderdag¶vrijdag¶zaterdag¶zo¶ma¶di¶wo¶do¶vr¶za\" ; \r\r    ~lcid = \"en\" ;           // English\r    \"Sunday¶Monday¶Tuesday¶Wednesday¶Thursday¶Friday¶Saturday¶Sun¶Mon¶Tue¶Wed¶Thu¶Fri¶Sat\" ;\r\r    ~lcid = \"ge\" ;           // German\r    \"Sonntag¶Montag¶Dienstag¶Mittwoch¶Donnerstag¶Freitag¶Samstag¶Son¶Mon¶Die¶Mit¶Don¶Fre¶Sam\" ;\r\r    ~lcid = \"fr\" ;           // French\r    \"dimanche¶lundi¶mardi¶mercredi¶jeudi¶vendredi¶samedi¶dim¶lun¶mar¶mer¶jeu¶ven¶sam\" ;\r\r    ~lcid = \"es\" ;           // Spanish\r    \"domingo¶lunes¶martes¶miércoles¶jueves¶viernes¶sábado¶do¶lu¶ma¶mi¶ju¶vi¶sa\" ;\r\r    // if an empty LocaleID is given, use current Get ( SystemLanguage )\r    Let ( ~dte = Date ( 7 ; 10 ; 2005 ) ;  // pick a Sunday\r      DayName ( ~dte ) & \"¶\" & DayName ( ~dte + 1 ) & \"¶\" & DayName ( ~dte + 2 ) & \"¶\" & \r      DayName ( ~dte + 3 ) & \"¶\" & DayName ( ~dte + 4 ) & \"¶\" & DayName ( ~dte + 5 ) & \"¶\" & \r      DayName ( ~dte + 6 ) & \"¶\" & Left ( DayName ( ~dte ) ; 3 ) & \"¶\" &\r      Left ( DayName ( ~dte + 1 ) ; 3 ) & \"¶\" & Left ( DayName ( ~dte + 2 ) ; 3 ) & \"¶\" & \r      Left ( DayName ( ~dte + 3 ) ; 3 ) & \"¶\" & Left ( DayName ( ~dte + 4 ) ; 3 ) & \"¶\" & \r      Left ( DayName ( ~dte + 5 ) ; 3 ) & \"¶\" & Left ( DayName ( ~dte + 6 ) ; 3 ) \r    )\r  )\r)",
        "NameToNumber": "Let (\r[\r~dayName = TT.Text.Accentless ( ~dayName ) ;\r~frenchList = TT.Text.Accentless ( TT.Date.Day.NameList ( \"fr\" ) ) ;\r~englishList = TT.Text.Accentless ( TT.Date.Day.NameList ( \"en\" ) ) ;\r~localeList = If ( Position ( ~frenchList ; ~dayName ; 1 ; 1 ) ; ~frenchList ; ~englishList ) ;\r~number = TT.List.Value.Position ( ~localeList ; ~dayName ; 1 ; 1 )\r] ;\r\r~number - If ( ~number > 7 ; 7 )\r\r)",
        "NumberToName": "GetValue ( TT.Date.Day.NameList ( ~localeID ) ; ~dayNumber )"
      },
      "Difference": "Let ( [\r\r\t~neg = Case ( ~firstDate > ~secondDate ; -1 ; 1 ) ;\r\r\t~d1 = Case ( ~neg < 0 ; ~secondDate ; ~firstDate ) ;\r\r\t~d2 = Case ( ~neg < 0 ; ~firstDate ; ~secondDate ) ;\r\r\t~d = Mod ( Day ( ~d2 ) - Day ( ~d1 ) ; Day ( \r      Date ( Month ( ~d1 ) + 1 ; 0; Year ( ~d1 ) ) ) ) ;\r\r\t~m = Mod ( Month ( ~d2 ) - Month ( ~d1 ) -\r      ( Day ( ~d2 ) < Day ( ~d1 ) ) ; 12 ) ;\r\r\t~y = Year ( ~d2 ) - Year ( ~d1 ) - ( ( Month ( ~d2 ) -\r      ( Day ( ~d2 ) < Day ( ~d1 ) ) ) < Month ( ~d1 ) ) ; \r\r\t~yearlabel = If( ~y=1 ; ~y & \" year\" ; ~y & \" years\" ) ;\r\r\t~monthLabel = If( ~m =1 ; ~m & \" month\" ; ~m & \" months\" ) ;\r\r\t~daylabel = If( ~d=1 ; ~d  & \" day\" ; ~d & \" days\" )\r  ];\r\r\rCase(\r\t~flag = \"Y\" ; ~y * ~neg ;\r\t~flag = \"M\" ; ~m * ~neg + (~y * 12 * ~neg) ;\r\t~flag = \"D\" ; ( ~secondDate - ~firstDate ) * ~neg ;\r\t( ~flag = \"T\" ) ; \r\t\tCase(\r\t\t\t( ~y ≠ 0 ) and ( ~m ≠ 0 ) and ( ~d ≠ 0 ) ; ~yearlabel & \", \" & ~monthLabel & \" and \" & ~daylabel ;\r\t\t\t( ~y = 0 ) and ( ~m ≠ 0 ) and ( ~d ≠ 0 ) ; ~monthLabel & \" and \" & ~daylabel ;\r\t\t\t( ~y = 0 ) and ( ~m = 0 ) and ( ~d ≠ 0 ) ; ~daylabel ;\r\t\t\t( ~y = 0 ) and ( ~m = 0 ) and ( ~d = 0 ) ; \"0 days\" ;\r\t\t\t( ~y ≠ 0 ) and ( ~m = 0 ) and ( ~d ≠ 0 ) ; ~yearlabel & \" and \" & ~daylabel ;\r\t\t\t( ~y ≠ 0 ) and ( ~m ≠ 0 ) and ( ~d = 0 ) ; ~yearlabel & \" and \" & ~monthLabel ;\r\t\t\t( ~y ≠ 0 ) and ( ~m = 0 ) and ( ~d = 0 ) ; ~yearlabel ;\r\t\t\t( ~y = 0 ) and ( ~m ≠ 0 ) and ( ~d = 0 ) ; ~monthLabel ;\r\t\t\t\"Undefined Date Text Layout!\"\r\t\t\t) ;\r\t~flag = \"LIST\" ; ~y * ~neg & \"¶\" & ~m * ~neg & \"¶\" & ~d * ~neg & \"¶\" ;\t\"Undefined ~flag!\"\r\t)\r)",
      "DuAu": "Let ( \r[\r~moisDiffere = Month ( ~dateDebut ) ≠ Month ( ~dateFin );\r~anneeDiffere = Year ( ~dateDebut ) ≠ Year ( ~dateFin )\r] ;\r\rSubstitute ( \r List (\r \"Du\" ;\r Day ( ~dateDebut ) ;\r If ( ~moisDiffere or ~anneeDiffere ;  TT.Date.Month.NumberToName ( Month ( ~dateDebut ) ; \"fr\" ) ) ;\r If ( ~anneeDiffere ; Year ( ~dateDebut ) ) ;\r \"au\" ;\r TT.Date.Format ( ~dateFin ; \"#D #MMMM #YYYY\" ; \"fr\" )\r ) \r\r; ¶ ; \" \" \r)\r\r)",
      "Format": "Let ( \r[ ~daylist = TT.Date.Day.NameList ( ~localeID ) ;\r           ~monthlist = TT.Date.Month.NameList ( ~localeID ) ; \r           ~dte = GetAsDate ( ~date ) ;\r           ~dow = DayOfWeek ( ~dte ) ;\r           ~m = Month ( ~dte ) ;\r           ~y = Year ( ~dte ) \r] ;\r\rIf ( ~dte ≠ \"\" ;\r  Substitute ( Upper ( ~formatString ) ; \r    [ \"#YYYY\" ; ~y ] ; \r    [ \"#YYY\" ; ~y ] ; \r    [ \"#YY\" ; Right ( \"00\" & Mod ( ~y ; 100 ) ; 2 ) ] ; \r    [ \"#Y\" ; Right ( ~y ; 1 ) ] ; \r    [ \"#MMMM\" ; Substitute ( MiddleValues ( ~monthlist ; ~m ; 1 ) ; \"¶\" ; \"\" ) ] ; \r    [ \"#MMM\" ; Substitute ( MiddleValues ( ~monthlist ; ~m + 12 ; 1 ) ; \"¶\" ; \"\" ) ] ; \r    [ \"#MM\" ; Right ( \"00\" & ~m ; 2 ) ] ; \r    [ \"#M\" ; ~m ] ; \r    [ \"#DDDD\" ; Substitute ( MiddleValues ( ~daylist ; ~dow ; 1 ) ; \"¶\" ; \"\" ) ] ; \r    [ \"#DDD\" ; Substitute ( MiddleValues ( ~daylist ; ~dow + 7 ; 1 ) ; \"¶\" ; \"\" ) ] ; \r    [ \"#DD\" ; Right ( \"00\" & Day ( ~dte ) ; 2 ) ] ; \r    [ \"#D\" ; Day ( ~dte ) ] \r  )\r)\r\r)",
      "Month": {
        "NameList": "Let ( ~lcid = Left ( Lower ( Trim ( ~localeID ) ) ; 2 ) ;\r  Case ( ~lcid = \"nl\" ;   // Dutch\r    \"januari¶februari¶maart¶april¶mei¶juni¶juli¶augustus¶september¶oktober¶november¶december¶\" & \r    \"jan¶feb¶mrt¶apr¶mei¶jun¶jul¶aug¶sept¶okt¶nov¶dec\" ; \r\r    ~lcid = \"en\" ;           // English\r    \"January¶February¶March¶April¶May¶June¶July¶August¶September¶October¶November¶December¶\" & \r    \"Jan¶Feb¶Mar¶Apr¶May¶Jun¶Jul¶Aug¶Sept¶Oct¶Nov¶Dec\" ; \r\r    ~lcid = \"ge\" ;           // German\r    \"Januar¶Februar¶März¶April¶Mai¶Juni¶Juli¶August¶September¶Oktober¶November¶Dezember¶\" & \r    \"Jan¶Feb¶Mrz¶Apr¶Mai¶Jun¶Jul¶Aug¶Sept¶Okt¶Nov¶Dez\" ; \r\r    ~lcid = \"fr\" ;           // French\r    \"Janvier¶Février¶Mars¶Avril¶Mai¶Juin¶Juillet¶Août¶Septembre¶Octobre¶Novembre¶Décembre¶\" & \r    \"Jan¶fév¶mar¶avr¶mai¶juin¶juil¶août¶sept¶oct¶nov¶déc\" ; \r\r    ~lcid = \"es\" ;           // Spanish\r    \"enero¶febrero¶marzo¶abril¶mayo¶junio¶julio¶agosto¶septiembre¶octubre¶noviembre¶diciembre¶\" & \r    \"ene¶feb¶mar¶abr¶may¶jun¶jul¶ago¶sept¶oct¶nov¶dic\" ; \r\r    // if an empty ~localeID is given, use current Get ( SystemLanguage )\r    MonthName ( Date ( 1 ; 1 ; 2005 ) ) & \"¶\" & MonthName ( Date ( 2 ; 1 ; 2005 ) ) & \"¶\" & \r    MonthName ( Date ( 3 ; 1 ; 2005 ) ) & \"¶\" & MonthName ( Date ( 4 ; 1 ; 2005 ) ) & \"¶\" & \r    MonthName ( Date ( 5 ; 1 ; 2005 ) ) & \"¶\" & MonthName ( Date ( 6 ; 1 ; 2005 ) ) & \"¶\" & \r    MonthName ( Date ( 7 ; 1 ; 2005 ) ) & \"¶\" & MonthName ( Date ( 8 ; 1 ; 2005 ) ) & \"¶\" & \r    MonthName ( Date ( 9 ; 1 ; 2005 ) ) & \"¶\" & MonthName ( Date ( 10 ; 1 ; 2005 ) ) & \"¶\" & \r    MonthName ( Date ( 11 ; 1 ; 2005 ) ) & \"¶\" & MonthName ( Date ( 12 ; 1 ; 2005 ) ) & \"¶\" & \r    Left ( MonthName ( Date ( 1 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & Left ( MonthName ( Date ( 2 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & \r    Left ( MonthName ( Date ( 3 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & Left ( MonthName ( Date ( 4 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & \r    Left ( MonthName ( Date ( 5 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & Left ( MonthName ( Date ( 6 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & \r    Left ( MonthName ( Date ( 7 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & Left ( MonthName ( Date ( 8 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & \r    Left ( MonthName ( Date ( 9 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & Left ( MonthName ( Date ( 10 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & \r    Left ( MonthName ( Date ( 11 ; 1 ; 2005 ) ) ; 3 ) & \"¶\" & Left ( MonthName ( Date ( 12 ; 1 ; 2005 ) ) ; 3 ) \r  )\r)",
        "NameToNumber": "Let (\r[\r~monthName = TT.Text.Accentless ( ~monthName ) ;\r~frenchList = TT.Text.Accentless ( TT.Date.Month.NameList ( \"fr\" ) ) ;\r~englishList = TT.Text.Accentless ( TT.Date.Month.NameList ( \"en\" ) ) ;\r~localeList = If ( Position ( ~frenchList ; ~monthName ; 1 ; 1 ) ; ~frenchList ; ~englishList ) ;\r~number = TT.List.Value.Position ( ~localeList ; ~monthName ; 1 ; 1 )\r] ;\r\r~number - If (~number > 12 ; 12 )\r\r)",
        "NumberToName": "GetValue ( TT.Date.Month.NameList ( ~localeID ) ; ~monthNumber )"
      },
      "SkipWeekends": "Let (\r\r~day = DayOfWeek ( ~startDate ) ;\r\rIf ( ~days = 0 ;\r\r\rCase (\r~day = 1 ; ~startDate + 1 ;\r~day = 7 ; ~startDate + 2 ;\r~startDate\r) ;\r\rLet (\r[\r~day = If ( ~day = 1 ; 7 ; ~day - 1 )\r] ; \r\r~startDate + \r~days + \rIf ( ~day = 6 ; 2 ; 0 ) + \r\rFloor ( \r( ~days - 1 + ( If ( ~day = 6 ; 1 ; Mod ( ~day ; 6 ) ^ 1 ) ) ) / 5 \r) * 2 \r\r)\r\r)\r\r)",
      "Week": {
        "End": "Case (\r\r~dateOrWeek ≤ 52 ; \rLet ( \r~date = Date ( 1 ; 1 ; ~year ) ;\r~date - DayOfWeek ( ~date ) + 7 * ~dateOrWeek\r) ;\r\rIsValid ( GetAsDate ( ~dateOrWeek ) ) ;\rLet ( \r~dayOfWeek = DayOfWeek ( ~dateOrWeek ) ;\r~dateOrWeek + 7 - ~dayOfWeek\r) ;\r\r)",
        "Start": "Case (\r\r~dateOrWeek ≤ 52 ; \rLet ( \r~date = Date ( 1 ; 1 ; ~year ) ;\r~date - DayOfWeek ( ~date ) + 7 * ~dateOrWeek - 6 \r) ;\r\rIsValid ( GetAsDate ( ~dateOrWeek ) ) ;\rLet ( \r~dayOfWeek = DayOfWeek ( ~dateOrWeek ) ;\r~dateOrWeek - ~dayOfWeek + 1\r) ;\r\r)"
      }
    },
    "Dev": {
      "Debug": "Let ( [\r\t\t~input = List (\r\t\t\t\"Environment\";\r\t\t\t\"\tApplicationVersion\";\r\t\t\t\"\tSystemPlatform\";\r\t\t\t\"\tSystemVersion\";\r\t\t\t\"\tApplicationLanguage\";\r\t\t\t\"\tSystemLanguage\";\r\t\t\t\"\tHostName\";\r\t\t\t\"\tHostApplicationVersion\";\r\t\t\t\"\tSystemIPAddress\";\r\t\t\t\"\tHostIPAddress\";\r\t\t\t\"\tCurrentTimeStamp\";\r\t\t\t\"\tCurrentHostTimeStamp\";\r\t\t\t\"\tInstalledFMPlugins\";\r\t\t\t\"\tAllowAbortState\";\r\t\t\t\"\tConnectionState\";\r\t\t\t\"\tCustomMenuSetName\";\r\t\t\t\"\tFileName\";\r\t\t\t\"\tFileSize\";\r\t\t\t\"\tFoundCount\";\r\t\t\t\"\tSystemNICAddress\";\r\t\t\t\"\tPersistentID\";\r\t\t\t\"\tRecordOpenCount\";\r\t\t\t\"Errors\";\r\t\t\t\"\tLastError\";\r\t\t\t\"\tLastODBCError\";\r\t\t\t\"User\";\r\t\t\t\"\tAccountName\";\r\t\t\t\"\tAccountPrivilegeSetName\";\r\t\t\t\"\tCurrentPrivilegeSetName\";\r\t\t\t\"\tAccountExtendedPrivileges\";\r\t\t\t\"\tCurrentExtendedPrivileges\";\r\t\t\t\"\tAccountGroupName\";\r\t\t\t\"Layout\";\r\t\t\t\"\tLayoutName\";\r\t\t\t\"\tLayoutNumber\";\r\t\t\t\"\tLayoutTableName\";\r\t\t\t\"\tLayoutViewState\";\r\t\t\t\"\tLayoutAccess\";\r\t\t\t\"\tLayoutTableName\";\r\t\t\t\"\tActiveLayoutObjectName\";\r\t\t\t\"\tActivePortalRowNumber\";\r\t\t\t\"Records\";\r\t\t\t\"\tRecordID\";\r\t\t\t\"\tRecordNumber\";\r\t\t\t\"\tRecordAccess\";\r\t\t\t\"\tRecordModificationCount\";\r\t\t\t\"\tRecordOpenState\";\r\t\t\t\"\tSortState\";\r\t\t\t\"\tTotalRecordCount\";\r\t\t\t\"Field\";\r\t\t\t\"\tActiveFieldName\";\r\t\t\t\"\tActiveFieldTableName\";\r\t\t\t\"\tActiveFieldContents\";\r\t\t\t\"\tActiveRepetitionNumber\";\r\t\t\t\"\tActiveSelectionStart\";\r\t\t\t\"\tActiveSelectionSize\";\r\t\t\t\"\tCalculationRepetitionNumber\";\r\t\t\t\"Script\";\r\t\t\t\"\tScriptName\";\r\t\t\t\"\tScriptParameter\";\r\t\t\t\"\tScriptResult\";\r\t\t\t\"Paths\";\r\t\t\t\"\tTemporaryPath\";\r\t\t\t\"\tDesktopPath\";\r\t\t\t\"\tDocumentsPath\";\r\t\t\t\"\tFileMakerPath\";\r\t\t\t\"\tFilePath\";\r\t\t\t\"\tPreferencesPath\";\r\t\t\t\"\tSystemDrive\";\r\t\t);\r\t\t~tab = \"\t\";\r\t\t~line = GetValue ( ~input ; $~debugCounter );\r\t\t~eval = If ( Left ( ~line ; 1 ) = ~tab ; // evaluate lines prefixed with tabs\r\t\t\tLet ( [\r\t\t\t\t~function = Trim ( ~line );\r\t\t\t\t~padding = \"                              \"; // 30 chars is longest function name\r\t\t\t\t~result = Evaluate ( \"Get(\" & ~function & \")\" )\r\t\t\t];\r\t\t\t\t~function\r\t\t\t\t& Left ( ~padding ; Length ( ~padding ) - Length ( ~function ) ) // spacing out result\r\t\t\t\t& If ( ValueCount ( ~result ) > 1; // some functions return multiple lines\r\t\t\t\t\tSubstitute ( ~result ; ¶ ; ¶ & ~tab & Left ( ~padding ; Length ( ~padding ) - 1 ) );\r\t\t\t\t\t~result\r\t\t\t\t)\r\t\t\t);\r\t\t\t~line\r\t\t);\r\t\t~lastValue = RightWords ( ~input ; 1 );\r\t\t~itemCount = ValueCount ( ~input );\r\t\t$~debugOutput = List ( $~debugOutput ; ~eval )\r\t];\r\t\tIf ( $~debugCounter = ~itemCount;\r\t\t\t// don't want the result to continously build and length will vary based on function results with multiple lines\r\t\t\tLeft ( $~debugOutput ; Position ( $~debugOutput ; ¶ ; Position ( $~debugOutput ; ~lastValue ; 1 ; 1 ) ; 1 ) - 1 ); // better way to do this?\r\t\t\tLet ( $~debugCounter = $~debugCounter + 1 ; TT.Dev.Debug ) )\r\t)"
    },
    "Device": {
      "Android": "Get ( Device ) = 5",
      "Mac": "Get ( SystemPlatform ) = 1",
      "Windows": "Abs ( Get ( SystemPlatform )) = 2",
      "iOS": "Abs ( Get ( SystemPlatform )) = 3",
      "iPad": "Get ( Device ) = 3",
      "iPhone": "Get ( Device ) = 4"
    },
    "File": {
      "Base64": {
        "Md5": "Let ( \r[\r~md5file =  CryptDigest ( ~base64 ; \"MD5\" ) ;\r~md5 = Base64Encode ( ~md5file )\r] ;\r\rGetValue ( ~md5 ; 1 )\r\r)"
      },
      "Extension": "RightWords ( Substitute ( GetContainerAttribute ( ~file ; \"filename\" ) ; \".\" ; \" \" ) ; 1 )",
      "Filename": "Let (\r[\r~filename = GetContainerAttribute ( ~file ; \"filename\" ) ;\r~extension = \".\" & RightWords ( Substitute ( ~filename ; \".\" ; \" \" ) ; 1 )\r] ;\r\rIf ( ~includeExtension ; ~filename ; Substitute ( ~filename ; ~extension ; \"\" ) )\r\r)",
      "Filesize": "Let ( \r[ \r~rawBytes = Int ( ~bytes ) ;\r\r~unit = Case (\rIsEmpty ( ~unit ) ; 1024 ;\r~unit = \"metric\" or ~unit = \"M\"; 1000 ; \r~unit = \"binary\" or ~unit = \"B\" ; 1024 ; \r~unit = \"1000\"  or ~unit = 1024 ; ~unit ; \r1024\r) ;\r\r~kilobyte = ~unit ;\r~megabyte = ~kilobyte ^ 2 ;\r~gigabyte = ~kilobyte ^ 3 ;\r~terabyte = ~kilobyte ^ 4 ;\r~petabyte = ~kilobyte ^ 5 ;\r~exabyte = ~kilobyte ^ 6 ;\r~zettabyte = ~kilobyte ^ 7 ;\r~yottabyte = ~kilobyte ^ 8 ;\r\r~decimals = If ( IsEmpty ( ~precision ) ; 0 ; Abs ( Int ( ~precision ) ) ) ;\r\r~magnitude = Floor ( Ln ( ~rawBytes ) / Ln ( ~unit ) ) ;\r~magnitude = Min ( ~magnitude ; 8 ) ;\r~magnitude = ~unit ^ ~magnitude  ;\r\r~label = Case (\rIsEmpty ( ~format ) ; \"\" ;\r\r~format = \"long\" or ~format = \"L\" ;  Case (\r~rawBytes ≥ ~yottabyte ; \"Yottabyte\" ;\r~rawBytes ≥ ~zettabyte ; \"Zettabyte\" ;\r~rawBytes ≥ ~exabyte ; \"Exabyte\" ;\r~rawBytes ≥ ~petabyte ; \"Petabyte\" ;\r~rawBytes ≥ ~terabyte ; \"Terabyte\" ;\r~rawBytes ≥ ~gigabyte ; \"Gigabyte\" ;\r~rawBytes ≥ ~megabyte ; \"Megabyte\" ;\r~rawBytes ≥ ~kilobyte ; \"Kilobyte\" ;\r\"Byte\"\r) ;\r\r~format = \"short\" or ~format = \"S\" ; Case (\r~rawBytes ≥ ~yottabyte ; \"YB\" ;\r~rawBytes ≥ ~zettabyte ; \"ZB\" ;\r~rawBytes ≥ ~exabyte ; \"EB\" ;\r~rawBytes ≥ ~petabyte ; \"PB\" ;\r~rawBytes ≥ ~terabyte ; \"TB\" ;\r~rawBytes ≥ ~gigabyte ; \"GB\" ;\r~rawBytes ≥ ~megabyte ; \"MB\" ;\r~rawBytes ≥ ~kilobyte ; \"KB\" ;\r\"B\"\r)\r) ;\r\r~size = Round ( ~rawBytes / ~magnitude ; ~decimals ) \r] ; \r\r~size & \" \" & If ( Left ( ~format ; 1 ) = \"L\" and ~size ≠ 1 ; ~label & \"s\" ; ~label )\r\r )",
      "Md5": "GetContainerAttribute ( ~file ; \"MD5\" )",
      "Rename": "Let (\r[\r~positionPoint = Length ( ~filename ) - Position ( ~filename ; \".\" ; Length ( ~filename ) ; - 1 ) ;\r~hasExtension = ~positionPoint = 3 or ~positionPoint = 4 ;\r~extension = \".\" & RightWords ( Substitute ( ~filename ; \".\" ; ¶ ) ; 1 ) ;\r~fileExtension = TT.File.Extension ( ~file ) ;\r~filename = If ( ~hasExtension ; Substitute ( ~filename ; ~extension ; \"\" ) ; ~filename )\r] ; \r\rBase64Decode ( Base64Encode ( ~file ) ; ~filename & \".\" & ~fileExtension )\r\r)",
      "Signature": "Let (\r[ \r~algorithm = If ( ~algorithm = \"\" ; \"SHA256\" ; ~algorithm ) ;\r~digest = CryptDigest ( ~file ; ~algorithm )\r] ;\r\rIf ( ~format = \"Hex\" ; HexEncode ( ~digest ) ; Base64EncodeRFC ( 4648;  ~digest ) )\r\r)"
    },
    "Filename": {
      "Extension": "Let (\r~extension = RightWords ( Substitute ( ~filename ; \".\" ; \" \" ) ; 1 ) ;\r\rIf ( Length ( ~extension ) > 4 ; \"\" ; ~extension )\r\r)",
      "Format": "Let (  \r[\r~extension = Substitute ( ~extension ; \".\" ; \"\" ) ;\r\r~filename = Substitute ( ~filename ; \r[ \":\" ; \"\" ] ;\r[ \".\" ; \"\" ] ;\r[ \"/\" ; \"\" ] ;\r[ \"<\" ; \"\" ] ;\r[ \">\" ; \"\" ] ;\r[ \":\" ; \"\" ] ;\r[ \"\\\"\" ; \"\" ] ;\r[ \"/\" ; \"\" ] ;\r[ \"\\\\\" ; \"\" ] ;\r[ \"|\" ; \"\" ] ;\r[ \"?\" ; \"\" ] ;\r[ \"*\" ; \"\" ] ;\r[ \"^\" ; \"\" ] ;\r[ Char ( 13 ) ; \"\" ] ;\r[ Char ( 10 ) ; \"\" ] ;\r[ ~extension ; \"\" ]\r) ;\r\r~filename = If ( Length ( ~filename ) > 50 ; Left ( ~filename ; 50 ) & \"(…)\" ; ~filename ) ; //Utilisation du caractère ellipsis (…) au lieu de trois points vu que point est un caractère réservé\r\r~dateType = If ( Length ( ~dateOrTimestamp ) > 10 ; \"timestamp\" ; \"date\" ) ;\r\r~date = Case ( \r\t\t~dateOrTimestamp = \"\" ; \"\" ; \r\t\t~dateType = \"date\" ; TT.Date.Format ( ~dateOrTimestamp ; \"#YYYY-#MM-#DD\" ; \"fr\" ) ;\r\t\t~dateType = \"timestamp\" ; TT.Timestamp.Format ( ~dateOrTimestamp ; \"[YYYY]-[MM]-[DD]_[HH]-[mm]-[ss]\" ; \"fr\" )\r\t     )\r\r] ;\r\rIf ( not IsEmpty ( FilterValues ( ~datePosition ; List ( \"before\" ; \"avant\" ; 0 ) ) ) ; ~date & \"_\" ) &\r~fileName &\rIf ( not IsEmpty ( FilterValues ( ~datePosition ; List ( \"after\" ; \"après\" ; 1 ) ) ) ; \"_\" & ~date  ) &\r\".\" & ~extension\r\r)",
      "MIMEType": "Let (\r[\r~containerFilename = GetContainerAttribute ( ~filenameOrExtension ; \"filename\" ) ;\r~filenameOrExtension = If ( ~containerFilename ≠ \"\" ; ~containerFilename ; ~filenameOrExtension ) ;\r~extension = TT.Filename.Extension ( ~filenameOrExtension )\r] ;\r\rCase ( \r~extension = \"aac\" ; \"audio/aac\" ; \r~extension = \"abw\" ; \"application/x-abiword\" ; \r~extension = \"arc\" ; \"application/x-freearc\" ; \r~extension = \"avi\" ; \"video/x-msvideo\" ; \r~extension = \"azw\" ; \"application/vndamazonebook\" ; \r~extension = \"bin\" ; \"application/octet-stream\" ; \r~extension = \"bmp\" ; \"image/bmp\" ; \r~extension = \"bz\" ; \"application/x-bzip\" ; \r~extension = \"bz2\" ; \"application/x-bzip2\" ; \r~extension = \"csh\" ; \"application/x-csh\" ; \r~extension = \"css\" ; \"text/css\" ; \r~extension = \"csv\" ; \"text/csv\" ; \r~extension = \"doc\" ; \"application/msword\" ; \r~extension = \"docx\" ; \"application/vndopenxmlformats-officedocumentwordprocessingmldocument\" ; \r~extension = \"eot\" ; \"application/vndms-fontobject\" ; \r~extension = \"epub\" ; \"application/epub+zip\" ; \r~extension = \"gz\" ; \"application/gzip\" ; \r~extension = \"gif\" ; \"image/gif\" ; \r~extension = \"htm\" ; \"text/html\" ; \r~extension = \"html\" ; \"text/html\" ; \r~extension = \"ico\" ; \"image/vndmicrosofticon\" ; \r~extension = \"ics\" ; \"text/calendar\" ; \r~extension = \"jar\" ; \"application/java-archive\" ; \r~extension = \"jpeg\" ; \"image/jpeg\" ; \r~extension = \"jpg\" ; \"image/jpeg\" ; \r~extension = \"js\" ; \"text/javascript, per the following specifications:\" ; \r~extension = \"json\" ; \"application/json\" ; \r~extension = \"jsonld\" ; \"application/ld+json\" ; \r~extension = \"mid\" ; \"audio/midi\" ; \r~extension = \"midi\" ; \"audio/midi\" ; \r~extension = \"mjs\" ; \"text/javascript\" ; \r~extension = \"mp3\" ; \"audio/mpeg\" ; \r~extension = \"mpeg\" ; \"video/mpeg\" ; \r~extension = \"mpkg\" ; \"application/vndappleinstaller+xml\" ; \r~extension = \"odp\" ; \"application/vndoasisopendocumentpresentation\" ; \r~extension = \"ods\" ; \"application/vndoasisopendocumentspreadsheet\" ; \r~extension = \"odt\" ; \"application/vndoasisopendocumenttext\" ; \r~extension = \"oga\" ; \"audio/ogg\" ; \r~extension = \"ogv\" ; \"video/ogg\" ; \r~extension = \"ogx\" ; \"application/ogg\" ; \r~extension = \"opus\" ; \"audio/opus\" ; \r~extension = \"otf\" ; \"font/otf\" ; \r~extension = \"png\" ; \"image/png\" ; \r~extension = \"pdf\" ; \"application/pdf\" ; \r~extension = \"php\" ; \"application/x-httpd-php\" ; \r~extension = \"ppt\" ; \"application/vndms-powerpoint\" ; \r~extension = \"pptx\" ; \"application/vndopenxmlformats-officedocumentpresentationmlpresentation\" ; \r~extension = \"rar\" ; \"application/vndrar\" ; \r~extension = \"rtf\" ; \"application/rtf\" ; \r~extension = \"sh\" ; \"application/x-sh\" ; \r~extension = \"svg\" ; \"image/svg+xml\" ; \r~extension = \"swf\" ; \"application/x-shockwave-flash\" ; \r~extension = \"tar\" ; \"application/x-tar\" ; \r~extension = \"tif\" ; \"image/tiff\" ; \r~extension = \"tiff\" ; \"image/tiff\" ; \r~extension = \"ts\" ; \"video/mp2t\" ; \r~extension = \"ttf\" ; \"font/ttf\" ; \r~extension = \"txt\" ; \"text/plain\" ; \r~extension = \"vsd\" ; \"application/vndvisio\" ; \r~extension = \"wav\" ; \"audio/wav\" ; \r~extension = \"weba\" ; \"audio/webm\" ; \r~extension = \"webm\" ; \"video/webm\" ; \r~extension = \"webp\" ; \"image/webp\" ; \r~extension = \"woff\" ; \"font/woff\" ; \r~extension = \"woff2\" ; \"font/woff2\" ; \r~extension = \"xhtml\" ; \"application/xhtml+xml\" ; \r~extension = \"xls\" ; \"application/vndms-excel\" ; \r~extension = \"xlsx\" ; \"application/vndopenxmlformats-officedocumentspreadsheetmlsheet\" ; \r~extension = \"xml\" ; \"application/xml if not readable from casual users (RFC 3023, section 3)\" ; \r~extension = \"xul\" ; \"application/vndmozillaxul+xml\" ; \r~extension = \"zip\" ; \"application/zip\" ; \r~extension = \"3gp\" ; \"video/3gpp\" ; \r~extension = \"3g2\" ; \"video/3gpp2\" ; \r~extension = \"7z\" ; \"application/x-7z-compressed\" ; \t\r\"application/octet-stream\" // default\r)\r\r)"
    },
    "Fm": {
      "Database": {
        "GetFieldName": "Let ( \r~fullFieldName = Case ( \r\t\t\t\tPatternCount ( ~fullField ; \"::\" ) ; ~fullField ; \r\t\t\t\tGetFieldName ( ~fullField )\r\t\t\t    ) ;\r\rGetValue ( Substitute ( ~fullFieldName ; \"::\" ; ¶ ) ; 2 )\r\r)",
        "GetTableName": "Let ( \r~fullFieldName = Case ( \r\t\t\t\tPatternCount ( ~fullField ; \"::\" ) ; ~fullField ; \r\t\t\t\tGetFieldName ( ~fullField )\r\t\t\t    ) ;\r\rGetValue ( Substitute ( ~fullFieldName ; \"::\" ; ¶ ) ; 1 )\r\r)",
        "Name_Id": "Let (\r[ \r~inputType = If ( ~nameOrID = GetAsNumber ( ~nameOrID ) ; \"ID\" ; \"Name\" ) ;\r~filename = Case ( IsEmpty ( ~filename ) ; Get ( FileName ) ; ~filename ) ; \r\r~layoutName = Case ( \r\t\t\t  PatternCount ( ~nameOrID ; \"::\" ) ; GetValue ( Substitute ( ~nameOrID ; \"::\" ; ¶ ) ; 1 ) ; \r\t\t\t  Get ( LayoutName ) \r\t\t\t) ;\r\r~layoutName = Case ( \r\t\t\t ~inputType = \"ID\" and Length ( ~layoutName ) = 7 ; TT.Fm.Database.Name_Id ( ~layoutName ; \"T\" ; ~filename ) ; \r\t\t\t  ~layoutName \r\t\t\t) ;\r\r~type = Left ( ~type ; 1 ) ;\r~type = Case ( ~type = \"T\" ; \"Table\" ; ~type = \"L\" ; \"Layout\" ; ~type = \"F\" ; \"Field\" ; ~type = \"S\" ; \"Script\" ; ~type = \"V\" ; \"ValueList\" ) ;\r\r~nameOrID = Case ( ~type = \"Field\" and PatternCount ( ~nameOrID ; \"[\" ) ; Left ( ~nameOrID ; Position ( ~nameOrID ; \"[\" ; 10000 ; -1 ) -1 ) ; ~nameOrID ) ;     // remove the repetition number\r~nameOrID = Case ( ~type = \"Field\" and PatternCount ( ~nameOrID ; \"::\" ) ; Replace ( ~nameOrID ; 1 ; Position ( ~nameOrID ; \"::\" ; 1 ; 1 ) + 1 ; \"\" ) ; ~nameOrID )  ;    // for fields, do not take TO\r\r~endOfString = \"( \\\"\" & ~filename & \"\\\"\" & Case ( ~type = \"Field\" ; \"; \\\"\" & ~layoutName & \"\\\"\" ) & \")\" ;\r\r\r~ids = Evaluate ( ~type & \"IDs\" & ~endOfString ) ;\r~names = Evaluate ( ~type & \"Names\" & ~endOfString ) ;\r~inputList = If ( ~inputType = \"ID\" ; ~ids ; ~names ) ;\r~outputList = If ( ~inputType = \"ID\" ; ~names ; ~ids ) ;\r\r~valid = not IsEmpty ( FilterValues ( ~nameOrID ; ~inputList ) )\r\r] ;\r\rIf ( ~valid ;\rGetValue ( ~outputList ; Let  ( ~adj = ¶ & ~inputList & ¶ ; PatternCount ( Left ( ~adj ; Position ( ~adj ; ¶ & ~nameOrID & ¶ ; 1 ; 1 ) + 1 ) ; ¶ ) ) )\r)\r\r)",
        "isFieldReference": "not ( EvaluationError ( GetFieldName ( ~reference ) ) )",
        "isFullFieldName": "Position ( ~field ; \"::\" ; 1 ; 1 ) and TT.Text.GetBetween ( ~field ; \"\" ; \"::\" ; 1 ; 1 ) ≠ \"\" and TT.Text.GetBetween ( ~field ; \"::\" ; \"\" ; 1 ; 1 ) ≠ \"\""
      },
      "Error": {
        "Complete": "Let ( \r[\r~error = Get ( LastError ) ;\r~details = Get ( LastExternalErrorDetail )\r] ; \rIf ( not ~error ; ~error ; ~error & \" (\" & TT.Fm.Error.Description ( ~error ) & \")\" & If ( ~details ≠ \"\" ; \" : \" & ~details ) )\r)",
        "Description": "Case ( \r~errorCode = -1 ; \"Unknown error\" ;\r~errorCode = 0 ; \"No error\" ;\r~errorCode = 1 ; \"User canceled action\" ;\r~errorCode = 2 ; \"Memory error\" ;\r~errorCode = 3 ; \"Command is unavailable (for example, wrong operating system or mode)\" ;\r~errorCode = 4 ; \"Command is unknown\" ;\r~errorCode = 5 ; \"Command is invalid (for example, a Set Field script step does not have a calculation specified)\" ;\r~errorCode = 6 ; \"File is read-only\" ;\r~errorCode = 7 ; \"Running out of memory\" ;\r~errorCode = 8 ; \"Empty result\" ;\r~errorCode = 9 ; \"Insufficient privileges\" ;\r~errorCode = 10 ; \"Requested data is missing\" ;\r~errorCode = 11 ; \"Name is not valid\" ;\r~errorCode = 12 ; \"Name already exists\" ;\r~errorCode = 13 ; \"File or object is in use\" ;\r~errorCode = 14 ; \"Out of range\" ;\r~errorCode = 15 ; \"Can't divide by zero\" ;\r~errorCode = 16 ; \"Operation failed; request retry (for example, a user query)\" ;\r~errorCode = 17 ; \"Attempt to convert foreign character set to UTF-16 failed\" ;\r~errorCode = 18 ; \"Client must provide account information to proceed\" ;\r~errorCode = 19 ; \"String contains characters other than A-Z, a-z, 0-9 (ASCII)\" ;\r~errorCode = 20 ; \"Command/operation canceled by triggered script\" ;\r~errorCode = 21 ; \"Request not supported (for example, when creating a hard link on a file system that does not support hard links)\" ;\r~errorCode = 100 ; \"File is missing\" ;\r~errorCode = 101 ; \"Record is missing\" ;\r~errorCode = 102 ; \"Field is missing\" ;\r~errorCode = 103 ; \"Relationship is missing\" ;\r~errorCode = 104 ; \"Script is missing\" ;\r~errorCode = 105 ; \"Layout is missing\" ;\r~errorCode = 106 ; \"Table is missing\" ;\r~errorCode = 107 ; \"Index is missing\" ;\r~errorCode = 108 ; \"Value list is missing\" ;\r~errorCode = 109 ; \"Privilege set is missing\" ;\r~errorCode = 110 ; \"Related tables are missing\" ;\r~errorCode = 111 ; \"Field repetition is invalid\" ;\r~errorCode = 112 ; \"Window is missing\" ;\r~errorCode = 113 ; \"Function is missing\" ;\r~errorCode = 114 ; \"File reference is missing\" ;\r~errorCode = 115 ; \"Menu set is missing\" ;\r~errorCode = 116 ; \"Layout object is missing\" ;\r~errorCode = 117 ; \"Data source is missing\" ;\r~errorCode = 118 ; \"Theme is missing\" ;\r~errorCode = 130 ; \"Files are damaged or missing and must be reinstalled\" ;\r~errorCode = 131 ; \"Language pack files are missing\" ;\r~errorCode = 200 ; \"Record access is denied\" ;\r~errorCode = 201 ; \"Field cannot be modified\" ;\r~errorCode = 202 ; \"Field access is denied\" ;\r~errorCode = 203 ; \"No records in file to print, or password doesn't allow print access\" ;\r~errorCode = 204 ; \"No access to field(s) in sort order\" ;\r~errorCode = 205 ; \"User does not have access privileges to create new records; import will overwrite existing data\" ;\r~errorCode = 206 ; \"User does not have password change privileges, or file is not modifiable\" ;\r~errorCode = 207 ; \"User does not have privileges to change database schema, or file is not modifiable\" ;\r~errorCode = 208 ; \"Password does not contain enough characters\" ;\r~errorCode = 209 ; \"New password must be different from existing one\" ;\r~errorCode = 210 ; \"User account is inactive\" ;\r~errorCode = 211 ; \"Password has expired\" ;\r~errorCode = 212 ; \"Invalid user account or password\" ;\r~errorCode = 214 ; \"Too many login attempts\" ;\r~errorCode = 215 ; \"Administrator privileges cannot be duplicated\" ;\r~errorCode = 216 ; \"Guest account cannot be duplicated\" ;\r~errorCode = 217 ; \"User does not have sufficient privileges to modify administrator account\" ;\r~errorCode = 218 ; \"Password and verify password do not match\" ;\r~errorCode = 219 ; \"Cannot open file; must be licensed user; contact team manager\" ;\r~errorCode = 300 ; \"File is locked or in use\" ;\r~errorCode = 301 ; \"Record is in use by another user\" ;\r~errorCode = 302 ; \"Table is in use by another user\" ;\r~errorCode = 303 ; \"Database schema is in use by another user\" ;\r~errorCode = 304 ; \"Layout is in use by another user\" ;\r~errorCode = 306 ; \"Record modification ID does not match\" ;\r~errorCode = 307 ; \"Transaction could not be locked because of a communication error with the host\" ;\r~errorCode = 308 ; \"Theme is locked and in use by another user\" ;\r~errorCode = 400 ; \"Find criteria are empty\" ;\r~errorCode = 401 ; \"No records match the request\" ;\r~errorCode = 402 ; \"Selected field is not a match field for a lookup\" ;\r~errorCode = 404 ; \"Sort order is invalid\" ;\r~errorCode = 405 ; \"Number of records specified exceeds number of records that can be omitted\" ;\r~errorCode = 406 ; \"Replace/reserialize criteria are invalid\" ;\r~errorCode = 407 ; \"One or both match fields are missing (invalid relationship)\" ;\r~errorCode = 408 ; \"Specified field has inappropriate data type for this operation\" ;\r~errorCode = 409 ; \"Import order is invalid\" ;\r~errorCode = 410 ; \"Export order is invalid\" ;\r~errorCode = 412 ; \"Wrong version of FileMaker Pro used to recover file\" ;\r~errorCode = 413 ; \"Specified field has inappropriate field type\" ;\r~errorCode = 414 ; \"Layout cannot display the result\" ;\r~errorCode = 415 ; \"One or more required related records are not available\" ;\r~errorCode = 416 ; \"A primary key is required from the data source table\" ;\r~errorCode = 417 ; \"File is not a supported data source\" ;\r~errorCode = 418 ; \"Internal failure in INSERT operation into a field\" ;\r~errorCode = 500 ; \"Date value does not meet validation entry options\" ;\r~errorCode = 501 ; \"Time value does not meet validation entry options\" ;\r~errorCode = 502 ; \"Number value does not meet validation entry options\" ;\r~errorCode = 503 ; \"Value in field is not within the range specified in validation entry options\" ;\r~errorCode = 504 ; \"Value in field is not unique, as required in validation entry options\" ;\r~errorCode = 505 ; \"Value in field is not an existing value in the file, as required in validation entry options\" ;\r~errorCode = 506 ; \"Value in field is not listed in the value list specified in validation entry option\" ;\r~errorCode = 507 ; \"Value in field failed calculation test of validation entry option\" ;\r~errorCode = 508 ; \"Invalid value entered in Find mode\" ;\r~errorCode = 509 ; \"Field requires a valid value\" ;\r~errorCode = 510 ; \"Related value is empty or unavailable\" ;\r~errorCode = 511 ; \"Value in field exceeds maximum field size\" ;\r~errorCode = 512 ; \"Record was already modified by another user\" ;\r~errorCode = 513 ; \"No validation was specified but data cannot fit into the field\" ;\r~errorCode = 600 ; \"Print error has occurred\" ;\r~errorCode = 601 ; \"Combined header and footer exceed one page\" ;\r~errorCode = 602 ; \"Body doesn't fit on a page for current column setup\" ;\r~errorCode = 603 ; \"Print connection lost\" ;\r~errorCode = 700 ; \"File is of the wrong file type for import\" ;\r~errorCode = 706 ; \"EPS file has no preview image\" ;\r~errorCode = 707 ; \"Graphic translator cannot be found\" ;\r~errorCode = 708 ; \"Can't import the file, or need color monitor support to import file\" ;\r~errorCode = 711 ; \"Import translator cannot be found\" ;\r~errorCode = 714 ; \"Password privileges do not allow the operation\" ;\r~errorCode = 715 ; \"Specified Excel worksheet or named range is missing\" ;\r~errorCode = 716 ; \"A SQL query using DELETE, INSERT, or UPDATE is not allowed for ODBC import\" ;\r~errorCode = 717 ; \"There is not enough XML/XSL information to proceed with the import or export\" ;\r~errorCode = 718 ; \"Error in parsing XML file (from Xerces)\" ;\r~errorCode = 719 ; \"Error in transforming XML using XSL (from Xalan)\" ;\r~errorCode = 720 ; \"Error when exporting; intended format does not support repeating fields\" ;\r~errorCode = 721 ; \"Unknown error occurred in the parser or the transformer\" ;\r~errorCode = 722 ; \"Cannot import data into a file that has no fields\" ;\r~errorCode = 723 ; \"You do not have permission to add records to or modify records in the target table\" ;\r~errorCode = 724 ; \"You do not have permission to add records to the target table\" ;\r~errorCode = 725 ; \"You do not have permission to modify records in the target table\" ;\r~errorCode = 726 ; \"Source file has more records than the target table; not all records were imported\" ;\r~errorCode = 727 ; \"Target table has more records than the source file; not all records were updated\" ;\r~errorCode = 729 ; \"Errors occurred during import; records could not be imported\" ;\r~errorCode = 730 ; \"Unsupported Excel version; convert file to the current Excel format and try again\" ;\r~errorCode = 731 ; \"File you are importing from contains no data\" ;\r~errorCode = 732 ; \"This file cannot be inserted because it contains other files\" ;\r~errorCode = 733 ; \"A table cannot be imported into itself\" ;\r~errorCode = 734 ; \"This file type cannot be displayed as a picture\" ;\r~errorCode = 735 ; \"This file type cannot be displayed as a picture; it will be inserted and displayed as a file\" ;\r~errorCode = 736 ; \"Too much data to export to this format; data will be truncated\" ;\r~errorCode = 738 ; \"The theme you are importing already exists\" ;\r~errorCode = 800 ; \"Unable to create file on disk\" ;\r~errorCode = 801 ; \"Unable to create temporary file on System disk\" ;\r~errorCode = 802 ; \"Unable to open file\" ;\r~errorCode = 803 ; \"File is single-user, or host cannot be found\" ;\r~errorCode = 804 ; \"File cannot be opened as read-only in its current state\" ;\r~errorCode = 805 ; \"File is damaged; use Recover command\" ;\r~errorCode = 806 ; \"File cannot be opened with this version of a FileMaker client\" ;\r~errorCode = 807 ; \"File is not a FileMaker Pro file or is severely damaged\" ;\r~errorCode = 808 ; \"Cannot open file because access privileges are damaged\" ;\r~errorCode = 809 ; \"Disk/volume is full\" ;\r~errorCode = 810 ; \"Disk/volume is locked\" ;\r~errorCode = 811 ; \"Temporary file cannot be opened as FileMaker Pro file\" ;\r~errorCode = 812 ; \"Exceeded host’s capacity\" ;\r~errorCode = 813 ; \"Record synchronization error on network\" ;\r~errorCode = 814 ; \"File(s) cannot be opened because maximum number is open\" ;\r~errorCode = 815 ; \"Couldn’t open lookup file\" ;\r~errorCode = 816 ; \"Unable to convert file\" ;\r~errorCode = 817 ; \"Unable to open file because it does not belong to this solution\" ;\r~errorCode = 819 ; \"Cannot save a local copy of a remote file\" ;\r~errorCode = 820 ; \"File is being closed\" ;\r~errorCode = 821 ; \"Host forced a disconnect\" ;\r~errorCode = 822 ; \"FileMaker Pro files not found; reinstall missing files\" ;\r~errorCode = 823 ; \"Cannot set file to single-user; guests are connected\" ;\r~errorCode = 824 ; \"File is damaged or not a FileMaker Pro file\" ;\r~errorCode = 825 ; \"File is not authorized to reference the protected file\" ;\r~errorCode = 826 ; \"File path specified is not a valid file path\" ;\r~errorCode = 827 ; \"File was not created because the source contained no data or is a reference\" ;\r~errorCode = 850 ; \"Path is not valid for the operating system\" ;\r~errorCode = 851 ; \"Cannot delete an external file from disk\" ;\r~errorCode = 852 ; \"Cannot write a file to the external storage\" ;\r~errorCode = 853 ; \"One or more containers failed to transfer\" ;\r~errorCode = 870 ; \"Cannot modify file because another user is modifying it\" ;\r~errorCode = 871 ; \"Error occurred loading Core ML model\" ;\r~errorCode = 872 ; \"Core ML model was not loaded because it contained an unsupported input or output parameter\" ;\r~errorCode = 900 ; \"General spelling engine error\" ;\r~errorCode = 901 ; \"Main spelling dictionary not installed\" ;\r~errorCode = 903 ; \"Command cannot be used in a shared file\" ;\r~errorCode = 905 ; \"Command requires a field to be active\" ;\r~errorCode = 906 ; \"Current file is not shared; command can be used only if the file is shared\" ;\r~errorCode = 920 ; \"Cannot initialize the spelling engine\" ;\r~errorCode = 921 ; \"User dictionary cannot be loaded for editing\" ;\r~errorCode = 922 ; \"User dictionary cannot be found\" ;\r~errorCode = 923 ; \"User dictionary is read-only\" ;\r~errorCode = 951 ; \"An unexpected error occurred (*)\" ;\r~errorCode = 952 ; \"Invalid FileMaker Data API token (*)\" ;\r~errorCode = 953 ; \"Exceeded limit on data the FileMaker Data API and OData can transmit (*)\" ;\r~errorCode = 954 ; \"Unsupported XML grammar (*)\" ;\r~errorCode = 955 ; \"No database name (*)\" ;\r~errorCode = 956 ; \"Maximum number of database or Admin API sessions exceeded (*)\" ;\r~errorCode = 957 ; \"Conflicting commands (*)\" ;\r~errorCode = 958 ; \"Parameter missing (*)\" ;\r~errorCode = 959 ; \"Custom Web Publishing technology is disabled\" ;\r~errorCode = 960 ; \"Parameter is invalid\" ;\r~errorCode = 1200 ; \"Generic calculation error\" ;\r~errorCode = 1201 ; \"Too few parameters in the function\" ;\r~errorCode = 1202 ; \"Too many parameters in the function\" ;\r~errorCode = 1203 ; \"Unexpected end of calculation\" ;\r~errorCode = 1204 ; \"Number, text constant, field name, or \\\"(\\\" expected\" ;\r~errorCode = 1205 ; \"Comment is not terminated with \\\"*/\\\"\" ;\r~errorCode = 1206 ; \"Text constant must end with a quotation mark\" ;\r~errorCode = 1207 ; \"Unbalanced parenthesis\" ;\r~errorCode = 1208 ; \"Operator missing, function not found, or \\\"(\\\" not expected\" ;\r~errorCode = 1209 ; \"Name (such as field name or layout name) is missing\" ;\r~errorCode = 1210 ; \"Plug-in function or script step has already been registered\" ;\r~errorCode = 1211 ; \"List usage is not allowed in this function\" ;\r~errorCode = 1212 ; \"An operator (for example, +, -, *) is expected here\" ;\r~errorCode = 1213 ; \"This variable has already been defined in the Let function\" ;\r~errorCode = 1214 ; \"A function parameter contains an expression where a field is required\" ;\r~errorCode = 1215 ; \"This parameter is an invalid Get function parameter\" ;\r~errorCode = 1216 ; \"Only summary fields are allowed as first argument in GetSummary\" ;\r~errorCode = 1217 ; \"Break field is invalid\" ;\r~errorCode = 1218 ; \"Cannot evaluate the number\" ;\r~errorCode = 1219 ; \"A field cannot be used in its own formula\" ;\r~errorCode = 1220 ; \"Field type must be normal or calculated\" ;\r~errorCode = 1221 ; \"Data type must be number, date, time, or timestamp\" ;\r~errorCode = 1222 ; \"Calculation cannot be stored\" ;\r~errorCode = 1223 ; \"Function referred to is not yet implemented\" ;\r~errorCode = 1224 ; \"Function referred to does not exist\" ;\r~errorCode = 1225 ; \"Function referred to is not supported in this context\" ;\r~errorCode = 1300 ; \"The specified name can't be used\" ;\r~errorCode = 1301 ; \"A parameter of the imported or pasted function has the same name as a function in the file\" ;\r~errorCode = 1400 ; \"ODBC client driver initialization failed; make sure ODBC client drivers are properly installed\" ;\r~errorCode = 1401 ; \"Failed to allocate environment (ODBC)\" ;\r~errorCode = 1402 ; \"Failed to free environment (ODBC)\" ;\r~errorCode = 1403 ; \"Failed to disconnect (ODBC)\" ;\r~errorCode = 1404 ; \"Failed to allocate connection (ODBC)\" ;\r~errorCode = 1405 ; \"Failed to free connection (ODBC)\" ;\r~errorCode = 1406 ; \"Failed check for SQL API (ODBC)\" ;\r~errorCode = 1407 ; \"Failed to allocate statement (ODBC)\" ;\r~errorCode = 1408 ; \"Extended error (ODBC)\" ;\r~errorCode = 1409 ; \"Error (ODBC)\" ;\r~errorCode = 1413 ; \"Failed communication link (ODBC)\" ;\r~errorCode = 1414 ; \"SQL statement is too long\" ;\r~errorCode = 1415 ; \"Connection is being disconnected (ODBC)\" ;\r~errorCode = 1450 ; \"Action requires PHP privilege extension (*)\" ;\r~errorCode = 1451 ; \"Action requires that current file be remote\" ;\r~errorCode = 1501 ; \"SMTP authentication failed\" ;\r~errorCode = 1502 ; \"Connection refused by SMTP server\" ;\r~errorCode = 1503 ; \"Error with SSL\" ;\r~errorCode = 1504 ; \"SMTP server requires the connection to be encrypted\" ;\r~errorCode = 1505 ; \"Specified authentication is not supported by SMTP server\" ;\r~errorCode = 1506 ; \"Email message(s) could not be sent successfully\" ;\r~errorCode = 1507 ; \"Unable to log in to the SMTP server\" ;\r~errorCode = 1550 ; \"Cannot load the plug-in, or the plug-in is not a valid plug-in\" ;\r~errorCode = 1551 ; \"Cannot install the plug-in; cannot delete an existing plug-in or write to the folder or disk\" ;\r~errorCode ≥ 1552 and ~errorCode ≤ 1559 ; \"Returned by plug-ins; see the documentation that came with the plug-in\" ;\r~errorCode = 1626 ; \"Protocol is not supported\" ;\r~errorCode = 1627 ; \"Authentication failed\" ;\r~errorCode = 1628 ; \"There was an error with SSL\" ;\r~errorCode = 1629 ; \"Connection timed out; the timeout value is 60 seconds\" ;\r~errorCode = 1630 ; \"URL format is incorrect\" ;\r~errorCode = 1631 ; \"Connection failed\" ;\r~errorCode = 1632 ; \"The certificate has expired\" ;\r~errorCode = 1633 ; \"The certificate is self-signed\" ;\r~errorCode = 1634 ; \"A certificate verification error occurred\" ;\r~errorCode = 1635 ; \"Connection is unencrypted\" ;\r~errorCode = 1700 ; \"Resource doesn’t exist (*)\" ;\r~errorCode = 1701 ; \"Host is currently unable to receive requests (*)\" ;\r~errorCode = 1702 ; \"Authentication information wasn’t provided in the correct format; verify the value of the Authorization header (*)\" ;\r~errorCode = 1703 ; \"Invalid username or password, or JSON Web Token (*)\" ;\r~errorCode = 1704 ; \"Resource doesn’t support the specified HTTP verb (*)\" ;\r~errorCode = 1705 ; \"Required HTTP header wasn’t specified (*)\" ;\r~errorCode = 1706 ; \"Parameter isn’t supported (*)\" ;\r~errorCode = 1707 ; \"Required parameter wasn’t specified in the request (*)\" ;\r~errorCode = 1708 ; \"Parameter value is invalid (*)\" ;\r~errorCode = 1709 ; \"Operation is invalid for the resource’s current status (*)\" ;\r~errorCode = 1710 ; \"JSON input isn’t syntactically valid (*)\" ;\r~errorCode = 1711 ; \"Host’s license has expired (*)\" ;\r~errorCode = 1712 ; \"Private key file already exists; remove it and run the command again (*)\" ;\r~errorCode = 1713 ; \"The API request is not supported for this operating system (*)\" ;\r~errorCode = 1714 ; \"External group name is invalid (*)\" ;\r~errorCode = 1715 ; \"External server account sign-in is not enabled (*)\" \r)"
      },
      "Mode": {
        "Browse": "Get ( WindowMode ) = 0",
        "Find": "Get ( WindowMode ) = 1",
        "Layout": "Get ( WindowMode ) = 4",
        "Preview": "Get ( WindowMode ) = 2"
      },
      "Session": {
        "Admin": "Get ( AccountName ) = \"admin\"",
        "FullAccess": "Get ( AccountPrivilegeSetName ) = \"[Full Access]\"",
        "Server": "Position ( Get ( ApplicationVersion ) ; \"SERVER\" ; 1 ; 1 ) > 0",
        "Web": "Position ( Get ( ApplicationVersion ) ; \"WEB\" ; 1 ; 1 ) > 0"
      },
      "TypeOf": "Let ( \r[\r~text = GetAsText ( ~value ) ; \r~number = GetAsNumber ( ~value ) ; \r~validDate = IsValid ( GetAsDate ( ~text ) ) and not IsEmpty ( ~number ) ; \r~validTime = IsValid ( GetAsTime ( ~text ) ) and Position ( ~text ; \":\" ; 1 ; 1 ) > 0 and not IsEmpty ( ~number ) \r] ;\r\rCase ( \r~value = \"\" ; \"\" ;\r~value = \"?\" ; \"text\" ;\r~validTime and ~validDate ; \"timestamp\" ;\r~validTime ; \"time\" ;\r~validDate ; \"date\" ;\r~text ≠ GetAsText ( ~number ) ; \"text\" ; \r\"number\"\r)\r\r)",
      "View": {
        "Form": "Get ( LayoutViewState ) = 0",
        "List": "Get ( LayoutViewState ) = 1",
        "Table": "Get ( LayoutViewState ) = 2"
      }
    },
    "Foundset": {
      "Average": "Let (\r[\r~foundCount = Get ( FoundCount ) ;\r~field = If ( not Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~field ) ; ~field )\r] ;\r\rCase (\rnot ~foundCount ; 0 ;\r~foundCount = 1 ; GetField ( ~field ) ;\r\rEvaluate ( \r\"Average (\" & \rSubstitute ( \rTT.List.Custom ( 1 ; Get ( FoundCount ) ; \"Let ( ~field = \" & ~field & \" ; GetNthRecord ( ~field ; [n] ) )\" ) ;\r¶ ; \";\"\r) &\r\")\"\r)\r\r)\r\r)",
      "Count": "Let (\r[\r~foundCount = Get ( FoundCount ) ;\r~field = If ( not Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~field ) ; ~field )\r] ;\r\rCase (\rnot ~foundCount ; 0 ;\r~foundCount = 1 ; not IsEmpty ( GetField ( ~field ) ) ;\r\rEvaluate ( \r\"Sum (\" & \rSubstitute ( \rTT.List.Custom ( 1 ; Get ( FoundCount ) ; \"Let ( [ ~field = \" & ~field & \" ;  ~value = GetNthRecord ( ~field ; [n] ) ] ; If ( ~value ≠ \\\"\\\" ; 1 ; 0 ) )\" ) ;\r¶ ; \";\"\r) &\r\")\"\r)\r\r)\r\r)",
      "GetNextRecord": "Let (\r~result = GetNthRecord ( If ( Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetField ( ~field ) ; ~field ) ; Get ( RecordNumber ) + 1 ) ;\rIf ( ~result = \"?\" ; \"\" ; ~result )\r)",
      "GetPreviousRecord": "Let (\r~result = GetNthRecord ( If ( Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetField ( ~field ) ; ~field ) ; Get ( RecordNumber ) - 1 ) ;\rIf ( ~result = \"?\" ; \"\" ; ~result )\r)",
      "GetRecordNumber": "Let ( \r[\r~field = If ( not Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~field ) ; ~field )\r] ;\r\rTT.List.Custom ( 1 ; Get ( FoundCount ) ; \"If ( GetNthRecord ( \" & ~field & \" ; [n] ) = \\\"\" & ~value & \"\\\" ; [n] )\" )\r\r)",
      "Json": "Let ( \r[\r~layout = If ( ~layoutId ; TT.Fm.Database.Name_Id ( ~layoutId ; \"L\" ; \"\" ) ) ;\r~table = Get ( LayoutTableName ) ;\r\r$fieldsList = Case ( \r~fieldsList ≠ \"\" ; ~fieldsList ;\r~layout ≠ \"\" ; FieldNames ( \"\" ; ~layout ) ; \rExecuteSQL ( \"SELECT FieldName FROM FileMaker_Fields WHERE TableName = ?\" ; \"\" ; \"\" ; ~table ) \r) ;\r$fieldsCount = ValueCount ( $fieldsList ) ;\r$fieldsList = Substitute ( \"JSONSetElement (\\\"\\\";\" & TT.List.Custom ( 1 ; $fieldsCount ; \"Let ( ~field = GetValue ( $fieldsList ; [n] ) ; \\\"[\\\" & Quote ( ~field ) & \\\";GetNthRecord ( GetField (\\\" & Quote ( ~field ) & \\\" ) ; [\\\" & \\\"n] );TT.Json.Type ( GetNthRecord ( GetField (\\\" & Quote ( ~field ) & \\\" ) ; [\\\" & \\\"n] ) ) ]\\\") \" ) & \")\" ; ¶ ; \";\" ) ;\r\r$json = \"[]\" ;\r~execute = TT.List.Custom ( 1 ; Get ( FoundCount ) ; \"Let ( $json = JsonSetElement ( $json ; [n] - 1 ; \" & $fieldsList & \" ; 3 ) ; \\\"\\\")\" )\r\r] ;\r\r$json\r\r)",
      "List": "Let (\r~field = If ( not Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~field ) ; ~field ) ;\r\rTT.List.Custom ( 1 ; Get ( FoundCount ) ; \"Let ( ~field = \" & ~field & \" ; GetNthRecord ( ~field ; [n] ) )\" )\r\r)\r\r/*\rWhile ( \r[\r~last = Get ( FoundCount ) ;\r~result = \"\" ;\r~i = 1\r] ; \r\r~i <= ~last ; \r\r[ \r~result = List ( ~result ; GetNthRecord ( If ( Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetField ( ~field ) ; ~field ) ; ~i ) ) ;    \r~i = ~i + 1 \r] ; \r\r~result\r\r)\r\r*/",
      "Max": "Let (\r[\r~foundCount = Get ( FoundCount ) ;\r~field = If ( not Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~field ) ; ~field )\r] ;\r\rCase (\rnot ~foundCount ; \"\" ;\r~foundCount = 1 ; GetField ( ~field ) ;\r\rEvaluate ( \r\"Max (\" & \rSubstitute ( \rTT.List.Custom ( 1 ; Get ( FoundCount ) ; \"Let ( [ ~field = \" & ~field & \"; ~value = GetNthRecord ( ~field ; [n] ) ] ; If ( Filter ( ~value ; \\\"0123456789\\\" ) = ~value ; ~value ; Quote ( ~value ) )  )\" ) ;\r¶ ; \";\"\r) &\r\")\"\r)\r\r)\r\r)",
      "Min": "Let (\r[\r~foundCount = Get ( FoundCount ) ;\r~field = If ( not Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~field ) ; ~field )\r] ;\r\rCase (\rnot ~foundCount ; \"\" ;\r~foundCount = 1 ; GetField ( ~field ) ;\r\rEvaluate ( \r\"Min (\" & \rSubstitute ( \rTT.List.Custom ( 1 ; Get ( FoundCount ) ; \"Let ( [ ~field = \" & ~field & \"; ~value = GetNthRecord ( ~field ; [n] ) ] ; If ( Filter ( ~value ; \\\"0123456789\\\" ) = ~value ; ~value ; Quote ( ~value ) )  )\" ) ;\r¶ ; \";\"\r) &\r\")\"\r)\r\r)\r\r)",
      "Sum": "Let (\r[\r~foundCount = get ( foundcount ) ;\r~field = If ( not Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~field ) ; ~field )\r] ;\r\rCase (\rnot ~foundCount ; 0 ;\r~foundCount = 1 ; getfield ( ~field ) ;\r\rEvaluate ( \r\"Average (\" & \rSubstitute ( \rTT.List.Custom ( 1 ; Get ( FoundCount ) ; \"Let ( ~field = \" & ~field & \" ; GetNthRecord ( ~field ; [n] ) )\" ) ;\r¶ ; \";\"\r) &\r\")\"\r)\r\r)\r\r)",
      "isFirstRecord": "Get ( RecordNumber ) = 1",
      "isLastRecord": "Get ( RecordNumber ) = Get ( FoundCount )"
    },
    "Html": {
      "ColorPicker": {
        "Current": "Let (\r~colorField = If ( Position ( ~colorField ; \"::\" ; 1 ; 1 ) ; GetField ( ~colorField ) ; ~colorField ) ;\r\r\"data:text/html,\r<!DOCTYPE html>\r<html>\r  <body style='background-color: \" & ~colorField & \"'></body>\r</html>\r\"\r)",
        "Picker": "Let (\r[\r~colorField = If ( Position ( ~colorField ; \"::\" ; 1 ; 1 ) ; GetField ( ~colorField ) ; ~colorField ) ;\r~scriptName = TT.Fm.Database.Name_Id ( ~scriptId ; \"S\" ; \"\" )\r] ;\r\r\"data:text/html,\r<!DOCTYPE html>\r<html>\r  <head>\r    <script src='https://unpkg.com/vanilla-picker@2'></script>\r  </head>\r  <body>\r    <div style='width: 25px; height:25px; border: 1px solid black; background-color: \" & ~colorField & \"'\r      id='parent'> \r    </div>\r    <script>\r      var parent = document.querySelector('#parent');\r      var picker = new Picker({parent: parent, color: '\" & ~colorField & \"'});\r      picker.onChange = function (color) {\r        parent.style.background = color.rgbaString;\r      };\r      picker.onDone = function (color) {\r        FileMaker.PerformScript('\" & ~scriptName & \"', 'rgba(' + color.rgba.toString() + ')'  );\r      };\r\t  parent.click();\r\t</script>\r  </body>\r</html>\r\"\r)"
      },
      "Convert": {
        "List": "Let (\r~tag = If ( ~addNumbers ; \"ol\" ; \"ul\" ) ;\r\"<\" & ~tag & \"><li>\" & Substitute ( ~list ; ¶ ; \"</li><li>\" ) & \"</li></\" & ~tag & \">\"\r)",
        "Text": "Substitute ( GetAsCSS ( ~text ) ; \r[ \"<span\" ; \"<p\" ] ; \r[ \"</span>\" ; \"</p>\" ] ; \r[ \"<br/><br/>\" ; \"</p><p>\" ] ; \r[ \"<span\" ; \"<p\" ] \r)"
      },
      "Decode": "Let ( [\r\rBGN = Position ( ~text ; \"&\" ; 1 ; 1 ) ;\rBLCK = Middle ( ~text ; BGN ; 33 ) ;\rLNTH = Position ( BLCK ; \";\" ; 4 ; 1 ) ;\rENTT = Left ( BLCK ; LNTH ) ;\r\rEXCPTN = Substitute ( ENTT ;\r\r\t// A combining character cannot be extracted as a single one from the lookup table\r\t[ \"&DownBreve;\"\t; Char ( 785 ) ] ;\r\t[ \"&UnderBar;\"\t\t; Char ( 818 ) ] ;\r\t[ \"&tdot;\"\t\t\t; Char ( 8411 ) ] ;\r\t[ \"&TripleDot;\"\t\t; Char ( 8411 ) ] ;\r\t[ \"&DotDot;\"\t\t; Char ( 8412 ) ] ;\r\r\t// Calculation of the lookup table number does not distinguish these two entity names\r\t[ \"&nVdash;\"\t\t; \"⊮\" ] ;\r\t[ \"&nVDash;\"\t\t; \"⊯\" ]\r\r) ;\r\rFRMT = Case (\r\r\tnot BGN or not LNTH ; 0 ;\r\r\tLeft ( ENTT ; 2 ) = \"&#\" ; Case (\r\r\t\t// Check that the entity is a valid hexadecimal number\r\t\tLeft ( ENTT ; 3 ) = \"&#x\" ; If ( Middle ( ENTT ; 4 ; LNTH - 4 ) = Filter ( Upper ( Middle ( ENTT ; 4 ; LNTH - 4 ) ) ; \"0123456789ABCDEF\" ) ; 16 ) ;\r\r\t\t// Check that the entity is a valid decimal number\r\t\tMiddle ( ENTT ; 3 ; LNTH - 3 ) = Filter ( Middle ( ENTT ; 3 ; LNTH - 3 ) ; \"0123456789\" ) ; 10 ;\r\t) ;\r\r\tLength ( EXCPTN ) = 1 ; 9 ;\r\r\t// Check that the entity name is valid\r\tnot Exact ( Lower ( Middle ( ENTT ; 2 ; LNTH - 2 ) ) ; Filter ( Lower ( Middle ( ENTT ; 2 ; LNTH - 2 ) ) ; \"abcdefghijklmnopqrstuvwxyz12345678\" ) ) ; 0 ;\r\r\t// Calculate the number of lookup table by uppercase letters in the entity name\r\t1 + Exact ( Left ( ENTT ; 2 ) ; Upper ( Left ( ENTT ; 2 ) ) )\r\t+ 2 * not IsEmpty ( Filter ( Middle ( ENTT ; 3 ; LNTH - 4 ) ; Upper ( Middle ( ENTT ; 3 ; LNTH - 4 ) ) ) )\r\t+ 4 * Exact ( Right ( ENTT ; 2 ) ; Upper ( Right ( ENTT ; 2 ) ) )\r\r) ;\r\rTBL = Choose ( FRMT ; \"\" ;\r\r\t// 1 lll\r\t\"!&excl;\\\"&quot;#&num;$&dollar;%&percnt;&&amp;'&apos;(&lpar;)&rpar;*&ast;*&midast;+&plus;,&comma;.&period;/&sol;:&colon;;&semi;<&lt;=&equals;>&gt;?&quest;@&commat;[&lsqb;[&lbrack;\\&bsol;]&rsqb;]&rbrack;_&lowbar;`&grave;{&lcub;{&lbrace;|&verbar;|&vert;}&rcub;}&rbrace; &nbsp;¡&iexcl;¢&cent;£&pound;¤&curren;¥&yen;¦&brvbar;§&sect;¨&die;¨&uml;©&copy;ª&ordf;«&laquo;¬&not;­&shy;®&reg;¯&macr;¯&strns;°&deg;±&plusmn;±&pm;´&acute;µ&micro;\\¶&para;·&middot;·&centerdot;¸&cedil;º&ordm;»&raquo;½&half;¿&iquest;×&times;ß&szlig;à&agrave;á&aacute;â&acirc;ã&atilde;ä&auml;å&aring;æ&aelig;ç&ccedil;è&egrave;é&eacute;ê&ecirc;ë&euml;ì&igrave;í&iacute;î&icirc;ï&iuml;ð&eth;ñ&ntilde;ò&ograve;ó&oacute;ô&ocirc;õ&otilde;ö&ouml;÷&divide;÷&div;ø&oslash;ù&ugrave;ú&uacute;û&ucirc;ü&uuml;ý&yacute;þ&thorn;ÿ&yuml;ā&amacr;ă&abreve;ą&aogon;ć&cacute;ĉ&ccirc;ċ&cdot;č&ccaron;ď&dcaron;đ&dstrok;ē&emacr;ė&edot;ę&eogon;ě&ecaron;ĝ&gcirc;ğ&gbreve;ġ&gdot;ĥ&hcirc;ħ&hstrok;ĩ&itilde;ī&imacr;į&iogon;ı&imath;ı&inodot;ĳ&ijlig;ĵ&jcirc;ķ&kcedil;ĸ&kgreen;ĺ&lacute;ļ&lcedil;ľ&lcaron;ŀ&lmidot;ł&lstrok;ń&nacute;ņ&ncedil;ň&ncaron;ŉ&napos;ŋ&eng;ō&omacr;ő&odblac;œ&oelig;ŕ&racute;ŗ&rcedil;ř&rcaron;ś&sacute;ŝ&scirc;ş&scedil;š&scaron;ţ&tcedil;ť&tcaron;ŧ&tstrok;ũ&utilde;ū&umacr;ŭ&ubreve;ů&uring;ű&udblac;ų&uogon;ŵ&wcirc;ŷ&ycirc;ź&zacute;ż&zdot;ž&zcaron;ƒ&fnof;Ƶ&imped;ǵ&gacute;ȷ&jmath;ˆ&circ;ˇ&caron;˘&breve;˙&dot;˚&ring;˛&ogon;˜&tilde;˝&dblac;α&alpha;β&beta;γ&gamma;δ&delta;ε&epsi;ε&epsilon;ζ&zeta;η&eta;θ&theta;ι&iota;κ&kappa;λ&lambda;μ&mu;ν&nu;ξ&xi;ο&omicron;π&pi;ρ&rho;ς&sigmav;ς&varsigma;ς&sigmaf;σ&sigma;τ&tau;υ&upsi;υ&upsilon;φ&phi;χ&chi;ψ&psi;ω&omega;ϑ&thetav;ϑ&vartheta;ϑ&thetasym;ϒ&upsih;ϕ&straightphi;ϕ&phiv;ϕ&varphi;ϖ&piv;ϖ&varpi;ϝ&gammad;ϝ&digamma;ϰ&kappav;ϰ&varkappa;ϱ&rhov;ϱ&varrho;ϵ&epsiv;ϵ&varepsilon;ϵ&straightepsilon;϶&bepsi;϶&backepsilon;а&acy;б&bcy;в&vcy;г&gcy;д&dcy;е&iecy;ж&zhcy;з&zcy;и&icy;й&jcy;к&kcy;л&lcy;м&mcy;н&ncy;о&ocy;п&pcy;р&rcy;с&scy;т&tcy;у&ucy;ф&fcy;х&khcy;ц&tscy;ч&chcy;ш&shcy;щ&shchcy;ъ&hardcy;ы&ycy;ь&softcy;э&ecy;ю&yucy;я&yacy;ё&iocy;ђ&djcy;ѓ&gjcy;є&jukcy;ѕ&dscy;і&iukcy;ї&yicy;ј&jsercy;љ&ljcy;њ&njcy;ћ&tshcy;ќ&kjcy;ў&ubrcy;џ&dzcy; &ensp; &emsp; &numsp; &puncsp; &thinsp; &hairsp;‌&zwnj;‍&zwj;‎&lrm;‏&rlm;‐&hyphen;‐&dash;–&ndash;—&mdash;―&horbar;‘&lsquo;’&rsquo;’&rsquor;‚&lsquor;‚&sbquo;\\“&ldquo;\\”&rdquo;\\”&rdquor;\\„&ldquor;\\„&bdquo;†&dagger;‡&ddagger;•&bull;•&bullet;‥&nldr;…&hellip;…&mldr;‰&permil;‱&pertenk;′&prime;‴&tprime;‵&bprime;‵&backprime;‹&lsaquo;›&rsaquo;‾&oline;⁁&caret;⁃&hybull;⁄&frasl;⁏&bsemi;⁗&qprime;⁡&af;⁢&it;⁣&ic;€&euro;ℂ&complexes;℅&incare;ℊ&gscr;ℋ&hamilt;ℍ&quaternions;ℎ&planckh;ℏ&planck;ℏ&hbar;ℏ&plankv;ℏ&hslash;ℐ&imagline;ℑ&image;ℑ&imagpart;ℒ&lagran;ℓ&ell;ℕ&naturals;№&numero;℗&copysr;℘&weierp;℘&wp;ℙ&primes;ℚ&rationals;ℛ&realine;ℜ&real;ℜ&realpart;ℝ&reals;℞&rx;™&trade;ℤ&integers;\"&Char(8486)&\"&ohm;℧&mho;ℨ&zeetrf;℩&iiota;\"&Char(8491)&\"&angst;ℬ&bernou;ℯ&escr;ℰ&expectation;ℳ&phmmat;ℴ&order;ℴ&orderof;ℴ&oscr;ℵ&alefsym;ℵ&aleph;ℶ&beth;ℷ&gimel;ℸ&daleth;ⅆ&dd;ⅇ&exponentiale;ⅇ&ee;ⅈ&ii;←&larr;←&leftarrow;←&slarr;↑&uarr;↑&uparrow;→&rarr;→&rightarrow;→&srarr;↓&darr;↓&downarrow;↔&harr;↔&leftrightarrow;↕&varr;↕&updownarrow;↖&nwarr;↖&nwarrow;↗&nearr;↗&nearrow;↘&searr;↘&searrow;↙&swarr;↙&swarrow;↚&nlarr;↚&nleftarrow;↛&nrarr;↛&nrightarrow;↝&rarrw;↝&rightsquigarrow;↞&twoheadleftarrow;↠&twoheadrightarrow;↢&larrtl;↢&leftarrowtail;↣&rarrtl;↣&rightarrowtail;↤&mapstoleft;↥&mapstoup;↦&map;↦&mapsto;↧&mapstodown;↩&larrhk;↩&hookleftarrow;↪&rarrhk;↪&hookrightarrow;↫&larrlp;↫&looparrowleft;↬&rarrlp;↬&looparrowright;↭&harrw;↭&leftrightsquigarrow;↮&nharr;↮&nleftrightarrow;↰&lsh;↱&rsh;↲&ldsh;↳&rdsh;↵&crarr;↶&cularr;↶&curvearrowleft;↷&curarr;↷&curvearrowright;↺&olarr;↺&circlearrowleft;↻&orarr;↻&circlearrowright;↼&lharu;↼&leftharpoonup;↽&lhard;↽&leftharpoondown;↾&uharr;↾&upharpoonright;↿&uharl;↿&upharpoonleft;⇀&rharu;⇀&rightharpoonup;⇁&rhard;⇁&rightharpoondown;⇂&dharr;⇂&downharpoonright;⇃&dharl;⇃&downharpoonleft;⇄&rlarr;⇄&rightleftarrows;⇅&udarr;⇆&lrarr;⇆&leftrightarrows;⇇&llarr;⇇&leftleftarrows;⇈&uuarr;⇈&upuparrows;⇉&rrarr;⇉&rightrightarrows;⇊&ddarr;⇊&downdownarrows;⇋&lrhar;⇋&leftrightharpoons;⇌&rlhar;⇌&rightleftharpoons;⇔&iff;⇝&zigrarr;⇤&larrb;⇥&rarrb;⇵&duarr;⇽&loarr;⇾&roarr;⇿&hoarr;∀&forall;∁&comp;∁&complement;∂&part;∃&exist;∄&nexist;∄&nexists;∅&empty;∅&emptyset;∅&emptyv;∅&varnothing;∇&nabla;∈&isin;∈&isinv;∈&in;∉&notin;∉&notinva;∋&niv;∋&ni;∌&notni;∌&notniva;∏&prod;∐&coprod;∑&sum;−&minus;∓&mnplus;∓&mp;∔&plusdo;∔&dotplus;∖&setmn;∖&setminus;∖&ssetmn;∖&smallsetminus;∗&lowast;∘&compfn;√&radic;∝&prop;∝&propto;∝&vprop;∝&varpropto;∞&infin;∟&angrt;∠&ang;∠&angle;∡&angmsd;∡&measuredangle;∢&angsph;∣&mid;∣&smid;∣&shortmid;∤&nmid;∤&nsmid;∤&nshortmid;∥&par;∥&parallel;∥&spar;∥&shortparallel;∦&npar;∦&nparallel;∦&nspar;∦&nshortparallel;∧&and;∧&wedge;∨&or;∨&vee;∩&cap;∪&cup;∫&int;∭&tint;∭&iiint;∮&conint;∮&oint;∱&cwint;∲&cwconint;∳&awconint;∴&therefore;∵&becaus;∵&because;∶&ratio;∸&minusd;∸&dotminus;∻&homtht;∼&sim;∼&thksim;∼&thicksim;∽&bsim;∽&backsim;∾&ac;∾&mstpos;∿&acd;≀&wreath;≀&wr;≁&nsim;≂&esim;≂&eqsim;≃&sime;≃&simeq;≄&nsime;≄&nsimeq;≅&cong;≆&simne;≇&ncong;≈&asymp;≈&ap;≈&approx;≈&thkap;≈&thickapprox;≉&nap;≉&napprox;≊&ape;≊&approxeq;≋&apid;≌&bcong;≌&backcong;≍&asympeq;≎&bump;≏&bumpe;≏&bumpeq;≐&esdot;≐&doteq;≑&doteqdot;≒&fallingdotseq;≓&risingdotseq;≔&colone;≔&coloneq;≕&ecolon;≕&eqcolon;≖&ecir;≖&eqcirc;≗&cire;≗&circeq;≙&wedgeq;≚&veeeq;≜&trie;≜&triangleq;≟&equest;≟&questeq;≠&ne;≡&equiv;≢&nequiv;≤&le;≤&leq;≥&ge;≥&geq;≦&leqq;≧&geqq;≨&lneqq;≩&gneqq;≪&ll;≫&gg;≬&twixt;≬&between;≮&nlt;≮&nless;≯&ngt;≯&ngtr;≰&nle;≰&nleq;≱&nge;≱&ngeq;≲&lsim;≲&lesssim;≳&gsim;≳&gtrsim;≴&nlsim;≵&ngsim;≶&lg;≶&lessgtr;≷&gl;≷&gtrless;≸&ntlg;≹&ntgl;≺&pr;≺&prec;≻&sc;≻&succ;≼&prcue;≼&preccurlyeq;≽&sccue;≽&succcurlyeq;≾&prsim;≾&precsim;≿&scsim;≿&succsim;⊀&npr;⊀&nprec;⊁&nsc;⊁&nsucc;⊂&sub;⊂&subset;⊃&sup;⊃&supset;⊄&nsub;⊅&nsup;⊆&sube;⊆&subseteq;⊇&supe;⊇&supseteq;⊈&nsube;⊈&nsubseteq;⊉&nsupe;⊉&nsupseteq;⊊&subne;⊊&subsetneq;⊋&supne;⊋&supsetneq;⊍&cupdot;⊎&uplus;⊏&sqsub;⊏&sqsubset;⊐&sqsup;⊐&sqsupset;⊑&sqsube;⊑&sqsubseteq;⊒&sqsupe;⊒&sqsupseteq;⊓&sqcap;⊔&sqcup;⊕&oplus;⊖&ominus;⊗&otimes;⊘&osol;⊙&odot;⊚&ocir;⊚&circledcirc;⊛&oast;⊛&circledast;⊝&odash;⊝&circleddash;⊞&plusb;⊞&boxplus;⊟&minusb;⊟&boxminus;⊠&timesb;⊠&boxtimes;⊡&sdotb;⊡&dotsquare;⊢&vdash;⊣&dashv;⊤&top;⊥&bottom;⊥&bot;⊥&perp;⊧&models;⊬&nvdash;⊰&prurel;⊲&vltri;⊲&vartriangleleft;⊳&vrtri;⊳&vartriangleright;⊴&ltrie;⊴&trianglelefteq;⊵&rtrie;⊵&trianglerighteq;⊶&origof;⊷&imof;⊸&mumap;⊸&multimap;⊹&hercon;⊺&intcal;⊺&intercal;⊻&veebar;⊽&barvee;⊾&angrtvb;⊿&lrtri;⋀&xwedge;⋀&bigwedge;⋁&xvee;⋁&bigvee;⋂&xcap;⋂&bigcap;⋃&xcup;⋃&bigcup;⋄&diam;⋄&diamond;⋅&sdot;⋆&sstarf;⋇&divonx;⋇&divideontimes;⋈&bowtie;⋉&ltimes;⋊&rtimes;⋋&lthree;⋋&leftthreetimes;⋌&rthree;⋌&rightthreetimes;⋍&bsime;⋍&backsimeq;⋎&cuvee;⋎&curlyvee;⋏&cuwed;⋏&curlywedge;⋔&fork;⋔&pitchfork;⋕&epar;⋖&ltdot;⋖&lessdot;⋗&gtdot;⋗&gtrdot;⋙&ggg;⋚&leg;⋚&lesseqgtr;⋛&gel;⋛&gtreqless;⋞&cuepr;⋞&curlyeqprec;⋟&cuesc;⋟&curlyeqsucc;⋠&nprcue;⋡&nsccue;⋢&nsqsube;⋣&nsqsupe;⋦&lnsim;⋧&gnsim;⋨&prnsim;⋨&precnsim;⋩&scnsim;⋩&succnsim;⋪&nltri;⋪&ntriangleleft;⋫&nrtri;⋫&ntriangleright;⋬&nltrie;⋬&ntrianglelefteq;⋭&nrtrie;⋭&ntrianglerighteq;⋮&vellip;⋯&ctdot;⋰&utdot;⋱&dtdot;⋲&disin;⋳&isinsv;⋴&isins;⋵&isindot;⋶&notinvc;⋷&notinvb;⋺&nisd;⋻&xnis;⋼&nis;⋽&notnivc;⋾&notnivb;⌅&barwed;⌅&barwedge;⌆&doublebarwedge;⌈&lceil;⌉&rceil;⌊&lfloor;⌋&rfloor;⌌&drcrop;⌍&dlcrop;⌎&urcrop;⌏&ulcrop;⌐&bnot;⌒&profline;⌓&profsurf;⌕&telrec;⌖&target;⌜&ulcorn;⌜&ulcorner;⌝&urcorn;⌝&urcorner;⌞&dlcorn;⌞&llcorner;⌟&drcorn;⌟&lrcorner;⌢&frown;⌢&sfrown;⌣&smile;⌣&ssmile;⌭&cylcty;⌮&profalar;⌶&topbot;⌽&ovbar;⌿&solbar;⍼&angzarr;⎰&lmoust;⎰&lmoustache;⎱&rmoust;⎱&rmoustache;⎴&tbrk;⎵&bbrk;⎶&bbrktbrk;⏢&trpezium;⏧&elinters;␣&blank;─&boxh;│&boxv;┌&boxdr;┐&boxdl;└&boxur;┘&boxul;├&boxvr;┤&boxvl;┬&boxhd;┴&boxhu;┼&boxvh;▀&uhblk;▄&lhblk;█&block;□&squ;□&square;▪&squf;▪&squarf;▪&blacksquare;▭&rect;▮&marker;▱&fltns;△&xutri;△&bigtriangleup;▴&utrif;▴&blacktriangle;▵&utri;▵&triangle;▸&rtrif;▸&blacktriangleright;▹&rtri;▹&triangleright;▽&xdtri;▽&bigtriangledown;▾&dtrif;▾&blacktriangledown;▿&dtri;▿&triangledown;◂&ltrif;◂&blacktriangleleft;◃&ltri;◃&triangleleft;◊&loz;◊&lozenge;○&cir;◬&tridot;◯&xcirc;◯&bigcirc;◸&ultri;◹&urtri;◺&lltri;★&starf;★&bigstar;☆&star;☎&phone;♀&female;♂&male;♠&spades;♠&spadesuit;♣&clubs;♣&clubsuit;♥&hearts;♥&heartsuit;♦&diams;♦&diamondsuit;♪&sung;♭&flat;♮&natur;♮&natural;♯&sharp;✓&check;✓&checkmark;✗&cross;✠&malt;✠&maltese;✶&sext;❲&lbbrk;❳&rbbrk;⟦&lobrk;⟧&robrk;⟨&lang;⟨&langle;⟩&rang;⟩&rangle;⟬&loang;⟭&roang;⟵&xlarr;⟵&longleftarrow;⟶&xrarr;⟶&longrightarrow;⟷&xharr;⟷&longleftrightarrow;⟼&xmap;⟼&longmapsto;⟿&dzigrarr;⤌&lbarr;⤍&rbarr;⤍&bkarow;⤏&dbkarow;⤐&drbkarow;⤙&latail;⤚&ratail;⤝&larrfs;⤞&rarrfs;⤟&larrbfs;⤠&rarrbfs;⤣&nwarhk;⤤&nearhk;⤥&searhk;⤥&hksearow;⤦&swarhk;⤦&hkswarow;⤧&nwnear;⤨&nesear;⤨&toea;⤩&seswar;⤩&tosa;⤪&swnwar;⤳&rarrc;⤵&cudarrr;⤶&ldca;⤷&rdca;⤸&cudarrl;⤹&larrpl;⤼&curarrm;⤽&cularrp;⥅&rarrpl;⥈&harrcir;⥊&lurdshar;⥋&ldrushar;⥦&luruhar;⥧&ldrdhar;⥨&ruluhar;⥩&rdldhar;⥪&lharul;⥫&llhard;⥬&rharul;⥭&lrhard;⥮&udhar;⥯&duhar;⥱&erarr;⥲&simrarr;⥳&larrsim;⥴&rarrsim;⥵&rarrap;⥶&ltlarr;⥸&gtrarr;⥹&subrarr;⥻&suplarr;⥼&lfisht;⥽&rfisht;⥾&ufisht;⥿&dfisht;⦅&lopar;⦆&ropar;⦋&lbrke;⦌&rbrke;⦍&lbrkslu;⦎&rbrksld;⦏&lbrksld;⦐&rbrkslu;⦑&langd;⦒&rangd;⦓&lparlt;⦔&rpargt;⦚&vzigzag;⦜&vangrt;⦝&angrtvbd;⦤&ange;⦥&range;⦦&dwangle;⦧&uwangle;⦨&angmsdaa;⦩&angmsdab;⦪&angmsdac;⦫&angmsdad;⦬&angmsdae;⦭&angmsdaf;⦮&angmsdag;⦯&angmsdah;⦰&bemptyv;⦱&demptyv;⦲&cemptyv;⦳&raemptyv;⦴&laemptyv;⦵&ohbar;⦶&omid;⦷&opar;⦹&operp;⦻&olcross;⦼&odsold;⦾&olcir;⦿&ofcir;⧀&olt;⧁&ogt;⧂&cirscir;⧄&solb;⧅&bsolb;⧉&boxbox;⧍&trisb;⧎&rtriltri;⧚&race;⧜&iinfin;⧝&infintie;⧞&nvinfin;⧣&eparsl;⧤&smeparsl;⧥&eqvparsl;⧫&lozf;⧫&blacklozenge;⧶&dsol;⨀&xodot;⨀&bigodot;⨁&xoplus;⨁&bigoplus;⨂&xotime;⨂&bigotimes;⨄&xuplus;⨄&biguplus;⨆&xsqcup;⨆&bigsqcup;⨌&qint;⨌&iiiint;⨍&fpartint;⨐&cirfnint;⨑&awint;⨒&rppolint;⨓&scpolint;⨔&npolint;⨕&pointint;⨖&quatint;⨗&intlarhk;⨢&pluscir;⨣&plusacir;⨤&simplus;⨥&plusdu;⨦&plussim;⨧&plustwo;⨩&mcomma;⨪&minusdu;⨭&loplus;⨮&roplus;⨰&timesd;⨱&timesbar;⨳&smashp;⨴&lotimes;⨵&rotimes;⨶&otimesas;⨸&odiv;⨹&triplus;⨺&triminus;⨻&tritime;⨼&iprod;⨼&intprod;⨿&amalg;⩀&capdot;⩂&ncup;⩃&ncap;⩄&capand;⩅&cupor;⩆&cupcap;⩇&capcup;⩈&cupbrcap;⩉&capbrcup;⩊&cupcup;⩋&capcap;⩌&ccups;⩍&ccaps;⩐&ccupssm;⩕&andand;⩖&oror;⩗&orslope;⩘&andslope;⩚&andv;⩛&orv;⩜&andd;⩝&ord;⩟&wedbar;⩦&sdote;⩪&simdot;⩭&congdot;⩮&easter;⩯&apacir;⩱&eplus;⩲&pluse;⩷&ddotseq;⩹&ltcir;⩺&gtcir;⩻&ltquest;⩼&gtquest;⩽&les;⩽&leqslant;⩾&ges;⩾&geqslant;⩿&lesdot;⪀&gesdot;⪁&lesdoto;⪂&gesdoto;⪃&lesdotor;⪄&gesdotol;⪅&lap;⪅&lessapprox;⪆&gap;⪆&gtrapprox;⪇&lne;⪇&lneq;⪈&gne;⪈&gneq;⪉&lnap;⪉&lnapprox;⪊&gnap;⪊&gnapprox;⪋&lesseqqgtr;⪌&gtreqqless;⪍&lsime;⪎&gsime;⪏&lsimg;⪐&gsiml;⪓&lesges;⪔&gesles;⪕&els;⪕&eqslantless;⪖&egs;⪖&eqslantgtr;⪗&elsdot;⪘&egsdot;⪙&el;⪚&eg;⪝&siml;⪞&simg;⪤&glj;⪥&gla;⪦&ltcc;⪧&gtcc;⪨&lescc;⪩&gescc;⪪&smt;⪫&lat;⪬&smte;⪭&late;⪯&pre;⪯&preceq;⪰&sce;⪰&succeq;⪵&precneqq;⪶&succneqq;⪷&prap;⪷&precapprox;⪸&scap;⪸&succapprox;⪹&prnap;⪹&precnapprox;⪺&scnap;⪺&succnapprox;⪽&subdot;⪾&supdot;⪿&subplus;⫀&supplus;⫁&submult;⫂&supmult;⫃&subedot;⫄&supedot;⫅&subseteqq;⫆&supseteqq;⫇&subsim;⫈&supsim;⫋&subsetneqq;⫌&supsetneqq;⫏&csub;⫐&csup;⫑&csube;⫒&csupe;⫓&subsup;⫔&supsub;⫕&subsub;⫖&supsup;⫗&suphsub;⫘&supdsub;⫙&forkv;⫚&topfork;⫛&mlcp;⫮&rnmid;⫯&cirmid;⫰&midcir;⫱&topcir;⫲&nhpar;⫳&parsim;⫽&parsl;ﬀ&fflig;ﬁ&filig;ﬂ&fllig;ﬃ&ffilig;ﬄ&ffllig;𝒶&ascr;𝒷&bscr;𝒸&cscr;𝒹&dscr;𝒻&fscr;𝒽&hscr;𝒾&iscr;𝒿&jscr;𝓀&kscr;𝓁&lscr;𝓂&mscr;𝓃&nscr;𝓅&pscr;𝓆&qscr;𝓇&rscr;𝓈&sscr;𝓉&tscr;𝓊&uscr;𝓋&vscr;𝓌&wscr;𝓍&xscr;𝓎&yscr;𝓏&zscr;𝔞&afr;𝔟&bfr;𝔠&cfr;𝔡&dfr;𝔢&efr;𝔣&ffr;𝔤&gfr;𝔥&hfr;𝔦&ifr;𝔧&jfr;𝔨&kfr;𝔩&lfr;𝔪&mfr;𝔫&nfr;𝔬&ofr;𝔭&pfr;𝔮&qfr;𝔯&rfr;𝔰&sfr;𝔱&tfr;𝔲&ufr;𝔳&vfr;𝔴&wfr;𝔵&xfr;𝔶&yfr;𝔷&zfr;𝕒&aopf;𝕓&bopf;𝕔&copf;𝕕&dopf;𝕖&eopf;𝕗&fopf;𝕘&gopf;𝕙&hopf;𝕚&iopf;𝕛&jopf;𝕜&kopf;𝕝&lopf;𝕞&mopf;𝕟&nopf;𝕠&oopf;𝕡&popf;𝕢&qopf;𝕣&ropf;𝕤&sopf;𝕥&topf;𝕦&uopf;𝕧&vopf;𝕨&wopf;𝕩&xopf;𝕪&yopf;𝕫&zopf;\" ;\r\r\t// 2 Ull\r\t\"\t&Tab;^&Hat;¨&Dot;¸&Cedilla;À&Agrave;Á&Aacute;Â&Acirc;Ã&Atilde;Ä&Auml;Å&Aring;Ç&Ccedil;È&Egrave;É&Eacute;Ê&Ecirc;Ë&Euml;Ì&Igrave;Í&Iacute;Î&Icirc;Ï&Iuml;Ñ&Ntilde;Ò&Ograve;Ó&Oacute;Ô&Ocirc;Õ&Otilde;Ö&Ouml;Ø&Oslash;Ù&Ugrave;Ú&Uacute;Û&Ucirc;Ü&Uuml;Ý&Yacute;Ā&Amacr;Ă&Abreve;Ą&Aogon;Ć&Cacute;Ĉ&Ccirc;Ċ&Cdot;Č&Ccaron;Ď&Dcaron;Đ&Dstrok;Ē&Emacr;Ė&Edot;Ę&Eogon;Ě&Ecaron;Ĝ&Gcirc;Ğ&Gbreve;Ġ&Gdot;Ģ&Gcedil;Ĥ&Hcirc;Ħ&Hstrok;Ĩ&Itilde;Ī&Imacr;Į&Iogon;İ&Idot;Ĵ&Jcirc;Ķ&Kcedil;Ĺ&Lacute;Ļ&Lcedil;Ľ&Lcaron;Ŀ&Lmidot;Ł&Lstrok;Ń&Nacute;Ņ&Ncedil;Ň&Ncaron;Ō&Omacr;Ő&Odblac;Ŕ&Racute;Ŗ&Rcedil;Ř&Rcaron;Ś&Sacute;Ŝ&Scirc;Ş&Scedil;Š&Scaron;Ţ&Tcedil;Ť&Tcaron;Ŧ&Tstrok;Ũ&Utilde;Ū&Umacr;Ŭ&Ubreve;Ů&Uring;Ű&Udblac;Ų&Uogon;Ŵ&Wcirc;Ŷ&Ycirc;Ÿ&Yuml;Ź&Zacute;Ż&Zdot;Ž&Zcaron;ˇ&Hacek;˘&Breve;Α&Alpha;Β&Beta;Γ&Gamma;Δ&Delta;Ε&Epsilon;Ζ&Zeta;Η&Eta;Θ&Theta;Ι&Iota;Κ&Kappa;Λ&Lambda;Μ&Mu;Ν&Nu;Ξ&Xi;Ο&Omicron;Π&Pi;Ρ&Rho;Σ&Sigma;Τ&Tau;Υ&Upsilon;Φ&Phi;Χ&Chi;Ψ&Psi;Ω&Omega;ϒ&Upsi;Ϝ&Gammad;Є&Jukcy;І&Iukcy;Ј&Jsercy;Ў&Ubrcy;А&Acy;Б&Bcy;В&Vcy;Г&Gcy;Д&Dcy;З&Zcy;И&Icy;Й&Jcy;К&Kcy;Л&Lcy;М&Mcy;Н&Ncy;О&Ocy;П&Pcy;Р&Rcy;С&Scy;Т&Tcy;У&Ucy;Ф&Fcy;Ы&Ycy;Э&Ecy;‖&Verbar;‖&Vert;‡&Dagger;″&Prime;ℂ&Copf;ℋ&Hscr;ℌ&Hfr;ℌ&Poincareplane;ℍ&Hopf;ℐ&Iscr;ℑ&Im;ℑ&Ifr;ℒ&Lscr;ℒ&Laplacetrf;ℕ&Nopf;ℙ&Popf;ℚ&Qopf;ℛ&Rscr;ℜ&Re;ℜ&Rfr;ℝ&Ropf;ℤ&Zopf;ℨ&Zfr;ℬ&Bernoullis;ℬ&Bscr;ℭ&Cfr;ℭ&Cayleys;ℰ&Escr;ℱ&Fscr;ℱ&Fouriertrf;ℳ&Mellintrf;ℳ&Mscr;↞&Larr;↟&Uarr;↠&Rarr;↡&Darr;↰&Lsh;↱&Rsh;⇌&Equilibrium;⇐&Leftarrow;⇑&Uparrow;⇒&Rightarrow;⇒&Implies;⇓&Downarrow;⇔&Leftrightarrow;⇕&Updownarrow;⇚&Lleftarrow;⇛&Rrightarrow;∃&Exists;∇&Del;∈&Element;∏&Product;∐&Coproduct;∑&Sum;∖&Backslash;√&Sqrt;∝&Proportional;∫&Integral;∬&Int;∯&Conint;∰&Cconint;∴&Therefore;∵&Because;∷&Colon;∷&Proportion;∼&Tilde;≎&Bumpeq;≔&Assign;≡&Congruent;≪&Lt;≫&Gt;≺&Precedes;≻&Succeeds;⊃&Superset;⊩&Vdash;⊪&Vvdash;⋀&Wedge;⋁&Vee;⋂&Intersection;⋃&Union;⋄&Diamond;⋆&Star;⋐&Sub;⋐&Subset;⋑&Sup;⋑&Supset;⋒&Cap;⋓&Cup;⋘&Ll;⋙&Gg;⌆&Barwed;□&Square;⟪&Lang;⟫&Rang;⟸&Longleftarrow;⟹&Longrightarrow;⟺&Longleftrightarrow;⤅&Map;⤖&Rarrtl;⥉&Uarrocir;⨯&Cross;⨷&Otimes;⩓&And;⩔&Or;⩳&Esim;⩴&Colone;⩵&Equal;⪻&Pr;⪼&Sc;⫤&Dashv;⫦&Vdashl;⫧&Barv;⫫&Vbar;⫬&Not;𝒜&Ascr;𝒞&Cscr;𝒟&Dscr;𝒢&Gscr;𝒥&Jscr;𝒦&Kscr;𝒩&Nscr;𝒪&Oscr;𝒫&Pscr;𝒬&Qscr;𝒮&Sscr;𝒯&Tscr;𝒰&Uscr;𝒱&Vscr;𝒲&Wscr;𝒳&Xscr;𝒴&Yscr;𝒵&Zscr;𝔄&Afr;𝔅&Bfr;𝔇&Dfr;𝔈&Efr;𝔉&Ffr;𝔊&Gfr;𝔍&Jfr;𝔎&Kfr;𝔏&Lfr;𝔐&Mfr;𝔑&Nfr;𝔒&Ofr;𝔓&Pfr;𝔔&Qfr;𝔖&Sfr;𝔗&Tfr;𝔘&Ufr;𝔙&Vfr;𝔚&Wfr;𝔛&Xfr;𝔜&Yfr;𝔸&Aopf;𝔹&Bopf;𝔻&Dopf;𝔼&Eopf;𝔽&Fopf;𝔾&Gopf;𝕀&Iopf;𝕁&Jopf;𝕂&Kopf;𝕃&Lopf;𝕄&Mopf;𝕆&Oopf;𝕊&Sopf;𝕋&Topf;𝕌&Uopf;𝕍&Vopf;𝕎&Wopf;𝕏&Xopf;𝕐&Yopf;\" ;\r\r\t// 3 lUl\r\t\"⇍&nlArr;⇍&nLeftarrow;⇎&nhArr;⇎&nLeftrightarrow;⇏&nrArr;⇏&nRightarrow;⇐&lArr;⇑&uArr;⇒&rArr;⇓&dArr;⇔&hArr;⇕&vArr;⇖&nwArr;⇗&neArr;⇘&seArr;⇙&swArr;⇚&lAarr;⇛&rAarr;∺&mDDot;≑&eDot;≒&efDot;≓&erDot;⊨&vDash;⊭&nvDash;╓&boxDr;╖&boxDl;╙&boxUr;╜&boxUl;╟&boxVr;╢&boxVl;╤&boxHd;╧&boxHu;╫&boxVh;⟸&xlArr;⟹&xrArr;⟺&xhArr;⤂&nvlArr;⤃&nvrArr;⤄&nvHarr;⤎&lBarr;⤏&rBarr;⤛&lAtail;⤜&rAtail;⥢&lHar;⥣&uHar;⥤&rHar;⥥&dHar;⦕&gtlPar;⦖&ltrPar;⩷&eDDot;⪋&lEg;⪌&gEl;⫨&vBar;⫩&vBarv;⫭&bNot;\" ;\r\r\t// 4 UUl\r\t\"¶&NewLine;`&DiacriticalGrave;|&VerticalLine; &NonBreakingSpace;¨&DoubleDot;±&PlusMinus;´&DiacriticalAcute;·&CenterDot;Æ&AElig;Ĳ&IJlig;Œ&OElig;˙&DiacriticalDot;˜&DiacriticalTilde;˝&DiacriticalDoubleAcute;Ё&IOcy;Ђ&DJcy;Ѓ&GJcy;Ѕ&DScy;Ї&YIcy;Љ&LJcy;Њ&NJcy;Ћ&TSHcy;Ќ&KJcy;Џ&DZcy;Е&IEcy;Ж&ZHcy;Х&KHcy;Ц&TScy;Ч&CHcy;Ш&SHcy;Щ&SHCHcy;Ъ&HARDcy;Ь&SOFTcy;Ю&YUcy;Я&YAcy; &ThinSpace; &VeryThinSpace;​&ZeroWidthSpace;​&NegativeVeryThinSpace;​&NegativeThinSpace;​&NegativeMediumSpace;​&NegativeThickSpace;‘&OpenCurlyQuote;’&CloseCurlyQuote;\\“&OpenCurlyDoubleQuote;\\”&CloseCurlyDoubleQuote;‾&OverBar; &MediumSpace;⁠&NoBreak;⁡&ApplyFunction;⁢&InvisibleTimes;⁣&InvisibleComma;ℋ&HilbertSpace;←&LeftArrow;←&ShortLeftArrow;↑&UpArrow;↑&ShortUpArrow;→&RightArrow;→&ShortRightArrow;↓&DownArrow;↓&ShortDownArrow;↔&LeftRightArrow;↕&UpDownArrow;↖&UpperLeftArrow;↗&UpperRightArrow;↘&LowerRightArrow;↙&LowerLeftArrow;↤&LeftTeeArrow;↥&UpTeeArrow;↦&RightTeeArrow;↧&DownTeeArrow;↼&LeftVector;↽&DownLeftVector;↾&RightUpVector;↿&LeftUpVector;⇀&RightVector;⇁&DownRightVector;⇂&RightDownVector;⇃&LeftDownVector;⇄&RightArrowLeftArrow;⇅&UpArrowDownArrow;⇆&LeftArrowRightArrow;⇋&ReverseEquilibrium;⇐&DoubleLeftArrow;⇑&DoubleUpArrow;⇒&DoubleRightArrow;⇓&DoubleDownArrow;⇔&DoubleLeftRightArrow;⇕&DoubleUpDownArrow;⇤&LeftArrowBar;⇥&RightArrowBar;⇵&DownArrowUpArrow;∀&ForAll;∄&NotExists;∉&NotElement;∋&ReverseElement;∋&SuchThat;∌&NotReverseElement;∓&MinusPlus;∘&SmallCircle;∣&VerticalBar;∤&NotVerticalBar;∥&DoubleVerticalBar;∦&NotDoubleVerticalBar;∮&ContourIntegral;∯&DoubleContourIntegral;∲&ClockwiseContourIntegral;∳&CounterClockwiseContourIntegral;≀&VerticalTilde;≁&NotTilde;≂&EqualTilde;≃&TildeEqual;≄&NotTildeEqual;≅&TildeFullEqual;≇&NotTildeFullEqual;≈&TildeTilde;≉&NotTildeTilde;≍&CupCap;≎&HumpDownHump;≏&HumpEqual;≐&DotEqual;≠&NotEqual;≢&NotCongruent;≥&GreaterEqual;≦&LessFullEqual;≧&GreaterFullEqual;≪&NestedLessLess;≫&NestedGreaterGreater;≭&NotCupCap;≮&NotLess;≯&NotGreater;≰&NotLessEqual;≱&NotGreaterEqual;≲&LessTilde;≳&GreaterTilde;≴&NotLessTilde;≵&NotGreaterTilde;≶&LessGreater;≷&GreaterLess;≸&NotLessGreater;≹&NotGreaterLess;≼&PrecedesSlantEqual;≽&SucceedsSlantEqual;≾&PrecedesTilde;≿&SucceedsTilde;⊀&NotPrecedes;⊁&NotSucceeds;⊆&SubsetEqual;⊇&SupersetEqual;⊈&NotSubsetEqual;⊉&NotSupersetEqual;⊎&UnionPlus;⊏&SquareSubset;⊐&SquareSuperset;⊑&SquareSubsetEqual;⊒&SquareSupersetEqual;⊓&SquareIntersection;⊔&SquareUnion;⊕&CirclePlus;⊖&CircleMinus;⊗&CircleTimes;⊙&CircleDot;⊢&RightTee;⊣&LeftTee;⊤&DownTee;⊥&UpTee;⊨&DoubleRightTee;⊫&VDash;⊲&LeftTriangle;⊳&RightTriangle;⊴&LeftTriangleEqual;⊵&RightTriangleEqual;⋚&LessEqualGreater;⋛&GreaterEqualLess;⋠&NotPrecedesSlantEqual;⋡&NotSucceedsSlantEqual;⋢&NotSquareSubsetEqual;⋣&NotSquareSupersetEqual;⋪&NotLeftTriangle;⋫&NotRightTriangle;⋬&NotLeftTriangleEqual;⋭&NotRightTriangleEqual;⌈&LeftCeiling;⌉&RightCeiling;⌊&LeftFloor;⌋&RightFloor;⎴&OverBracket;⎵&UnderBracket;⏜&OverParenthesis;⏝&UnderParenthesis;⏞&OverBrace;⏟&UnderBrace;─&HorizontalLine;▪&FilledVerySmallSquare;▫&EmptyVerySmallSquare;◻&EmptySmallSquare;◼&FilledSmallSquare;❘&VerticalSeparator;⟦&LeftDoubleBracket;⟧&RightDoubleBracket;⟨&LeftAngleBracket;⟩&RightAngleBracket;⟵&LongLeftArrow;⟶&LongRightArrow;⟷&LongLeftRightArrow;⟸&DoubleLongLeftArrow;⟹&DoubleLongRightArrow;⟺&DoubleLongLeftRightArrow;⤐&RBarr;⤑&DDotrahd;⤒&UpArrowBar;⤓&DownArrowBar;⥎&LeftRightVector;⥏&RightUpDownVector;⥐&DownLeftRightVector;⥑&LeftUpDownVector;⥒&LeftVectorBar;⥓&RightVectorBar;⥔&RightUpVectorBar;⥕&RightDownVectorBar;⥖&DownLeftVectorBar;⥗&DownRightVectorBar;⥘&LeftUpVectorBar;⥙&LeftDownVectorBar;⥚&LeftTeeVector;⥛&RightTeeVector;⥜&RightUpTeeVector;⥝&RightDownTeeVector;⥞&DownLeftTeeVector;⥟&DownRightTeeVector;⥠&LeftUpTeeVector;⥡&LeftDownTeeVector;⥮&UpEquilibrium;⥯&ReverseUpEquilibrium;⥰&RoundImplies;⧏&LeftTriangleBar;⧐&RightTriangleBar;⧴&RuleDelayed;⩽&LessSlantEqual;⩾&GreaterSlantEqual;⪡&LessLess;⪢&GreaterGreater;⪯&PrecedesEqual;⪰&SucceedsEqual;⫤&DoubleLeftTee;\" ;\r\r\t// 5 llU\r\t\"®&circledR;²&sup2;³&sup3;¹&sup1;∴&there4;≦&lE;≧&gE;≨&lnE;≩&gnE;⋹&isinE;Ⓢ&oS;Ⓢ&circledS;═&boxH;║&boxV;╒&boxdR;╕&boxdL;╘&boxuR;╛&boxuL;╞&boxvR;╡&boxvL;╥&boxhD;╨&boxhU;╪&boxvH;⧃&cirE;⩰&apE;⪑&lgE;⪒&glE;⪟&simlE;⪠&simgE;⪮&bumpE;⪳&prE;⪴&scE;⪵&prnE;⪶&scnE;⫅&subE;⫆&supE;⫋&subnE;⫌&supnE;\" ;\r\r\t// 6 UlU\r\t\"<&LT;>&GT;ⅅ&DD;ⅆ&DifferentialD;ⅇ&ExponentialE;ⅈ&ImaginaryI;∂&PartialD;\" ;\r\r\t// 7 lUU\r\t\"¼&frac14;½&frac12;¾&frac34; &emsp13; &emsp14;⅓&frac13;⅔&frac23;⅕&frac15;⅖&frac25;⅗&frac35;⅘&frac45;⅙&frac16;⅚&frac56;⅛&frac18;⅜&frac38;⅝&frac58;⅞&frac78;╔&boxDR;╗&boxDL;╚&boxUR;╝&boxUL;╠&boxVR;╣&boxVL;╦&boxHD;╩&boxHU;╬&boxVH;░&blk14;▒&blk12;▓&blk34;⩸&equivDD;\" ;\r\r\t// 8 UUU\r\t\"\\\"&QUOT;&&AMP;©&COPY;®&REG;Ð&ETH;Þ&THORN;Ŋ&ENG;™&TRADE;ⅅ&CapitalDifferentialD;\"\r\r) ;\r\rCHR = Case (\r\r\tnot FRMT ; \"\" ;\r\r\tFRMT < 9 ;\r\t\t// Get the character located at left of the entity in the selected lookup table\r\t\tRight ( Left ( TBL ; Position ( TBL ; ENTT ; 1 ; 1 ) - 1 ) ; 1 ) ;\r\r\tFRMT = 9 ; EXCPTN ;\r\r\tLet ( [\r\t\tNMBR = If ( FRMT = 10 ;\r\t\t\tGetAsNumber ( ENTT ) ;\r\t\t\tLet ( [\r\t\t\t\t// Convert hex to dec\r\t\t\t\tPRFX = \"*16^$i)+let($i=$i-1;\" ;\r\t\t\t\tEXPRS = Replace ( Substitute ( Upper ( Middle ( ENTT ; 4 ; LNTH - 4 ) ) ;\r\t\t\t\t\t[ 6 ; \"_\" ] ; [ 1 ; PRFX & 1 ] ; [ \"_\" ; PRFX & 6 ] ;\r\t\t\t\t\t[ 0 ; PRFX & 0 ] ; [ 2 ; PRFX & 2 ] ; [ 3 ; PRFX & 3 ] ; [ 4 ; PRFX & 4 ] ;\r\t\t\t\t\t[ 5 ; PRFX & 5 ] ; [ 7 ; PRFX & 7 ] ; [ 8 ; PRFX & 8 ] ; [ 9 ; PRFX & 9 ] ;\r\t\t\t\t\t[ \"A\" ; PRFX & 10 ] ; [ \"B\" ; PRFX & 11 ] ; [ \"C\" ; PRFX & 12 ] ;\r\t\t\t\t\t[ \"D\" ; PRFX & 13 ] ; [ \"E\" ; PRFX & 14 ] ; [ \"F\" ; PRFX & 15 ]\r\t\t\t\t) ; 1 ; 8 ; \"\" ) & \"*16^$i)\" ;\r\t\t\t\ti = $i ; $i = LNTH - 4 ;\r\t\t\t\tRSLT = Evaluate ( EXPRS ) ;\r\t\t\t\t$i = i\r\t\t\t] ;\r\t\t\t\tRSLT\r\t\t\t)\r\t\t)\r\t] ;\r\t\tCase (\r\t\t\tNMBR = 10 ; ¶ ;\r\t\t\tNMBR > 127 and NMBR < 160 ; Middle (\r\r\t\t\t\t// x80…9F characters from Windows-1252 encoding table\r\t\t\t\t\"€\"&Char(129)&\"‚ƒ\\„…†‡ˆ‰Š‹Œ\"&Char(141)&\"Ž\"&Char(14400143)&\"‘’\\“\\”•–—˜™š›œ\"&Char(157)&\"žŸ\" ;\r\t\t\t\tNMBR - 127 ; 1\r\t\t\t) ;\r\t\t\tNMBR < 65536 ; Char ( NMBR ) ;\r\t\t\tNMBR < 1114112 ; Char ( // ≤10FFFF\r\r\t\t\t\t// Transform the entity number into a pair of UTF-16 Surrogates\r\t\t\t\tMod ( NMBR - 65536 ; 1024 ) + 56320 // +DC00 Low\r\t\t\t\t& Div ( NMBR - 65536 ; 1024 ) + 55296 // +D800 High\r\t\t\t)\r\t\t)\r\t)\r\r)\r\r] ;\r\rCase (\r\r\tnot BGN ; ~text ;\r\r\tIsEmpty ( CHR ) ;\r\t\tLeft ( ~text ; BGN )\r\t\t& TT.Html.Decode ( Replace ( ~text ; 1 ; BGN ; \"\" ) ) ;\r\r\tLeft ( ~text ; BGN - 1 )\r\t& CHR\r\t& TT.Html.Decode ( Replace ( ~text ; 1 ; BGN + LNTH - 1 ; \"\" ) )\r\r) )",
      "Encode": "Substitute ( GetAsCSS ( ~text ) ; [ \"<span style=\\\"\\\" >\" ; \"\" ] ; [ \"</span>\" ; \"\" ] )",
      "Favorite": "Let (\r[\r~favoriteField = If ( Position ( ~favoriteField ; \"::\" ; 1 ; 1 ) ; ~favoriteField ; GetFieldName ( ~favoriteField ) ) ;\r\r~backgroundColor = Case ( \r~backgroundColor = \"\" ; \"#FFFFFF\" ;\rIf ( Left ( ~backgroundColor ; 1 ) ≠ \"#\" ; \"#\" ) & ~backgroundColor\r)\r\r] ;\r\r\"data:text/html,<html>\r<head>\r<style>\rbody {\r  background-color: #ffffff;\r  overflow: hidden;\r}\r\r.heartbox {\r  position: absolute;\r  top: 50%;\r  left: 50%;\r  transform: translate(-50%, -50%);\r}\rsvg {\r  cursor: pointer;\r  overflow: visible;\r  width: 60px;\r  margin: 20px;\r}\r\rsvg #heart {\r  transform-origin: center;\r  animation: animateHeartOut 0.3s linear forwards;\r}\r\rsvg #main-circ {\r  transform-origin: 29.5px 29.5px;\r}\r\r.checkbox {\r  display: none;\r}\r\r.checkbox:checked + label svg #heart {\r  transform: scale(0.2);\r  fill: #e2264d;\r  animation: animateHeart 0.3s linear forwards 0.25s;\r}\r\r.checkbox:checked + label svg #main-circ {\r  transition: all 2s;\r  animation: animateCircle 0.3s linear forwards;\r  opacity: 1;\r}\r\r.checkbox:checked + label svg #heartgroup1 {\r  opacity: 1;\r  transition: 0.1s all 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup1 #heart1 {\r  transform: scale(0) translate(0, -30px);\r  transform-origin: 0 0 0;\r  transition: 0.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup1 #heart2 {\r  transform: scale(0) translate(10px, -50px);\r  transform-origin: 0 0 0;\r  transition: 1.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup2 {\r  opacity: 1;\r  transition: 0.1s all 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup2 #heart1 {\r  transform: scale(0) translate(30px, -15px);\r  transform-origin: 0 0 0;\r  transition: 0.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup2 #heart2 {\r  transform: scale(0) translate(60px, -15px);\r  transform-origin: 0 0 0;\r  transition: 1.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup3 {\r  opacity: 1;\r  transition: 0.1s all 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup3 #heart1 {\r  transform: scale(0) translate(30px, 0px);\r  transform-origin: 0 0 0;\r  transition: 0.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup3 #heart2 {\r  transform: scale(0) translate(60px, 10px);\r  transform-origin: 0 0 0;\r  transition: 1.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup4 {\r  opacity: 1;\r  transition: 0.1s all 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup4 #heart1 {\r  transform: scale(0) translate(30px, 15px);\r  transform-origin: 0 0 0;\r  transition: 0.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup4 #heart2 {\r  transform: scale(0) translate(40px, 50px);\r  transform-origin: 0 0 0;\r  transition: 1.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup5 {\r  opacity: 1;\r  transition: 0.1s all 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup5 #heart1 {\r  transform: scale(0) translate(-10px, 20px);\r  transform-origin: 0 0 0;\r  transition: 0.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup5 #heart2 {\r  transform: scale(0) translate(-60px, 30px);\r  transform-origin: 0 0 0;\r  transition: 1.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup6 {\r  opacity: 1;\r  transition: 0.1s all 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup6 #heart1 {\r  transform: scale(0) translate(-30px, 0px);\r  transform-origin: 0 0 0;\r  transition: 0.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup6 #heart2 {\r  transform: scale(0) translate(-60px, -5px);\r  transform-origin: 0 0 0;\r  transition: 1.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup7 {\r  opacity: 1;\r  transition: 0.1s all 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup7 #heart1 {\r  transform: scale(0) translate(-30px, -15px);\r  transform-origin: 0 0 0;\r  transition: 0.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup7 #heart2 {\r  transform: scale(0) translate(-55px, -30px);\r  transform-origin: 0 0 0;\r  transition: 1.5s transform 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup2 {\r  opacity: 1;\r  transition: 0.1s opacity 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup3 {\r  opacity: 1;\r  transition: 0.1s opacity 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup4 {\r  opacity: 1;\r  transition: 0.1s opacity 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup5 {\r  opacity: 1;\r  transition: 0.1s opacity 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup6 {\r  opacity: 1;\r  transition: 0.1s opacity 0.3s;\r}\r\r.checkbox:checked + label svg #heartgroup7 {\r  opacity: 1;\r  transition: 0.1s opacity 0.3s;\r}\r\r@keyframes animateCircle {\r  40% {\r    transform: scale(10);\r    opacity: 1;\r    fill: #dd4688;\r  }\r  55% {\r    transform: scale(11);\r    opacity: 1;\r    fill: #d46abf;\r  }\r  65% {\r    transform: scale(12);\r    opacity: 1;\r    fill: #cc8ef5;\r  }\r  75% {\r    transform: scale(13);\r    opacity: 1;\r    fill: transparent;\r    stroke: #cc8ef5;\r    stroke-width: 0.5;\r  }\r  85% {\r    transform: scale(17);\r    opacity: 1;\r    fill: transparent;\r    stroke: #cc8ef5;\r    stroke-width: 0.2;\r  }\r  95% {\r    transform: scale(18);\r    opacity: 1;\r    fill: transparent;\r    stroke: #cc8ef5;\r    stroke-width: 0.1;\r  }\r  100% {\r    transform: scale(19);\r    opacity: 1;\r    fill: transparent;\r    stroke: #cc8ef5;\r    stroke-width: 0;\r  }\r}\r\r@keyframes animateHeart {\r  0% {\r    transform: scale(0.2);\r  }\r  40% {\r    transform: scale(1.2);\r  }\r  100% {\r    transform: scale(1);\r  }\r}\r\r@keyframes animateHeartOut {\r  0% {\r    transform: scale(1.4);\r  }\r  100% {\r    transform: scale(1);\r  }\r}\r</style>\r<script>\rconst toggleFavorite = ()=> { const input = document.querySelector('.heartbox > input') ; input.checked = !input.checked  }\r</script>\r\r</head>\r<body>\r<div class='heartbox'>\r  <input onclick=\\\"FileMaker.PerformScript ( '\" & TT.Fm.Database.Name_Id ( ~scriptId ; \"S\" ; \"\" ) & \"','\" & ~favoriteField & \"')\\\" type='checkbox' class='checkbox' id='checkbox'\" & If ( Position ( GetField ( ~favoriteField ) ; Get ( AccountName ) ; 1 ; 1 ) ; \" checked\" ) & \"/>\r  <label for='checkbox'>\r    <svg\r      id='heart-svg'\r      viewBox='467 392 58 57'\r      xmlns='http://www.w3.org/2000/svg'\r    >\r      <g\r        id='Group'\r        fill='none'\r        fill-rule='evenodd'\r        transform='translate(467 392)'\r      >\r        <path\r          d='M29.144 20.773c-.063-.13-4.227-8.67-11.44-2.59C7.63 28.795 28.94 43.256 29.143 43.394c.204-.138 21.513-14.6 11.44-25.213-7.214-6.08-11.377 2.46-11.44 2.59z'\r          id='heart'\r          fill='#AAB8C2'\r        />\r        <circle\r          id='main-circ'\r          fill='#E2264D'\r          opacity='0'\r          cx='29.5'\r          cy='29.5'\r          r='1.5'\r        />\r\r        <g id='heartgroup7' opacity='0' transform='translate(7 6)'>\r          <circle id='heart1' fill='#9CD8C3' cx='2' cy='6' r='2' />\r          <circle id='heart2' fill='#8CE8C3' cx='5' cy='2' r='2' />\r        </g>\r\r        <g id='heartgroup6' opacity='0' transform='translate(0 28)'>\r          <circle id='heart1' fill='#CC8EF5' cx='2' cy='7' r='2' />\r          <circle id='heart2' fill='#91D2FA' cx='3' cy='2' r='2' />\r        </g>\r\r        <g id='heartgroup3' opacity='0' transform='translate(52 28)'>\r          <circle id='heart2' fill='#9CD8C3' cx='2' cy='7' r='2' />\r          <circle id='heart1' fill='#8CE8C3' cx='4' cy='2' r='2' />\r        </g>\r\r        <g id='heartgroup2' opacity='0' transform='translate(44 6)'>\r          <circle id='heart2' fill='#CC8EF5' cx='5' cy='6' r='2' />\r          <circle id='heart1' fill='#CC8EF5' cx='2' cy='2' r='2' />\r        </g>\r\r        <g id='heartgroup5' opacity='0' transform='translate(14 50)'>\r          <circle id='heart1' fill='#91D2FA' cx='6' cy='5' r='2' />\r          <circle id='heart2' fill='#91D2FA' cx='2' cy='2' r='2' />\r        </g>\r\r        <g id='heartgroup4' opacity='0' transform='translate(35 50)'>\r          <circle id='heart1' fill='#F48EA7' cx='6' cy='5' r='2' />\r          <circle id='heart2' fill='#F48EA7' cx='2' cy='2' r='2' />\r        </g>\r\r        <g id='heartgroup1' opacity='0' transform='translate(24)'>\r          <circle id='heart1' fill='#9FC7FA' cx='2.5' cy='3' r='2' />\r          <circle id='heart2' fill='#9FC7FA' cx='7.5' cy='2' r='2' />\r        </g>\r      </g>\r    </svg>\r  </label>\r</div>\r</body>\r<html>\r\"\r\r)",
      "FileViewer": "Case (\r\tIsEmpty ( ~file ) ; \"\" ;\r\rLet ([\r\t_extension = GetValue ( RightValues ( Substitute ( GetContainerAttribute ( ~file ; \"filename\" ) ; \".\" ; ¶ ) ; 1 ) ; 1 ) ;\r\t_isPdf = _extension = \"pdf\" ;\r\t_isVideo = not IsEmpty ( FilterValues ( _extension ; List ( \"mp4\" ; \"mpg\" ; \"mpeg\" ; \"ogg\" ; \"wmv\" ; \"avi\" ; \"mov\" ; \"mpa\" ; \"asf\" ; \"wma\" ; \"mp2\" ; \"m2p\" ; \"webm\" ))) ;\r\t_isAudio = not IsEmpty ( FilterValues ( _extension ; List ( \"mp3\" ; \"aiff\" ; \"wav\" ; \"aac\" ; \"m4a\" ; \"flac\" ; \"wma\" ))) ;\r\t_isImage = not IsEmpty ( FilterValues ( _extension ; List ( \"jpg\" ; \"jpeg\" ; \"gif\" ; \"png\" ; \"svg\" ))) \r];\r\rCase (\r\t_extension = \"html\" or _extension = \"htm\" ; \"data:text/html,\" & Base64Decode ( Base64Encode ( ~file ));\r\t_isImage ; \"data:text/html,\" & \"<html><body margin=\\\"0\\\"><img width='100%' src=\\\"data:image/\" & _extension & Case ( _extension=\"svg\" ; \"+xml\" ) & \";base64,\" & Base64Encode ( ~file ) & \"\\\" /></body></html>\" ;\r\t_isVideo  ; \"data:text/html,\" & \"<html><body margin=\\\"0\\\"><video \" & FilterValues ( ~parameter ; List ( \"controls\" ; \"autoplay\" )) & \"  width='100%'><source type=\\\"video/\" & _extension & \"\\\" src=\\\"data:video/\" & _extension & \";base64,\" & Base64Encode ( ~file ) & \"\\\" /></video></body></html>\" ;\r\t_isAudio  ; \"data:text/html,\" & \"<html><body margin=\\\"0\\\"><audio \" & FilterValues ( ~parameter ; List ( \"controls\" ; \"autoplay\" )) & \" src=\\\"data:audio/\" & _extension & \";base64,\" & Base64Encode ( ~file ) & \"\\\" /></body></html>\" ;\r\t_isPdf ; \r\"data:text/html,\" & \rLet ( [\r\t_fullFieldName = GetFieldName ( Librairie_Settings::TestUsager_PdfViewer ) ; //Référencer la rubrique contenant la librairie ici\r\t_tableName = GetValue ( Substitute ( _fullFieldName ; \"::\" ; ¶ ) ; 1 ) ;\r\t_fieldName = GetValue ( Substitute ( _fullFieldName ; \"::\" ; ¶ ) ; 2 ) ;\r\t_code = ExecuteSQL ( \"SELECT \\\"\" & _fieldname & \"\\\" FROM \\\"\" & _tableName & \"\\\"\" ; \"\" ; \"\" ) ;\r\r\t_pdfViewer = _code ;\r\t_settings = JSONSetElement ( \"{}\"\r\t\t; [ \"scale\" ; 3 ; JSONNumber ]\r\t\t; [ \"containerid\" ; \"pdfContainer\" ; JSONString ]\r\t) ;\r\t_inject = \"<script>\" & JSONGetElement ( _pdfViewer ; \"lib\" ) & \" </script>\"\r\t & Substitute ( JSONGetElement ( _pdfViewer ; \"script\" )\r\t\t; [ \"[base64EncodedPdfData]\" ; Substitute ( Base64Encode ( ~file ); [ Char ( 1000013 ); \"\" ] ) ]\r\t\t; [ \"[pdfSettings]\" ; _settings ]\r\t\t; [ \"[worker]\" ; JSONGetElement ( _pdfViewer ; \"worker\" ) ]\r\r\t);\r\t_html = \"<!DOCTYPE html>\r<html lang=\\\"en\\\">\r<head>\r<meta charset=\\\"utf-8\\\">\r<meta http-equiv=\\\"x-ua-compatible\\\" content=\\\"ie=edge\\\">\r<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, shrink-to-fit=no\\\">\r<style>\rcanvas {\rwidth: 100%;\r}\r</style>\r\r<title></title>\r\r</head>\r<body>\r<div id=\\\"pdfContainer\\\"></div>\r<script id=\\\"pdfViewer\\\"></script>\r</body>\r</html>\" \r\r];\r\tSubstitute ( _html ; \"<script id=\\\"pdfViewer\\\"></script>\" ; _inject )\r) ;\r\t_extension = \"json\" ; Let ( j = JSONFormatElements ( Base64Decode ( Base64Encode ( ~file ))) ; Case ( Left ( j ; 1 ) <> \"?\" ; \"data:text/html,\" & \"<html><body margin=\\\"0\\\"><pre>\" & j & \"</pre></body></html>\" ; \"data:text/html,\" & Base64Decode ( Base64Encode ( ~file )))) ;\r\tnot IsEmpty ( FilterValues ( _extension  ; List ( \"txt\" ; \"csv\" ; \"log\" ; \"tab\" ; \"xml\" ; \"rtf\"  ))); \"data:text/html,\" & Base64Decode ( Base64Encode ( ~file )) ;\r\t\"data:text/html,\" & \"<html><body align=\\\"center\\\" margin=\\\"0\\\">\" & GetContainerAttribute ( ~file ; \"filename\" ) & \"</body></html>\" )\r\t\r) \r)",
      "Icons": {
        "LoadingSpinner": "Let (\r\r~backgroundColor = Case ( \r~backgroundColor = \"\" ; \"#FFFFFF\" ;\rIf ( Left ( ~backgroundColor ; 1 ) ≠ \"#\" ; \"#\" ) & ~backgroundColor\r) ;\r\r\"data:text/html,\r<html>\r  <head>\r    <style>\r      body {\r        background-color: \" & ~backgroundColor & \";\r        min-height: 100vh;\r        margin: 0;\r        display: flex;\r        justify-content: center;\r        align-items: center;\r        align-content: center;\r\toverflow: hidden\r      }\r      .lds-ring {\r        display: block;\r        position: relative;\r        width: \" & If ( ~size ≠ \"\" ; ~size ; 50 ) & \"px;\r        height: \" & If ( ~size ≠ \"\" ; ~size ; 50 ) & \"px;\r     }\r      .lds-ring div {\r        box-sizing: border-box;\r        display: block;\r        position: absolute;\r        width: 100%;\r        height: 100%;\r        border: 5px solid #1fa8bd;\r        border-radius: 50%;\r        animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\r        border-color: #1fa8bd transparent transparent transparent;\r      }\r      .lds-ring div:nth-child(1) {\r        animation-delay: -0.45s;\r      }\r      .lds-ring div:nth-child(2) {\r        animation-delay: -0.3s;\r      }\r      .lds-ring div:nth-child(3) {\r        animation-delay: -0.15s;\r      }\r      @keyframes lds-ring {\r        0% {\r          transform: rotate(0deg);\r        }\r        100% {\r          transform: rotate(360deg);\r        }\r      }\r    </style>\r    <script>\r      function ToggleSpinner() {\r        const div = document.querySelector('.lds-ring')\r        div.style.visibility =\r          div.style.visibility == 'visible' ? 'hidden' : 'visible'\r      }\r    </script>\r  </head>\r  <body>\r    <div class='lds-ring'>\r      <div></div>\r      <div></div>\r      <div></div>\r      <div></div>\r    </div>\r  </body>\r</html>\r\"\r\r)",
        "Warning": "Let (\r[\r~color = Case ( \r~color = \"\" ; \"#D90300\" ;\rIf ( Left ( ~color ; 1 ) ≠ \"#\" ; \"#\" ) & ~color\r) ;\r\r~backgroundColor = Case ( \r~backgroundColor = \"\" ; \"#FFFFFF\" ;\rIf ( Left ( ~backgroundColor ; 1 ) ≠ \"#\" ; \"#\" ) & ~backgroundColor\r)\r] ;\r\r\"data:text/html,\r<head>\r<style>\" &\rTT.CSS.Blink &\r\"</style>\r</head>\r<body style='background-color:\" & ~backgroundColor & \"' >\r<svg class='blink' style='fill:\" & ~color & \"' xmlns='http://www.w3.org/2000/svg' width='100%' viewBox='0 0 512 512'><!--! Font Awesome Free 6.1.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --><path d='M506.3 417l-213.3-364c-16.33-28-57.54-28-73.98 0l-213.2 364C-10.59 444.9 9.849 480 42.74 480h426.6C502.1 480 522.6 445 506.3 417zM232 168c0-13.25 10.75-24 24-24S280 154.8 280 168v128c0 13.25-10.75 24-23.1 24S232 309.3 232 296V168zM256 416c-17.36 0-31.44-14.08-31.44-31.44c0-17.36 14.07-31.44 31.44-31.44s31.44 14.08 31.44 31.44C287.4 401.9 273.4 416 256 416z'/></svg>\r</body>\"\r\r)"
      },
      "Table": {
        "AddRecord": "Substitute ( ~table ; \"</tbody>\" ; \"<tr>\" &\r\rWhile (\r[\r~keys = JSONListKeys ( ~dataArray ; \"\" ) ;\r~lastKey = GetAsNumber ( RightValues ( ~keys ; 1 ) ) ;\r~i = 0 ;\r~result = \"\"\r] ;\r\r~i ≤ ~lastKey ;\r\r[\r~result = ~result & \"<td>\" & JSONGetElement ( ~dataArray ; ~i ) & \"</td>\" ;\r~i = ~i + 1\r] ;\r\r~result\r\r) & \r\r\"</tr></tbody>\" \r)",
        "AddText": "Let ( \r[\r~html = GetAsCSS ( ~text ) ;\r~substitute = If ( FilterValues ( ~beforeOrAfter ; \"before¶avant¶0\" ) ≠ \"\" ; \"<table>\" ; \"</body>\" )\r] ; \r\rSubstitute ( ~table ; ~substitute ; \"<p>\" & ~html & \"</p>\" & ~substitute )\r\r)",
        "Initialize": "\"<!DOCTYPE html>\r<html lang='en'>\r  <head>\r    <meta charset='UTF-8' />\r    <meta http-equiv='X-UA-Compatible' content='IE=edge' />\r    <meta name='viewport' content='width=device-width, initial-scale=1.0' />\r    <style>\r      table {\r        border-collapse: collapse;\r        margin: 25px 0;\r        font-size: 0.9em;\r        font-family: sans-serif;\r        min-width: 400px;\r        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);\r      }\r      table thead tr {\r        background-color: #1EA6BA;\r        color: #ffffff;\r        text-align: left;\r      }\r      table th,\r      table td {\r        padding: 12px 15px;\r      }\r      table tbody tr {\r        border-bottom: 1px solid #dddddd;\r      }\r      table tbody tr:nth-of-type(even) {\r        background-color: #f3f3f3;\r      }\r      table tbody tr:last-of-type {\r        border-bottom: 2px solid #1EA6BA;\r      }\r    </style>\r  </head>\r  <body>\r    <table>\r      <thead>\r        <tr>\r\t<th>\" &\r        Substitute ( ~headersList ; ¶ ; \"</th><th>\" ) &\r\t\"</th>\r\t</tr>\r      </thead>\r      <tbody>\r      </tbody>\r    </table>\r  </body>\r</html>\""
      }
    },
    "JWT": {
      "Decode": "Let ( \r[\r~header = TT.Text.GetBetween ( ~token ; \"\" ; \".\" ; 1 ; False ) ;\r~payload = TT.Text.GetBetween ( ~token ; \".\" ; \".\" ; 1 ; False ) ;\r~mod = Mod ( Length ( ~payload ) ; 4 ) ;\r~add = Case ( ~mod = 2 ; \"==\" ; ~mod = 3 ; \"=\" ) ;\r~payload = ~payload & ~add\r] ;\r \rJSONSetElement ( \"\" ;\r[ \"header\" ; Base64Decode ( ~header ) ; JSONObject ] ;\r[ \"payload\" ; Base64Decode ( ~payload ) ; JSONObject ]\r)\r\r)"
    },
    "Json": {
      "Array": {
        "Categorize": "Let (\r$categoryKey = ~categoryKey ;\r\rTT.Json.Reduce ( ~array ;\r \r\"Let ( \r[\r~category = JSONGetElement ( @value ; $categoryKey ) ;\r~category = If ( ~category = '' or Left ( ~category ; 1 ) = '?' ; 'Autres' ; ~category ) ;\r~index = If ( not Position ( @result ; ~category ; 1 ; 1 ) ; 0 ; RightValues ( JsonListKeys ( @result ; ~category ) ; 1 ) + 1 )\r] ;\r\rJSONSetElement ( @result ; \r~category & '[' & ~index & ']' ; JSONDeleteElement ( @value ; $categoryKey ) ; JSONObject ) )\" ; \r\"{}\" \r)\r\r)",
        "Merge": "Let (\r[\r~firstIsArray = TT.Json.Type ( ~firstArray ) = JSONArray and not IsEmpty ( JSONListValues ( ~firstArray ; \"\" ) ) ;\r~secondIsArray = TT.Json.Type ( ~secondArray ) = JSONArray and not IsEmpty ( JSONListValues ( ~secondArray ; \"\" ) ) \r] ;\r\rCase (\r~firstIsArray and ~secondIsArray ; Replace ( ~firstArray ; Position ( ~firstArray ; \"]\" ; Length ( ~firstArray ) ; -1 ) ; 1 ; \",\" ) & Replace ( ~secondArray ; Position ( ~secondArray ; \"[\" ; 1 ; 1 ) ; 1 ; \"\" );\r~firstIsArray ; ~firstArray ;\r~secondIsArray ; ~secondArray ;\r\"[]\"\r)\r\r)",
        "Push": "Let ( \r[\r~array = If ( ~array = \"\" ; \"[]\" ; ~array ) ;\r~index = ValueCount ( JSONListKeys ( ~array ; \"\" ) ) ;\r~jsonType = if ( not ~jsonType ; TT.Json.Type ( ~value ) ; ~jsonType )\r] ;\r\rJSONSetElement ( ~array ; ~index ; ~value ; ~jsonType )\r\r)\r",
        "Sort": "Case (\rLeft ( ~jsonArray ; 1 )  ≠ \"[\" ; \r\t\"? * Line 1, Column 1¶\tExpected a JSON Array.  Invalid parameter\" ;\rRight ( ~jsonArray ; 1 )  ≠ \"]\" ;\r\t\"? * Line 1, Column \" & Length ( ~jsonArray ) & \"¶\tExpected a JSON Array.  Invalid parameter\" ;\rLeft ( JSONGetElement ( ~jsonArray ; \"\" ) ; 1 ) = \"?\" ;\rJSONGetElement ( ~jsonArray ; \"\" ) ;\r// Passed checks\r\rLet([\r\r/* DEVELOPER TESTING CREATE COMPLEX ~jsonArray (UNCOMMENT TO TEST IN DATA VIEWER)*/\r/*\r~jsonArray = JSONGetElement ( \"[\\\"apples\\\",\\\"\\\",\\\"12:35 AM\\\",null,\\\"oranges\\rpears\\\",[\\\"foo\\\",\\\"bar\\\"],\\\"bananas\\\",{\\\"hello\\\":\\\"world\\\"},[1.5,\\\"$1.50\\\"],4000,456,1,\\\"3:15 PM\\\"]\" ; \"\" )\r~jsonArray = JSONSetElement ( ~jsonArray ; ValueCount ( JSONListKeys ( ~jsonArray ; \"\" ) ) ; Quote ( GetAsText ( Get ( CurrentTimestamp ) - 60*60*24*365.25*35.75 ) ) ; \"JSONString\" )\r~jsonArray = JSONSetElement ( ~jsonArray ; ValueCount ( JSONListKeys ( ~jsonArray ; \"\" ) ) ; Quote ( GetAsText ( Get ( CurrentDate ) ) ) ; \"JSONString\" )\r~jsonArray = JSONSetElement ( ~jsonArray ; ValueCount ( JSONListKeys ( ~jsonArray ; \"\" ) ) ; \"{\\\"firstName\\\":\\\"Michael\\\"}\" ; \"JSONObject\" )\r~jsonArray = JSONSetElement ( ~jsonArray ; ValueCount ( JSONListKeys ( ~jsonArray ; \"\" ) ) ; Quote ( GetAsText ( Get ( CurrentDate ) - 22578 ) ) ; \"JSONString\" )\r~jsonArray = JSONSetElement ( ~jsonArray ; ValueCount ( JSONListKeys ( ~jsonArray ; \"\" ) ) ; Quote ( GetAsText ( Get ( CurrentTimestamp ) ) ) ; \"JSONString\" )\r~jsonArray = JSONSetElement ( ~jsonArray ; ValueCount ( JSONListKeys ( ~jsonArray ; \"\" ) ) ; Quote ( GetAsText ( Get ( CurrentTimestamp ) - 60*60*24*365.25*15.02 ) ) ; \"JSONString\" )\r~jsonArray = JSONSetElement ( ~jsonArray ; ValueCount ( JSONListKeys ( ~jsonArray ; \"\" ) ) ; \"{\\\"lastName\\\":\\\"Wallace\\\"}\" ; \"JSONObject\" )\r~jsonArray = JSONSetElement ( ~jsonArray ; ValueCount ( JSONListKeys ( ~jsonArray ; \"\" ) ) ; Quote ( GetAsText ( Get ( CurrentDate ) - 1257 ) ) ; \"JSONString\" )\r; ~sortChildren = false\r*/\r\r~sortChildren = If ( IsEmpty ( ~sortChildren ) ; False ; ~sortChildren )\r\r/* HANDLE MULTIPLE VALUES PER ~jsonArray VALUE AND TREAT ALL MULTIPLE VALUE ITEMS AS TEXT IN THE SORT */\r; ~r = GetContainerAttribute ( \"\\r\" ; \"MD5\" ) & GetAsText ( Ceiling ( Random * 10000 ) )\r; ~n = GetContainerAttribute ( \"\\n\" ; \"MD5\" ) & GetAsText ( Ceiling ( Random * 10000 ) )\r; ~jsonArrayNew = Substitute ( ~jsonArray ; [\"\\r\";~r] ; [\"\\n\";~n] )\r\r\r/* SPLIT OUT NUMBERS AND SORT THEM INTO THEIR OWN ~jsonArray */\r; ~isNumber = \"GetAsNumber(Filter(@value;\\\"0123456789.-\\\"))=@value and \r\t\t\tPatternCount ( @value ; \\\".\\\" )<2 and \r\t\t\tPatternCount ( @value ; \\\"-\\\" )<2\"\r\r; ~numArray = TT.Json.Filter ( ~jsonArrayNew ; ~isNumber ) \r; ~numbers = JSONListValues ( ~numArray ; \"\" )\r; ~sortedNumbers = If ( ~numbers ; SortValues ( ~numbers ; 2 ) )\r; ~sortedNumbers = If ( ~numbers ; If ( Right ( ~sortedNumbers ; 1 ) = \"¶\" ; Left ( ~sortedNumbers ; Length ( ~sortedNumbers ) - 1 ) ; ~sortedNumbers ) )\r; ~sortedNumbersArray = If ( ~numbers ; Substitute ( \"[\" & ~sortedNumbers & \"]\" ; [\"¶\";\",\"]) ; \"[]\" )\r\r\r/* SPLIT OUT ARRAYS AND SORT THEM INTO THEIR OWN ~jsonArray */\r; ~isArray = \"Left(@value;1)=\\\"[\\\" and JSONGetElement ( @value ; \\\"\\\" )=@value\"\r; ~jsonArrayArray = TT.Json.Filter ( ~jsonArrayNew ; ~isArray ) \r; ~jsonArrays = If ( ~jsonArrayArray≠\"[]\" ; JSONListValues ( ~jsonArrayArray ; \"\" ) )\r\r/* sort child arrays if ~sortChildren flag is true */\r; ~jsonArraysEscaped = If ( ~sortChildren ; Substitute ( ~jsonArrays ; \"\\\"\" ; \"\\\\\\\"\" ) )\r; ~calcStart = \"TT.Json.Array.Sort(\\\"\"\r; ~calcEnd = \"\\\";False);\"\r; ~~sortChildrenCalc = If ( ~sortChildren ; \"List( \" & ~calcStart & Substitute ( ~jsonArraysEscaped ; \"¶\" ; ~calcEnd & ~calcStart ) & ~calcEnd & \"\\\"\\\" )\" )\r; ~jsonArrays = If ( ~sortChildren ; Evaluate ( ~~sortChildrenCalc ) ; ~jsonArrays )\r\r; ~sortedArrays = If ( ~jsonArrayArray≠\"[]\" ; SortValues ( ~jsonArrays ; 1 ) )\r; ~sortedArrays = If ( ~jsonArrayArray≠\"[]\" ; If ( Right ( ~sortedArrays ; 1 ) = \"¶\" ; Left ( ~sortedArrays ; Length ( ~sortedArrays ) - 1 ) ; ~sortedArrays ) )\r; ~sortedArrayArray = If ( ~jsonArrayArray≠\"[]\" ; Substitute ( \"[\\\"\" & ~sortedArrays & \"\\\"]\" ; [\"¶\";\"\\\",\\\"\"]; [~r;\"\\r\"]; [~n;\"\\n\"]; [\"\\\"[\";\"[\"]; [\"]\\\"\";\"]\"] ) ; \"[]\" )\r\r\r/* SPLIT OUT OBJECTS AND SORT THEM INTO THEIR OWN ~jsonArray */\r; ~isObject = \"Left(@value;1)=\\\"{\\\" and JSONGetElement ( @value ; \\\"\\\" )=@value\"\r; ~objectArray = TT.Json.Filter ( ~jsonArrayNew ; ~isObject ) \r; ~objects = If ( ~objectArray≠\"[]\" ; JSONListValues ( ~objectArray ; \"\" ) )\r; ~sortedObjects = If ( ~objectArray≠\"[]\" ; SortValues ( ~objects ; 1 ) )\r; ~sortedObjects = If ( ~objectArray≠\"[]\" ; If ( Right ( ~sortedObjects ; 1 ) = \"¶\" ; Left ( ~sortedObjects ; Length ( ~sortedObjects ) - 1 ) ; ~sortedObjects ) )\r; ~sortedObjectsArray = If ( ~objectArray≠\"[]\" ; Substitute ( \"[\\\"\" & ~sortedObjects & \"\\\"]\" ; [\"¶\";\"\\\",\\\"\"]; [~r;\"\\r\"]; [~n;\"\\n\"]; [\"\\\"{\";\"{\"]; [\"}\\\"\";\"}\"] ) ; \"[]\" )\r\r\r/* SPLIT OUT TIMESTAMPS AND SORT THEM INTO THEIR OWN ~jsonArray */\r/* These must be converted to numbers to sort and then converted back again */\r; ~isTimestamp = \"GetAsTimestamp(@value) ≠ \\\"?\\\" and\r\t\t\tPatternCount(@value;\\\":\\\") and \r\t\t\t( PatternCount(@value;\\\"/\\\") or PatternCount(@value;\\\"-\\\") ) and \r\t\t\tFilter(@value ; \\\"0123456789 :/-AMP\\\")=@value\"\r; ~timestampArray = TT.Json.Filter ( ~jsonArrayNew ; ~isTimestamp ) \r; ~timestamps = If ( ~timestampArray≠\"[]\" ; JSONListValues ( ~timestampArray ; \"\" ) )\r; ~calcStart = \"GetAsNumber( GetAsTimeStamp( \\\"\"\r; ~calcEnd = \"\\\" ) ) ; \"\r; ~timestampscalc = \"List( \" & ~calcStart & Substitute ( ~timeStamps ; \"¶\" ; ~calcEnd & ~calcStart ) & ~calcEnd & \"\\\"\\\" )\"\r; ~timestampsAsNumbers = If ( ~timestampArray≠\"[]\" ; Evaluate ( ~timestampscalc ) )\r; ~sortedTimestampsAsNumbers = If ( ~timestampArray≠\"[]\" ; SortValues ( ~timestampsAsNumbers ; 2  ) )\r; ~sortedTimestampsAsNumbers = If ( ~timestampArray≠\"[]\" ; If ( Right ( ~sortedTimestampsAsNumbers ; 1 ) = \"¶\" ; Left ( ~sortedTimestampsAsNumbers ; Length ( ~sortedTimestampsAsNumbers ) - 1 ) ; ~sortedTimestampsAsNumbers ) )\r; ~calcStart = \"GetAsTimeStamp( \"\r; ~calcEnd = \" ) ; \"\r; ~timestampscalc = \"List( \" & ~calcStart & Substitute ( ~sortedTimestampsAsNumbers ; \"¶\" ; ~calcEnd & ~calcStart ) & ~calcEnd & \"\\\"\\\" )\"\r; ~sortedTimestamps = If ( ~timestampArray≠\"[]\" ; Evaluate ( ~timestampscalc ) )\r; ~sortedTimestampsArray = If ( ~timestampArray≠\"[]\" ; Substitute ( \"[\\\"\" & ~sortedTimestamps & \"\\\"]\" ; [\"¶\";\"\\\",\\\"\"]; [~r;\"\\r\"]; [~n;\"\\n\"] ) ; \"[]\" )\r\r\r/* SPLIT OUT TIMES AND SORT THEM INTO THEIR OWN ~jsonArray */\r/* These must be converted to numbers to sort and then converted back again */\r; ~isTime = \"GetAsTime(@value) ≠ \\\"?\\\" and\r\t\t\tPatternCount(@value;\\\":\\\") and \r\t\t\tFilter(@value ; \\\"0123456789 :AMP\\\")=@value\"\r; ~timeArray = TT.Json.Filter ( ~jsonArrayNew ; ~isTime ) \r; ~times = If ( ~timeArray≠\"[]\" ; JSONListValues ( ~timeArray ; \"\" ) )\r; ~calcStart = \"GetAsNumber( GetAsTime( \\\"\"\r; ~calcEnd = \"\\\" ) ) ; \"\r; ~timescalc = \"List( \" & ~calcStart & Substitute ( ~times ; \"¶\" ; ~calcEnd & ~calcStart ) & ~calcEnd & \"\\\"\\\" )\"\r; ~timesAsNumbers = If ( ~timeArray≠\"[]\" ; Evaluate ( ~timescalc ) )\r; ~sortedTimesAsNumbers = If ( ~timeArray≠\"[]\" ; SortValues ( ~timesAsNumbers ; 2  ) )\r; ~sortedTimesAsNumbers = If ( ~timeArray≠\"[]\" ; If ( Right ( ~sortedTimesAsNumbers ; 1 ) = \"¶\" ; Left ( ~sortedTimesAsNumbers ; Length ( ~sortedTimesAsNumbers ) - 1 ) ; ~sortedTimesAsNumbers ) )\r; ~calcStart = \"Let([~time = GetAsTime( \"\r; ~calcEnd = \" );~hr=Mod(hour(~time);12);~hr=If(~hr;~hr;12);~min=Right(\\\"0\\\"&Minute(~time);2);~sec=Right(\\\"0\\\"&Seconds(~time);2);~pm=Div(hour(~time);12)];~hr&\\\":\\\"&~min&if(~sec;\\\":\\\"&~sec)&if(~pm;\\\" PM\\\";\\\" AM\\\")); \"\r; ~timescalc = \"List( \" & ~calcStart & Substitute ( ~sortedTimesAsNumbers ; \"¶\" ; ~calcEnd & ~calcStart ) & ~calcEnd & \"\\\"\\\" )\"\r; ~sortedTimes = If ( ~timeArray≠\"[]\" ; Evaluate ( ~timescalc ) )\r; ~sortedTimesArray = If ( ~timeArray≠\"[]\" ; Substitute ( \"[\\\"\" & ~sortedTimes & \"\\\"]\" ; [\"¶\";\"\\\",\\\"\"]; [~r;\"\\r\"]; [~n;\"\\n\"] ) ; \"[]\" )\r\r\r/* SPLIT OUT DATES AND SORT THEM INTO THEIR OWN ~jsonArray */\r/* These must be converted to numbers to sort and then converted back again */\r; ~isDate = \"GetAsDate(@value) ≠ \\\"?\\\" and\r\t\t\t( PatternCount(@value;\\\"/\\\") or \tPatternCount(@value;\\\"-\\\") ) and \r\t\t\tFilter(@value ; \\\"0123456789 /-\\\")=@value\"\r; ~dateArray = TT.Json.Filter ( ~jsonArrayNew ; ~isDate ) \r; ~dates = If ( ~dateArray≠\"[]\" ; JSONListValues ( ~dateArray ; \"\" ) )\r; ~calcStart = \"GetAsNumber( GetAsDate( \\\"\"\r; ~calcEnd = \"\\\" ) ) ; \"\r; ~datescalc = \"List( \" & ~calcStart & Substitute ( ~dates ; \"¶\" ; ~calcEnd & ~calcStart ) & ~calcEnd & \"\\\"\\\" )\"\r; ~datesAsNumbers = If ( ~dateArray≠\"[]\" ; Evaluate ( ~datescalc ) )\r; ~sortedDatesAsNumbers = If ( ~dateArray≠\"[]\" ; SortValues ( ~datesAsNumbers ; 2  ) )\r; ~sortedDatesAsNumbers = If ( ~dateArray≠\"[]\" ; If ( Right ( ~sortedDatesAsNumbers ; 1 ) = \"¶\" ; Left ( ~sortedDatesAsNumbers ; Length ( ~sortedDatesAsNumbers ) - 1 ) ; ~sortedDatesAsNumbers ) )\r; ~calcStart = \"GetAsDate( \"\r; ~calcEnd = \" ) ; \"\r; ~datescalc = \"List( \" & ~calcStart & Substitute ( ~sortedDatesAsNumbers ; \"¶\" ; ~calcEnd & ~calcStart ) & ~calcEnd & \"\\\"\\\" )\"\r; ~sortedDates = If ( ~dateArray≠\"[]\" ; Evaluate ( ~datescalc ) )\r; ~sortedDatesArray = If ( ~dateArray≠\"[]\" ; Substitute ( \"[\\\"\" & ~sortedDates & \"\\\"]\" ; [\"¶\";\"\\\",\\\"\"]; [~r;\"\\r\"]; [~n;\"\\n\"] ) ; \"[]\" )\r\r\r/* HANDLE THE REST AS TEXT AND SPLIT THEM OUT INTO THEIR OWN SORTED ~jsonArray */\r; ~isText = \"not (\" & ~isNumber & \") and not (\" & ~isTimestamp & \") and not (\" & ~isTime & \") and not (\" & ~isDate & \") and not (\" & ~isArray & \") and not (\" & ~isObject & \")\"\r; ~textArray = TT.Json.Filter ( ~jsonArrayNew ; ~isText ) \r; ~text = JSONListValues ( ~textArray ; \"\" )\r; ~sortedText = SortValues ( ~text ; 1 )\r; ~sortedText = If ( Right ( ~sortedText ; 1 ) = \"¶\" ; Left ( ~sortedText ; Length ( ~sortedText ) - 1 ) ; ~sortedText )\r; ~sortedTextArray = If ( ~textArray≠\"[]\" ; Substitute ( \"[\\\"\" & ~sortedText & \"\\\"]\" ; [\"¶\";\"\\\",\\\"\"]; [~r;\"\\r\"]; [~n;\"\\n\"]; [\"\\\"{\";\"{\"]; [\"}\\\"\";\"}\"] ) ; \"[]\" )\r\r\r/* RECOMBINE INTO A SINGLE OBJECT */\r// Set order here...\r; ~first = ~sortedNumbersArray\r; ~second = ~sortedTextArray\r; ~third = ~sortedDatesArray\r; ~fourth = ~sortedTimesArray\r; ~fifth = ~sortedTimestampsArray\r; ~sixth = ~sortedArrayArray\r; ~seventh = ~sortedObjectsArray\r\r; ~result = TT.Json.Array.Merge ( TT.Json.Array.Merge ( TT.Json.Array.Merge ( TT.Json.Array.Merge ( TT.Json.Array.Merge ( TT.Json.Array.Merge ( ~first ; ~second ) ; ~third ) ; ~fourth ) ; ~fifth ) ; ~sixth ) ; ~seventh )\r\r];\r~result\r)// End Let\r)// End Case"
      },
      "Convert": {
        "ToList": "Case ( \rnot TT.Json.isValid ( ~json ) ; \"\" ;\rnot ~multiLevelOption ; JSONListValues ( ~json ; \"\" ) ;\r\rWhile ( \r[ \r~list = JSONListValues ( ~json ; \"\" ) ;\r~i = 1\r] ; \r\r//Le compte est variable, donc redéfini à chaque itération\r~i <= ValueCount ( ~list ) ; \r\r[ \r~value = GetValue ( ~list ; ~i ) ;\r~isJson = TT.Json.isValid ( ~value ) ;\r~list = If ( ~isJson ; Substitute ( ~list ; ~value ; JSONListValues ( ~value ; \"\" ) ) ; ~list ) ;\r~i = If ( ~isJson ; ~i ; ~i + 1 ) \r] ; \r\r~list \r\r)\r\r)"
      },
      "CreateExpression": "While ( [\r \r// remove leading spaces\rvJSON = JSONGetElement ( ~json ; \"\" ) ;\r \rvObjArr = Case( Left( vJSON ; 1 ) = \"{\" ; \"{}\" ; Left( vJSON ; 1 ) = \"[\" ; \"[]\" ; \"\" ) ;\rvKeys = TT.Json.Paths ( vJSON ; \"\" ; \"\" ) ;\r \rvI = 1 ;\rvN = ValueCount ( vKeys ) ;\rvResult = \"\"\r \r] ; vI ≤ vN ; [\r \rvKey   = GetValue ( vKeys ; vI ) ;\rvValue = JSONGetElement ( vJSON ; vKey ) ;\r \r// the fix\rvType  = TT.Json.Type ( vValue ) ;\rvLine  = If ( FilterValues ( \"1¶2¶5¶6\" ; vType ) or JSONListKeys ( vValue ; \"\" ) = \"\" ;\r\t\" ;¶\" & Char(9) & \"[ \" & Quote ( vKey ) & \" ; \"\r\t& Case (\r\t\tvType = 1 ; Quote ( vValue ) ;\r\t\tvType = 2 ; vValue ;\r\t\tvType = 5 ; If ( vValue ; \"True\" ; \"False\" ) ;\r\t\tQuote ( \"\" )\r\t)\r\t& \" ; \" & GetValue ( \"JSONString¶JSONNumber¶JSONObject¶JSONArray¶JSONBoolean¶JSONNull\" ; vType ) & \" ]\"\r) ;\r \rvResult = vResult & vLine ;\rvI = vI + 1\r \r] ;\r \r\"JSONSetElement ( \" & Quote( vObjArr ) & vResult & \"¶)\"\r \r)",
      "CurrentRecord": "Let ( \r[\r$json = \"\" ;\r~layout = If ( ~layoutId ; TT.Fm.Database.Name_Id ( ~layoutId ; \"L\" ; \"\" ) ) ;\r~table = Get ( LayoutTableName ) ;\r\r$fieldsList = Case ( \r~fieldsList ≠ \"\" ; ~fieldsList ;\r~layout ≠ \"\" ; FieldNames ( \"\" ; ~layout ) ; \rExecuteSQL ( \"SELECT FieldName FROM FileMaker_Fields WHERE TableName = ?\" ; \"\" ; \"\" ; ~table ) \r) ;\r\r~execute = TT.List.Custom ( 1 ; ValueCount ( $fieldsList ) ; \"Let ( [ ~field = GetValue ( $fieldsList ; [n] ) ; ~value = GetField ( ~field ) ; $json = JSONSetElement ( $json ; ~field ; ~value ; TT.Json.Type ( ~value ) ) ] ; \\\"\\\" )\" )\r\r] ;\r\r$json\r\r)",
      "Filter": "Case(Floor(GetAsNumber(Get(ApplicationVersion)))<18;\"?ERROR: This Custom Function requires a minimum FMP version of v18.\";Let([\r\r\t_MAX_RECURSIONS = 50000 ;\r\r_b=Json;_c=TargetPath;_d=Operator;_e=ComparisonValue;_f=ValueType;_g=ResultPath;_h=\"\\\\\";_i=Char(13);_j=Char(10);_k=Char(8232);_l=_h&\"u2028\";_m=Char(8233);_n=_h&\"u2029\";_o=\"\\\"\";_p=\"'\";_q=\"#\";_r=\"#E\";_s=\"#B\";_t=\"#Q\";_u=\"#R\";_v=\"#N\";_w=\"#S\";_x=\"#P\";_y=\"@!@#$%$%^\";_z=\"?ERROR: \";_0=21;_1=JSONString;_2=JSONNumber;_3=JSONBoolean;_4=JSONArray;_5=JSONObject;_6=JSONNull;_7=\"DATE_\";_8=\"NUMBER_OR_NUMERIC_STRING\";_9=List(_1;_2;_3;_6;_8);_ba=\"#M\";_bb=\"#D\";_bc=\"9\";_bd=\"91\";_be=\"92\";_bf=\"93\";_bg=\"94\";_bh=\"95\";_bi=\"_F1\";_bj=\"_F2\";_bk=\"_F3\";_bl=\"_F4\";_bm=\"_F5\";_bn=\"_F6\";_bo=\"_F7\";_bp=\"_F8\";_bq=\"_F9\";_br=\"_F10\";_bs=\"IS_MIN_VALUE\";_bt=\"IS_MAX_VALUE\";_bu=\".INDEXES.\";_bv=\".KEYS.\";_bw=\"DEPTH\";_bx=\"INCLUDE_HIST\";_by=\"HIST\";_bz=\"PREV\";_b0=\"SRC\";_b1=\"[*]\";_b2=\"../\";_b3=\"./\";_b4=\"EQUALS\";_b5=\"NUMERIC_EQUALS\";_b6=\"EXACT\";_b7=\"LIKE\";_b8=\"BEGINS_WITH\";_b9=\"ENDS_WITH\";_ca=\"IN\";_cb=\"CONTAINS\";_cc=\"CONTAINS_CASE_SENSITIVE\";_cd=\"MATCH_ALL\";_ce=\">\";_cf=\">=\";_cg=\"<\";_ch=\"<=\";_ci=\"...\";_cj=\"...x\";_ck=\"x...\";_cl=\"x...x\";_cm=List(_cl;_cj;_ck;_ci);_cn=List(_ce;_cf;_cg;_ch;_cm);_co=List(_b4;_b5;_b6;_b7;_b8;_b9;_ca;_cd;_cb;_cc;_cn);_cp=\"SUM\";_cq=\"COUNT\";_cr=\"MIN\";_cs=\"MAX\";_ct=\"AVG\";_cu=\"#\";_cv=\"$\";_cw=\"LIST\";_cx=\"LIST_DISTINCT\";_cy=\";\";_cz=13;_c0=\"NUMBER\";_c1=\"BOOLEAN\";_c2=\"FALSE\";_c3=\"TRUE\";_c4=\"STRING\";_c5=\"EMPTY_STRING\";_c6=\"NON_EMPTY_STRING\";_c7=\"NULL\";_c8=\"ARRAY\";_c9=\"OBJECT\";_da=\"ALL\";_db=\"YYYYMMDD\";_dc=\"YYYYDDMM\";_dd=\"MMDDYYYY\";_de=\"DDMMYYYY\";_df=List(_db;_dc;_dd;_de);_dg=\"DATE\";_dh=_dg&\"_\"&Substitute(_df;_i;_i&_dg&\"_\");_di=\"DAY\";_dj=_di&\"_\"&Substitute(_df;_i;_i&_di&\"_\");_dk=\"MONTH\";_dl=_dk&\"_\"&Substitute(_df;_i;_i&_dk&\"_\");_dm=\"YEAR\";_dn=_dm&\"_\"&Substitute(_df;_i;_i&_dm&\"_\");_do=List(_dh;_dj;_dl;_dn);_dp=List(_c0;_c2;_c3;_c5;_c6;_c7;_c8;_c9);_dq=List(_c0;_c1;_c6;_c8;_c9);_dr=\"EMPTY_STR\";_ds=\"NON_TRIVIAL_STR\";_dt=\"MAP\";_du=\"TEMPLATE\";_dv=\"BASE_PATH\";_dw=\"SOURCE\";_dx=\"OUTPUT\";_dy=\"DATA_TYPE\";_dz=\"DEFAULT\";_d0=\"TRANSFORM\";_d1=\".KEY.\";_d2=\".INDEX.\";_d3=\".REMOVE.\";_d4=\".OUTPUT.\";_d5=\".SELF.\";_d6=Left(1/2;1);_d7=List(\",\";\".\");_d8=_d=_bi or _d=_bj or _d=_bk or _d=_bl or _d=_bm or _d=_bn or _d=_bo or _d=_bp or _d=_bs or _d=_bt or _d=_bq or _d=_br or _g=_bu or _g=_bv];Case( not _d8;SetRecursion(While([_d9=Left(_b;Length(_y))=_y;_ea=Case(_d9;GetValue(_b;1));_eb=Case(_d9;Replace(_b;1;Length(_ea)+1;\"\");_b);_ec=Case(_d9;Replace(_ea;1;Length(_y);\"\");\"{}\");_ed=JSONGetElement(_ec;_bw)+0;_ee=Case(_d9;GetAsBoolean(JSONGetElement(_ec;_bx));Left(Trim(_g);1)<>\"{\";0;PatternCount(_g;_b2)=0;0;1);_ef=_ed+1;_ec=JSONSetElement(_ec;[_bw;_ef;_2];[_bx;_ee;_3]);_eg=_by&\".\"&_ef;_eh=Let([_ei=Substitute(_eb;[_q;_r];[_h&_h;_s];[_l;_w];[_k;_w];[_n;_x];[_m;_x]);_ej=JSONGetElement(\"[\"&_ei&\"]\";0)];Substitute(_ej;[_h&\"r\";_u];[_h&\"n\";_v];[_h&_o;_t];[_o&\"}\";_bb&_o&\"}\"];[_o&\"]\";_bb&_o&\"]\"];[_o&\",\";_bb&_o&\",\"];[_t;_h&_o]));_ek=_d;_el=(_ek=_cd);_em=Case(_ek=_cb;1;_ek=_cc;1;0);_en=Case(_ek=_b7;1;_ek=_b8;1;0);_eo=Case(_en;1;_ek=_b9;1;_ek=_ca;1;_em;1;0);_ep=Case(_en;1;_ek=_b9;1;_em;1;0);_eq=Case(_ek=_b5;1;0);_er=Case(ValueCount(FilterValues(_f;_do))>0;_f;\"\");_es= not IsEmpty(_er);_et=Case( not _es;0;ValueCount(FilterValues(_f;_dh))>0;1;0);_eu=ValueCount(FilterValues(_ek;_cn));_ev=ValueCount(FilterValues(_ek;_cm));_ew=(_f=_2);_ex=(_f=_1 or _es);_ey=GetValue(_e;1);_ez=GetValue(_e;2);_e0=GetAsNumber(Case(_et;GetAsDate(_ey);_ey));_e1=GetAsNumber(Case(_et;GetAsDate(_ez);_ez));_e2=Case(_eq;1;_eu;1;_ev;1;0);_e3=Case( not _e2;\"\";ValueCount(FilterValues(_f;_d7))=1;_f;\"\");_e4= not IsEmpty(_e3);_e5=Case( not _e2;0; not _e4;0;_e3=_d6;0;1);_e6=Case(_es;_1;_e4;_8; not IsEmpty(_f);_f;_e2;_8;_1);_e7=Case( not _e2;0;_e6=_8;1;_e6=_1;1;0);_e8=_f;_e9=Case(_et;GetAsNumber(_e);_es and _ek<>_ca;GetAsNumber(_e);_e6=_2;GetAsNumber(_e);_e7;GetAsNumber(_e);_ek=_ca or _e6=_1;Let([_ei=Substitute(_e;[_q;_r];[_h;_s];[_k;_w];[_m;_x];[_j;_v])];Case(_ek=_ca;UniqueValues(_ei;1;\"Unicode_Raw\");Substitute(_ei;[_i;_u])));_e);_fa=Case(_ek=_ca;Substitute(_e9;\" \";\"\");\"\");_fb=JSONQuery(\"\";_c;_bl;\"\";\"\";\"\");_fc=GetValue(_fb;3);_fd=GetValue(_fb;4);_fe=IsEmpty(_fd);_ff= not _fe;_fg=Case(_el;\"\";JSONQuery(_fc;\"\";_bi;\"\";\"\";\"\"));_fh=Case(Right(_c;1)<>\"]\";0;Right(Substitute(_c;\" \";\"\");2)=\"']\";0;1);_fi=Left(JSONFormatElements(_g);1)=\"{\";_fj= not _fi;_fk=Case(_fj;\"\";_g);_fl=Case(_fj;\"\";Substitute(_fk;[_q;_r];[_h&_h;_s];[_l;_w];[_n;_x];[_h&\"r\";_u];[_h&\"n\";_v]));_fm=Case(_fi;\"\";Let([_fn=Substitute(_g;[\" \";\"\"])];Case(Right(_fn;1)<>\")\";\"\";Left(_fn;Length(_cp)+1)=_cp&\"(\";_cp;Left(_fn;Length(_cq)+1)=_cq&\"(\";_cq;Left(_fn;Length(_cr)+1)=_cr&\"(\";_cr;Left(_fn;Length(_cs)+1)=_cs&\"(\";_cs;Left(_fn;Length(_ct)+1)=_ct&\"(\";_ct;Left(_fn;Length(_cp)+Length(_cu)+1)=_cp&_cu&\"(\";_cp&_cu;Left(_fn;Length(_cq)+Length(_cu)+1)=_cq&_cu&\"(\";_cq&_cu;Left(_fn;Length(_cr)+Length(_cu)+1)=_cr&_cu&\"(\";_cr&_cu;Left(_fn;Length(_cs)+Length(_cu)+1)=_cs&_cu&\"(\";_cs&_cu;Left(_fn;Length(_ct)+Length(_cu)+1)=_ct&_cu&\"(\";_ct&_cu;Left(_fn;Length(_cp)+Length(_cv)+1)=_cp&_cv&\"(\";_cp&_cv;Left(_fn;Length(_cq)+Length(_cv)+1)=_cq&_cv&\"(\";_cq&_cv;Left(_fn;Length(_cr)+Length(_cv)+1)=_cr&_cv&\"(\";_cr&_cv;Left(_fn;Length(_cs)+Length(_cv)+1)=_cs&_cv&\"(\";_cs&_cv;Left(_fn;Length(_ct)+Length(_cv)+1)=_ct&_cv&\"(\";_ct&_cv;Left(_fn;Length(_cw)+1)=_cw&\"(\";_cw;Left(_fn;Length(_cx)+1)=_cx&\"(\";_cx;\"\")));_fo=Case(IsEmpty(_fm);\"\";Let([_fp=Position(_g;\"(\";0;1)+1;_fq=Position(_g;\")\";Length(_g);-1);_fr=Middle(_g;_fp;_fq-_fp)];Substitute(_fr;_cy;_i)));_fs=RightValues(_fo;ValueCount(_fo)-1);_ft=Case(_fi;JSONGetElement(_fl;_dv);IsEmpty(_fm);_g;Trim(GetValue(_fo;1)));_fu=Substitute(_fm;[_cu;\"\"];[_cv;\"\"]);_fv= not IsEmpty(FilterValues(_fu;List(_cp;_cr;_cs;_ct)));_fw=(_fm=_cw) or (_fm=_cx);_fx=(_fm=_cq);_fy=(_fu=_ct);_fz=Case( not _fv;\"\";Right(_fm;1)=_cu;1;0);_f0=Case( not _fv;\"\";Right(_fm;1)=_cv;1;0);_f1=Case( not _fv;\"\";Let([_f2=Trim(GetValue(_fs;1))];Case(ValueCount(FilterValues(_f2;_d7))=1;_f2;\"\")));_f3= not IsEmpty(_f1);_f4=Case( not _f3;0;_f1=_d6;0;1);_f5=Trim(GetValue(_fs;1));_f6=Case( not _fx;\"\";_d9;_f5;Let([_f7=Case( not IsEmpty(_f5);Substitute(_f5;[\",\";_i];[\" \";_i]);_dq);_f8=Case(ValueCount(FilterValues(_c4;_f7))>0;List(_f7;_c5;_c6);_f7);_f8=Case(ValueCount(FilterValues(_c1;_f8))>0;List(_f8;_c2;_c3);_f8);_f8=Case(ValueCount(FilterValues(_da;_f8))>0;_dp;_f8);_f9=FilterValues(_dp;_f8);_ga=Trim(Substitute(_f9;_i;\" \"));_gb=Substitute(_ga;[_c6;_ds];[_c5;_dr])];_gb));_gc=Case( not _fw;\"\";Let([_gd=GetAsNumber(GetValue(_fs;1))];Case(IsEmpty(_gd);Char(_cz);Char(_gd))));_ge=Case( not _fv;\"\";_f3;\"\";Trim(GetValue(_fs;1)));_gf= not IsEmpty(_ge);_gg=Case( not _gf;\"\";_fz;_fm&\" aggregate can not be applied to a date string.\";IsEmpty(FilterValues(_ge;_do));\"Unsupported Date Format parameter supplied for \"&_fm&\" aggregate.\"; not IsEmpty(FilterValues(_ge;_dh)) and _fu=_cp;_cp&\" aggregate can not be applied to a full date.\";\"\");_gh=Case( not _gf;0;IsEmpty(FilterValues(_ge;_dh));0;1);_gi=Case( not _gh;0;_d9;0;1);_gj=Case(_fj;\"\";Let([_gk=JSONGetElement(_fl;_du)];Case(IsEmpty(_gk);\"{}\";_gk)));_gl=Case(_fj;\"\";JSONGetElement(_fl;_dt));_gm=Case(_fj;\"\";IsEmpty(_gl);\"ResultPath is JSON, but no harvest map data supplied.\";Left(JSONFormatElements(_gl);1)=\"?\";\"Supplied harvest map is not valid JSON.\";(_gj<>_d5) and Left(JSONFormatElements(_gj);1)=\"?\";\"Supplied harvest template is not valid JSON.\");_gn=Case(_fi and IsEmpty(_gm);While([_go=_gl;_ej=0;_gp=ValueCount(JSONListKeys(_go;\"\"));_gq=\"\";_gr=0;_gs=0];_ej<_gp and IsEmpty(_gq);[_gt=JSONGetElement(_go;_ej);_gq=Case(IsEmpty(JSONGetElement(_gt;_dw));\"Map item must contain a \"&_dw&\" value.\";IsEmpty(JSONGetElement(_gt;_dx));\"Map item is missing \"&_dx&\" value.\");_gu=JSONGetElement(_gt;_dx)=_d1;_gv=JSONGetElement(_gt;_dw)=_d3;_gr=Case(_gu and  not _gv;1;_gr);_gs=Case(_gu and _gv;1;_gs);_ej=_ej+1];List(_gr;_gs;_gq)));_gw=_fi and GetValue(_gn;1);_gx=_fi and GetValue(_gn;2);_gy=Case(_fj;\"\"; not IsEmpty(_gm);_gm;ValueCount(_gn)>2;GetValue(_gn;3);_gw and _gx;\"Map contains conflicting directives to both set and clear object keys.\";\"\");_gz=JSONQuery(\"\";_ft;_bl;\"\";\"\";\"\");_g0=GetValue(_gz;1);_g1=GetValue(_gz;2);_g2=GetValue(_gz;3);_g3=GetValue(_gz;4);_g4=GetValue(_gz;5);_g5=GetValue(_gz;6);_g6=GetValue(_gz;7);_g7=Case(_fi;\"\";_el and IsEmpty(_g2);\"\";JSONQuery(_g2;\"\";_bi;\"\";\"\";\"\"));_g8=Case(_g4;1;_g1 and _fi;1;0);_g9=Case(_g0;_g6;_g8;_g3;\"\");_ha=Case(IsEmpty(_g9) and  not _fi;Case(_fx;_cq&\"(*)\";\"\");Let([_hb=Substitute(_g9;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q]);_hc=JSONSetElement(_fk;_dv;_hb;_1)];Case(_fx;_fm&\"( \"&_hb&_cy&_f6&\" )\";_fv and _gf;_fm&\"( \"&_hb&_cy&_ge&\" )\";_fv and _f3;_fm&\"( \"&_hb&_cy&_f1&\" )\";_fv;_fm&\"( \"&_hb&\" )\";_fw;_fm&\"( \"&_hb&\" )\";_fi;_hc;_hb)));_hd=Left(Trim(_eh);1)=\"{\";_he=Case(_gx;0;_gw;1;_hd and _fi;1;_hd and IsEmpty(_g);1;0);_hf=_hd;_hg=Case(_ek=_cd;\"\";_eu;\"\";_e7;\"\";Let([_hh=Case(_ff;_fd;_fc);_hi=Right(Substitute(_hh;\" \";\"\");2)=_p&\"]\";_hj=Case(_hi;Position(_hh;\"[\"&_p;Length(_hh);-1)-1;Position(_hh;\".\";Length(_hh);-1));_hk=Case(_hj;Replace(_hh;1;_hj;\"\");_hh);_hl=GetAsBoolean(_e9)];Case(_ek=_ca;JSONQuery(_e9;\"\";_bj;\"\";\"\";_hk);List(JSONQuery(_ek;_hk;_bk;_e9;_e6;\"\");If(_e6=_3 and _ek=_b4;List(JSONQuery(_ek;_hk;_bk;_hl;_1;\"\");JSONQuery(_ek;_hk;_bk;_hl;_2;\"\")));If(_e6=_6 and _ek=_b4;JSONQuery(_ek;_hk;_bk;\"\";_1;\"\"))))));_hm=ValueCount(_hg);_hn=_i&JSONListValues(_eh;\"\")&_i;_ho=Case(_hf;JSONListKeys(_eh;\"\"));_hp=Case(IsEmpty(_ek);\"Missing Operator parameter.\";IsEmpty(FilterValues(_co;_ek));\"Unsupported Operator parameter.\";IsEmpty(_b);\"Missing Json parameter.\";Left(_hn;2)=_i&\"?\";\"Malformed Json parameter supplied.\";IsEmpty(_c) and _d<>_cd;\"Missing TargetPath parameter.\";Right(Substitute(_c;\" \";\"\");3)=\"[*]\";\"TargetPath parameters with a wildcard array at the end of the path are not supported.\";_eo and _e6<>_1;\"The \"&_ek&\" operator only supports ValueType of: JSONString.\";_ep and IsEmpty(_e9);\"The \"&_ek&\" operator requires a non-empty ComparisonValue argument.\";_ek=_ca and ValueCount(_e9)>_0;\"Maximum number of \"&_ca&\" match values exceeded.\";_ek<>_cd and IsEmpty(FilterValues(_e6;_9));\"Unsupported ValueType parameter.\";_eq and _e6<>_1 and _e6<>_2 and _e6<>_8;\"The \"&_ek&\" operator only supports ValueType of: JSONString, JSONNumber, or \\\"\\\".\"; not IsEmpty(_gg);_gg;_en and _es;\"The \"&_ek&\" operator can not be used against Date values.\";_ek=_b9 and _es;\"The \"&_ek&\" operator can not be used against Date values.\";_ek=_ca and _et;\"The \"&_ca&\" operator can not be used with full Date-string values.\";_e7 and IsEmpty(_e9);\"The \"&_ek&\" operator requires a non-empty numeric ComparisonValue argument.\";_fj and _ek=_cd and IsEmpty(Substitute(_g;[\".\";\"\"]));\"The \\\"MATCH_ALL\\\" operator requires a non-trivial ResultPath parameter.\";_eu and (_e6<>_2 and _e6<>_1 and _e6<>_8 and  not IsEmpty(_e6));\"Unsupported ValueType parameter.\";_eu and IsEmpty(_e0);\"Missing/invalid comparison value.\";_ev and IsEmpty(_e1);\"Missing/invalid range end value.\";_e6=_3 and _e9<>1 and _e9<>0;\"When specifying a ValueType of JSONBoolean, the ComparisonValue argument must be one of: { True, False, 0, 1 }\";_e6=_6 and  not IsEmpty(_e9);\"When specifying a ValueType of JSONNull, the ComparisonValue argument must be empty.\";_fj and IsEmpty(Substitute(_g;[\".\";\"\"])) and (_fv or _fw or _fx);\"Aggregate functions require a non-trivial ResultPath parameter.\";_fj and _fe and _g0;\"Relative ResultPaths can only be used when the TargetPath contains [*]\"; not IsEmpty(_gy);_gy);_hq=Case(_fu=_cr or _fu=_cs or _fu=_ct;\"\";_fu=_cp or _fx;0;\"\");_hr=\"\";_hs=0;_ht=Case(_ek=_cd;1;_eu;1;_es;1;_fh;1;_e7;1;0);_hu= not IsEmpty(_hp);_hv=Trim(_g2)=\"*\" and _fx and _ek=_cd;_hw=Case(_hu;0;_hv;0;1)];_hw;[_hx=Let([_hy=_hn;_hz=_hg];Case( not IsEmpty(_hp);0;_ht;2;_hm<1;0;_hm=1;Position(_hy;_hz;0;1);_hm<4;Min(Let(_h0=Position(_hy;GetValue(_hz;1);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;2);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;3);0;1);Case(_h0;_h0)));Min(Let(_h0=Position(_hy;GetValue(_hz;1);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;2);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;3);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;4);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;5);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;6);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;7);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;8);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;9);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;10);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;11);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;12);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;13);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;14);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;15);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;16);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;17);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;18);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;19);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;20);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;21);0;1);Case(_h0;_h0)))));_h1=_hx>0;_h2=_h1;_h3=Case(_h1;Position(_hn;_i;_hx;-1)+1);_h4=Case(_h1;Position(_hn;_i;_hx;1));_h5=Case(_h1;PatternCount(Left(_hn;_hx);_i));_hs=_hs+(_h5+0);_h6=Case(_hf;_h5);_h7=Case(_h1;Middle(_hn;_h3;_h4-_h3));_h8=Right(_h7;1)=\"}\";_h9=Right(_h7;1)=\"]\";_ia=_h1 and (_h8 or _h9);_ib=Case(_ia;Substitute(_h7;[_bb;\"\"]));_ic=Case(_ia and _fe;JSONGetElement(_ib;_fc));_id=Case(_g0;\"\";_el and IsEmpty(_g2);\"\"; not _ia;\"\";Substitute(_ib;[_q;_r];[_h&_h;_s];[_h&_o;_t];[_bc;_bd];[\"null\";_be];[\"true\";_bf];[\"false\";_bg];[_o&_o;_bh];[\":\"&_o;\":\"&_o&_ba];[\"[\"&_o;\"[\"&_o&_ba];[_o&\"]\";_ba&_o&\"]\"];[_o&\",\";_ba&_o&\",\"];[_t;_h&_o];[_s;_h&_h];[_r;_q]));_ie=Case(_ff;\"\";_el;\"\"; not _ia;\"\";Let([_if=JSONGetElement(_id;_fg);_ig=Case(Left(_if;Length(_ba))=_ba;1;Right(_if;Length(_ba))=_ba;1;0)];Case(_if=_bh;_c5;_if=_bf;_c3;_if=_bg;_c2;_if=_be;_c7;_ig;_c4; not IsEmpty(_if) and Filter(_if;\".0123456789e-+\")=_if;_c0;\"UNSUPPORTED_VALUE\")));_ih=Case(_es and _ie=_c4;JSONQuery(_ic;_er;_bp;\"\";\"\";\"\");_e7 and _ie=_c4;Case(_e5;JSONQuery(_ic;\"\";_br;\"\";_e3;\"\");GetAsNumber(_ic));_ic);_ii=Case(_ff;Let([_ij=Right(JSONGetElement(_h7;_fc);1)=\"]\";_ik=JSONGetElement(_ib;_fc);_il=Substitute(_ik;[_v;_h&\"n\"];[_u;_h&\"r\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q])];Case(_ij;_il;\"[]\")));_im=Case(_fe;\"\";_eu or _ev;_e;_ek=_ca or _e6=_1;Substitute(_e9;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q]);_e9);_in=Case(_ff;Substitute(_fd;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q]));_io=Case(_g8;Let([_ij=Right(JSONGetElement(_h7;_g2);1)=\"]\";_ik=JSONGetElement(_ib;_g2);_il=Substitute(_ik;[_v;_h&\"n\"];[_u;_h&\"r\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q])];Case(_ij;_il;\"[]\")));_ip=Case(_ff and _ii=\"[]\";0;_ff;Let([_iq=JSONQuery(_ii;_in;_ek;_im;_e8;_cq&\"(*)\")];_iq>0);_ek=_cd;1; not _ia;0;_es and _ie<>_c4;0;_es and  not _eu;Case(_ek=_b4;GetAsNumber(_ih)=_e9;_ek=_b6;GetAsNumber(_ih)=_e9;_ek=_ca;Let([_ir=FilterValues(_ih;_fa);_is=ValueCount(_ir)>0];_is);0);_ek=_b4 and  not _es;Case(_ie=_c4 and _e6=_1;(_ih=_e9);_ie=_c0 and _e6=_2;(_ih=_e9);(_ie=_c7 or _ie=_c5) and (_e6=_6 or _e6=_1) and IsEmpty(_e9);1;(_ie=_c3 or _ih=1) and _e6=_3 and _e9=1;1;(_ie=_c2 or _ih=0) and _e6=_3 and _e9=0;1;0);_ek=_b6 and  not _es;Case(_ie=_c0 and _e6=_2;(_ih=_e9);_ie=_c4 and _e6=_1;Exact(_ih;_e9);_ie=_c7 and _e6=_6 and IsEmpty(_e9);1;_ie=_c5 and _e6=_1 and IsEmpty(_e9);1;_ie=_c3 and _e6=_3 and _e9=1;1;_ie=_c2 and _e6=_3 and _e9=0;1;0);_ek=_ca;Case( not IsEmpty(FilterValues(_ih;_e9));1;(_ie=_c5 or _ie=_c7) and PatternCount(_i&_e9;_i&_i);1;0);_en;_ie=_c4 and (Left(_ih;Length(_e9))=_e9);_ek=_b9;_ie=_c4 and (Right(_ih;Length(_e9))=_e9);_eq;Case(_ie<>_c4 and _ie<>_c0;0;_e6=_1 and _ie<>_c4;0;_e6=_2 and _ie<>_c0;0;_ih=_e9;1;0);_ek=_cb;_ie=_c4 and PatternCount(_ih;_e9)>0;_ek=_cc;_ie=_c4 and Substitute(_ih;_e9;\"\")<>_ih;_eu;Case(_ie<>_c0 and _ie<>_c4;0;_ew and _ie<>_c0;0;_ex and _ie<>_c4;0;Let([_it=GetAsNumber(_ih)];Case(IsEmpty(_it);0;_ek=_ce;(_it>_e0);_ek=_cf;(_it>=_e0);_ek=_cg;(_it<_e0);_ek=_ch;(_it<=_e0);_ek=_cl;(_it>_e0) and (_it<_e1);_ek=_cj;(_it>=_e0) and (_it<_e1);_ek=_ck;(_it>_e0) and (_it<=_e1);_ek=_ci;(_it>=_e0) and (_it<=_e1);0)));0);_iu=Case( not _ip;\"\";_g0 or _g8;JSONSetElement(_ec;_eg;_ib;_1);_ec);_hr=Case( not _ip and _fu=_cp;0; not _ip and _fv;\"\"; not _ip and _fx;0; not _ip;\"\";_g0 and _ii=\"[]\";\"\";_g0;Let([_iv=List(_y&_iu;_ii);_iw=JSONQuery(_iv;_in;_ek;_im;_e8;_ha);_ix=Substitute(_iw;[_q;_r];[_h&_h;_s];[_l;_w];[_k;_w];[_n;_x];[_m;_x];[_h&\"r\";_u];[_h&\"n\";_v]);_hy=JSONGetElement(\"[\"&_ix&\"]\";0)];Case(_fv;_iw;_fx;_iw;_hy=\"[]\";\"\";\",\"&Middle(_hy;2;Length(_hy)-2)));_g8 and _io=\"[]\";\"\";_g8;Let([_iv=List(_y&_iu;_io);_iw=JSONQuery(_iv;\"\";_cd;\"\";\"\";_ha);_ix=Substitute(_iw;[_q;_r];[_h&_h;_s];[_l;_w];[_k;_w];[_n;_x];[_m;_x];[_h&\"r\";_u];[_h&\"n\";_v]);_hy=JSONGetElement(\"[\"&_ix&\"]\";0)];Case(_fv;_iw;_fx;_iw;_hy=\"[]\";\"\";\",\"&Middle(_hy;2;Length(_hy)-2)));_fi and (_ib=\"[]\" or IsEmpty(_ib));\"\";_fi;Let([_iv=JSONSetElement(\"{}\";[_b0;_ib;_1];[_bz;_iu;_1]);_iy=Case(_hf;GetValue(_ho;_h6))];JSONQuery(_iv;_hs;_bm;_iy;_gj;_gl));_he;Let([_iy=GetValue(_ho;_h6);_iz=Let([_hy=JSONSetElement(\"[]\";0;_iy;_1)];Middle(_hy;2;Length(_hy)-2))];\",\"&_iz&\":\"&_ib);Trim(_g2)=\"*\" and _fx;1;IsEmpty(_g2) and (_fv or _fx);0;IsEmpty(_g2);\",\"&_ib;Let([_i0=JSONGetElement(_ib;_g2);_i1=JSONGetElement(_id;_g7);_i2=Case(Left(_i1;Length(_ba))=_ba;1;Right(_i1;Length(_ba))=_ba;1;0);_i3=Case(_i1=_bh;_c5;_i1=_bf;_c3;_i1=_bg;_c2;_i1=_be;_c7;_i2;_c4;Left(Trim(_i1);1)=\"[\";_c8;Left(Trim(_i1);1)=\"{\";_c9; not IsEmpty(_i1) and Filter(_i1;\".0123456789e-+\")=_i1;_c0;\"UNRESOLVED_PATH\");_i0=Case(_g5 and _i3<>_c8;\"[]\";_i0);_i4=_gf and _i3=_c4;_i5=Case(_i4;Let([_ej=JSONQuery(_i0;_ge;_bp;\"\";\"\";\"\")];GetAsNumber(_ej)));_i6= not _i4 and _i3=_c4;_i7=Case(_i6;Let([_ej=Substitute(_i0;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q])];Case(_f4;JSONQuery(_ej;\"\";_br;\"\";_f1;\"\");GetAsNumber(_ej))));_i8=Case(_i3=_c4;1;_i3=_c0;1;_i3=_c8 and _g5;1;0);_i9=Case(_fu=_cq;Case(_i3=_c0 and PatternCount(_f6;_c0);1;_i3=_c4 and PatternCount(_f6;_ds);1;_i3=_c3 and PatternCount(_f6;_c3);1;_i3=_c2 and PatternCount(_f6;_c2);1;_i3=_c5 and PatternCount(_f6;_dr);1;_i3=_c7 and PatternCount(_f6;_c7);1;_i3=_c9 and PatternCount(_f6;_c9);1;_i3=_c8 and _g5 and _i0=\"[]\";0;_i3=_c8 and _g5;JSONQuery(_i0;_i1;_bn;_cq;(0&_i&0&_i&\"\"&_i&\"\");_f6);_i3=_c8 and PatternCount(_f6;_c8);1;0);_fu=_cp;Case(_i3=_c0 and _f0;0;_i3=_c0;_i0;_i3=_c4 and _fz;0;_i4;_i5;_i6;_i7+0;_i3=_c8 and _g5;JSONQuery(_i0;_i1;_bn;_cp;(_fz&_i&_f0&_i&_ge&_i&_f1);\"\");0);_fu=_cr or _fu=_cs;Case(_i3=_c0 and _f0;\"\";_i3=_c0;_i0;IsEmpty(_i0);\"\";_i3=_c4 and _fz;\"\";_i4;_i5;_i6;_i7;_i3=_c8 and _g5;JSONQuery(_i0;_i1;_bn;_fu;(_fz&_i&_f0&_i&_ge&_i&_f1);\"\");\"\");_fu=_ct;Case(_i3=_c0 and _f0;\"\";_i3=_c0;_i0&_i&\"1\";_i3=_c8 and _g5 and _i0=\"[]\";\"\";_i3=_c8 and _g5;JSONQuery(_i0;_i1;_bn;_ct;(_fz&_i&_f0&_i&_ge&_i&_f1);\"\");_fz;\"\";_i4;Case(IsEmpty(_i5);\"\";_i5&_i&\"1\");_i6;Case(IsEmpty(_i7);\"\";_i7&_i&\"1\");\"\");_g5 and _i3<>_c8;\"\";_fw and  not _i8;\"\";_i3=\"UNRESOLVED_PATH\";\"\";_i3=_c5;_o&_o;_i3=_c7;\"null\";_i3=_c3;\"true\";_i3=_c2;\"false\";_i3=_c4;Let([_hy=Trim(JSONSetElement(\"[]\";0;_i0;_1))];Middle(_hy;2;Length(_hy)-2));_i3=_c8 and _g5;Middle(Trim(_i0);2;Length(Trim(_i0))-2);_i3=_c8;_i0;_i0)];Case(_fv;_i9;_fx;_i9;IsEmpty(_i9);\"\";\",\"&_i9)));_hq=Case((_fu=_cp or _fx);GetAsNumber(_hq)+GetAsNumber(_hr);_fu=_cr;Min(GetAsNumber(_hq);GetAsNumber(_hr));_fu=_cs;Max(GetAsNumber(_hq);GetAsNumber(_hr));_fu=_ct;Case(IsEmpty(_hr);_hq;Let([_ja=GetAsNumber(GetValue(_hr;1));_jb=GetAsNumber(GetValue(_hr;2));_jc=GetAsNumber(GetValue(_hq;1))+_ja;_jd=GetAsNumber(GetValue(_hq;2))+_jb];_jc&_i&_jd));_hq&_hr);_hn=Case(_h2;Replace(_hn;1;_h4-1;\"\"));_ho=Case(_h2 and _hf;Let([_je=Position(_ho;_i;0;_h6)];Replace(_ho;1;_je;\"\")));_hw=_h2 and Length(_hn)>1];Case(_hu;_z&_hp;_hv;ValueCount(JSONListValues(_eh;\"\"));_fu=_ct;Case(_d9;_hq;Let([_jc=GetAsNumber(GetValue(_hq;1));_jd=GetAsNumber(GetValue(_hq;2));_jf=Case(_jd=0;\"\";_jc/_jd)];Case(IsEmpty(_jf);\"\";_gi;GetAsDate(Truncate(_jf;0));_jf)));_fv and _gi;GetAsDate(GetAsNumber(_hq));_fv or _fx;GetAsNumber(_hq);Let([_jg=Replace(_hq;1;1;\"\");_jh=Case(_he;\"{\"&_jg&\"}\";\"[\"&_jg&\"]\");_ji=JSONFormatElements(_jh);_jj=Case(Left(_ji;1)=\"?\";_z&\"Unexpected parse error while formatting result: \"&_ji);_jk= not _d9;_jl=Case(_jk and _fw;Let([_jm=JSONListValues(_ji;\"\");_jm=Case(_fm=_cx;UniqueValues(_jm;1;\"Unicode_Raw\");_jm);_jm=Case(_fm=_cx and Right(_jm;1)=_i;Left(_jm;Length(_jm)-1);_jm)];Substitute(_jm;[_i;_y];[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q];[_y;_gc]));Substitute(_ji;[_u;_h&\"r\"];[_v;_h&\"n\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q]))];Case(IsEmpty(_jj);_jl;_jj&_i&_i&_i&_jh))));_MAX_RECURSIONS);_d=_bi;While([_hh=_b;_jn=Substitute(_hh;[\"[\";_i&\"[\"];[\"]\";\"]\"&_i]);_jo=_jn;_jp=\"\";_jq=1;_jr=ValueCount(_jo)];_jq<=_jr;[_js=GetValue(_jo;_jq);_jt=Substitute(_js;\" \";\"\");_ju=Left(_js;1)=\"[\" and Left(_jt;2)<>\"['\";_jv=Case(_ju;_js;Substitute(_js;[_bc;_bd];[\"null\";_be];[\"true\";_bf];[\"false\";_bg]));_jp=_jp&_jv;_jq=_jq+1];_jp);_d=_bj;While([_jw=_b;_jx=\"\";_jy=_g;_jq=1;_jr=ValueCount(_jw)];_jq<=_jr;[_jz=GetValue(_jw;_jq);_j0=JSONQuery(_b4;_jy;_bk;_jz;_1;\"\");_jx=List(_jx;_j0);_jq=_jq+1];_jx);_d=_bk;Let([_hk=_c;_j1=_e;_j2=_f;_j3=_b;_j4=Case(_j3=_cb;1;_j3=_cc;1;_j3=_b9;1;0);_j5=Case(_j4;\"\";Let([_hy=Trim(JSONSetElement(\"{}\";_hk;_j1;_j2))];Trim(Middle(_hy;2;Length(_hy)-2))));_j6=Length(_j5);_j7=Case(_j4;Let([_jm=JSONSetElement(\"[]\";0;_j1;_1);_j8=Trim(Middle(_jm;2;Length(_jm)-2));_j9=Middle(_j8;2;Length(_j8)-2)];_j9))];Case(_j4;_j7;_j3=_b7 or _j3=_b8;Replace(_j5;_j6;1;\"\");_j2=_1;Replace(_j5;_j6;1;_bb&_o);_j5));_d=_bl;Let([_hh=_c;_ka=Left(_hh;Length(_b3))=_b3;_hh=Case(_ka;Replace(_hh;1;Length(_b3);\"\");_hh);_hh=Substitute(_hh;[_q;_r];[_h;_s];[_k;_w];[_m;_x];[_j;_v];[_i;_u]);_kb=Substitute(_hh;\" \";\"\");_kc=Position(_kb;_b1;0;1);_kd=Position(_hh;\"[\";0;PatternCount(Left(_kb;_kc);\"[\"));_ke=Position(_hh;\"]\";_kd;1);_kf=_kd>0;_kg=Case(_kf;Left(_hh;_kd-1);_hh);_kh=Case(_kf;Replace(_hh;1;_ke;\"\");\"\");_kh=Case(Left(_kh;1)=\".\";Replace(_kh;1;1;\"\");_kh);_g4=_kf and  not IsEmpty(_kh);_g5=Right(_kb;3)=_b1;_g6=_kg&Case(_kf;_b1)&_kh];_ka&_i&_kf&_i&_kg&_i&_kh&_i&_g4&_i&_g5&_i&_g6);_d=_bn;While([_ki=_b;_kj=Substitute(_ki;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q]);_kk=_c;_kl=_e;_km=GetAsBoolean(GetValue(_f;1));_kn=GetAsBoolean(GetValue(_f;2));_ko=GetValue(_f;3);_kp=GetValue(_f;4);_kq=Case(ValueCount(FilterValues(_kp;_d7))=1;1;0);_e5=Case(_km;0; not _kq;0;_kp=_d6;0;1);_kr=Case(IsEmpty(_ko);0;_km;0;_kl=_cq;0;1);_ks=_g;_kt=JSONListKeys(_kj;\"\");_ku=Left(_kt;1)<>\"?\" and Left(Trim(_kj);1)=\"[\";_kv=ValueCount(_kt);_kw=0;_kx=0;_ky=0;_kz=\"\";_k0=\"\";_jq=0];_ku and (_jq<_kv);[_j1=JSONGetElement(_kj;_jq);_k1=JSONGetElement(_kk;_jq);_k2=Case(Left(_k1;Length(_ba))=_ba;1;Right(_k1;Length(_ba))=_ba;1;0);_j2=Case(_k1=_bh;_c5;_k1=_bf;_c3;_k1=_bg;_c2;_k1=_be;_c7;_k2;_c4;Left(Trim(_k1);1)=\"[\";_c8;Left(Trim(_k1);1)=\"{\";_c9; not IsEmpty(_k1) and Filter(_k1;\".0123456789e-+\")=_k1;_c0;\"UNRESOLVED_PATH\");_k3=Case(_kr and _j2<>_c4;\"\";_kr;GetAsNumber(JSONQuery(_j1;_ko;_bp;\"\";\"\";\"\"));_j2=_c0 and _kn;\"\";_j2=_c0;_j1;_j2=_c4 and  not _km;Case(_e5;JSONQuery(_j1;\"\";_br;\"\";_kp;\"\");GetAsNumber(_j1));\"\");_k4=Case(_kl<>_cq;0;_j2=_c0 and PatternCount(_ks;_c0);1;_j2=_c4 and PatternCount(_ks;_ds);1;_j2=_c3 and PatternCount(_ks;_c3);1;_j2=_c2 and PatternCount(_ks;_c2);1;_j2=_c5 and PatternCount(_ks;_dr);1;_j2=_c7 and PatternCount(_ks;_c7);1;_j2=_c9 and PatternCount(_ks;_c9);1;_j2=_c8 and PatternCount(_ks;_c8);1;0);_k5=Case(_kl<>_ct;0; not IsEmpty(_k3);1;0);_kw=_kw+_k3;_kx=_kx+_k4;_ky=_ky+_k5;_kz=Case(_kl<>_cr;\"\";IsEmpty(_kz);_k3;IsEmpty(_k3);_kz;Min(GetAsNumber(_k3);GetAsNumber(_kz)));_k0=Case(_kl<>_cs;\"\";IsEmpty(_k0);_k3;IsEmpty(_k3);_k0;Max(GetAsNumber(_k3);GetAsNumber(_k0)));_jq=_jq+1];Case( not _ku;\"\";_kl=_cp;GetAsNumber(_kw);_kl=_cq;GetAsNumber(_kx);_kl=_cr;GetAsNumber(_kz);_kl=_cs;GetAsNumber(_k0);_kl=_ct and _ky=0;\"\";_kl=_ct;_kw&_i&_ky;\"\"));_d=_bm;While([_k6=_b;_k7=JSONGetElement(_k6;_bz);_k7=Case(IsEmpty(_k7);\"{}\";_k7);_k8=JSONGetElement(_k6;_b0);_k8=Case(IsEmpty(_k8);\"{}\";_k8);_k9=_c-1;_la=_e;_lb=_la;_gj=Case(_f=_d5;_k8;_f);_gl=_g;_lc=List(_cp;_cr;_cs;_ct;_cp&_cu;_cr&_cu;_cs&_cu;_ct&_cu;_cx;_cw;_cq);_jq=0;_jr=ValueCount(JSONListKeys(_gl;\"\"));_ld=_gj;_le=0];_jq<_jr;[_lf=JSONGetElement(_gl;_jq);_lg=JSONGetElement(_lf;_dw);_lh=JSONGetElement(_lf;_dx);_li=JSONGetElement(_lf;_dz);_lj=JSONGetElement(_lf;_dy);_j2=Case(IsEmpty(_lj);_1;_lj=_c0;_2;_lj=_c4;_1;_lj=_c1;_3;_lj=_c8;_4;_lj=_c9;_5;_lj=_c7;_6;_lj);_lk=JSONGetElement(_lf;_d0);_ll=_lg=_d1;_lm=_lg=_d2;_ln=_lh=_d1;_lo=_lh=_d4;_lp=_ln and _lg=_d3;_le=_le or _lo;_lq=Case(_lm;_k9;_ll and IsEmpty(_lb);_k9;_ll;_lb;JSONQuery(_k8;_k7;_bo;_lg;_li;_lk));_lr=IsEmpty(_lq);_ls=Case( not _lr;_j2;_j2=_1;_1;_6);_ld=Case(_lo;Let([_hy=JSONSetElement(\"[]\";0;_lq;_1)];Middle(_hy;2;Length(_hy)-2));_le;_ld;_ln;_ld;JSONSetElement(_ld;_lh;_lq;_ls));_la=Case(_lp;\"\";_ln;_lq;_la);_jq=_jq+1];Case(IsEmpty(_la);\",\"&_ld;Let([_hy=JSONSetElement(\"[]\";0;_la;_1);_lt=Middle(_hy;2;Length(_hy)-2)];\",\"&_lt&\":\"&_ld)));_d=_bo;Let([_lu=_b;_lv=_c;_lw=_e;_lx=Trim(_lw);_li=_f;_lk=_g;_ly=Position(_lx;\"(\";0;1);_lz=Case(_ly<2;0;Right(_lx;1)<>\")\";0;Let([_l0=Trim(Left(_lx;_ly-1));_l1=List(_cp;_cp&_cu;_cr;_cr&_cu;_cs;_cs&_cu;_ct;_ct&_cu;_cq;_cw;_cx);_l2=ValueCount(FilterValues(_l0;_l1))>0];_l2));_l3=Case( not _lz;_lw;Let([_l4=Replace(_lx;1;_ly;\"\");_l5=Trim(Left(_lx;_ly-1));_l6=Position(_l4;_cy;0;1);_l7=Case(_l6;Left(_l4;_l6-1);Left(_l4;Length(_l4)-1));_l8=Trim(_l7);_l9=_l5&\"(\";_ma=Case(_l6;Replace(_l4;1;_l6-1;\"\");\")\")];_l8&_i&_l9&_i&_ma));_mb=GetValue(_l3;1);_mc=GetValue(_l3;2);_md=GetValue(_l3;3);_kb=Substitute(_mb;[\" \";\"\"]);_me=PatternCount(_kb;_b1)>0;_mf=_me or _lz;_mg=PatternCount(_mb;_b2);_mh=_mg*Length(_b2);_mi=Case(_mh=0;1;Let([_mj=Left(_mb;_mh);_mk=Substitute(_mj;_b2;\"\")];IsEmpty(_mk)));_ml=(_mg>0);_mm=Replace(_mb;1;_mh;\"\");_mn=_mc&_mm&_md;_mo=Case(IsEmpty(_lk);0; not _mf;0;_lz;0;Left(JSONGetElement(_lk;_dt);1)<>\"[\";0;1);_mp=Case(_mo;JSONSetElement(_lk;_dv;_mn;_1);\"\");_mq=Case(_mo;_mp;_mn);_mr=Case(_ml;Let([_ms=JSONGetElement(_lv;_bw);_mt=_ms-_mg;_mu=JSONGetElement(_lv;_by&\".\"&_mt)];_mu);_lu);_mv=Case(IsEmpty(_mn);\"\";IsEmpty(_mr);\"\"; not _mi;\"\";_mf;Let([_il=Substitute(_mr;[_v;_h&\"n\"];[_u;_h&\"r\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q]);_mw=\"[\"&_il&\"]\";_mx=Substitute(_mq;[_v;_h&\"n\"];[_u;_h&\"r\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q]);_iw=JSONQuery(_mw;\"\";_cd;\"\";\"\";_mx);_ix=Substitute(_iw;[_q;_r];[_h&_h;_s];[_l;_w];[_k;_w];[_n;_x];[_m;_x];[_h&\"r\";_u];[_h&\"n\";_v])];_ix);JSONGetElement(_mr;_mn))];Case(IsEmpty(_lw);_li;IsEmpty(_mv);_li;_mv));_d=_bp;Let([_my=_b;_mz=_c;_m0=Substitute(_mz;\"_\";_i);_m1=GetValue(_m0;1);_m2=GetValue(_m0;2);_m3=Substitute(_my;[\"-\";_i];[\"/\";_i];[\".\";_i];[\"+\";_i]);_m4=GetValue(_m3;1);_m5=GetValue(_m3;2);_m6=GetValue(_m3;3);_m7=Case(_m2=_db;Date(_m5;_m6;_m4);_m2=_dc;Date(_m6;_m5;_m4);_m2=_dd;Date(_m4;_m5;_m6);_m2=_de;Date(_m5;_m4;_m6);\"\");_m8=Case(_m1=_dg;GetAsNumber(_m7);_m1=_di;Day(_m7);_m1=_dk;Month(_m7);_m1=_dm;Year(_m7);\"\")];_m8);_d=_bq;Let([_ik=_b;_mb=_c;_l5=_e;_m1=_f;_lh=_g;_m2=Case(ValueCount(FilterValues(_m1;_do))=1;_m1;\"\");_m9=Case(ValueCount(FilterValues(_m1;_d7))=1;_m1;\"\");_na= not IsEmpty(_m2);_nb= not IsEmpty(_m9);_nc=(_m1=_2);_nd=(_m1=_1);_ne=Case(IsEmpty(_m1);1;_nb;1;0);_nf=Case(_na;0;_nc;0;_nd;0;_ne;0;1);_ng=JSONFormatElements(_ik);_nh=Case(_nf;_z&\"Invalid ValueType parameter supplied.\";IsEmpty(_mb);_z&\"Missing TargetPath parameter.\";Left(_ng;1)=\"?\";_z&\"Invalid JSON supplied.\";\"\");_hu= not IsEmpty(_nh);_ni=Left(_ng;1)=\"{\";_nj=Case(_ni and IsEmpty(_lh);\"{}\";\"[]\");_nk=Case(_na;_l5&\"( \"&_mb&_cy&_m2&\" )\";_nb;_l5&\"( \"&_mb&_cy&_m9&\" )\";_nc;_l5&_cu&\"( \"&_mb&\" )\";_nd;_l5&_cv&\"( \"&_mb&\" )\";_ne;_l5&\"( \"&_mb&\" )\");_nl=Case(_hu;\"\";JSONQuery(_ik;\"\";_cd;\"\";\"\";_nk));_nm=Case(Left(_nl;Length(_z))=_z;_nl;\"\");_nn= not IsEmpty(_nm);_no=Case(_hu;\"\";_nn;\"\";IsEmpty(_nl);_nj;_na;JSONQuery(_ik;_mb;_b4;_nl;_m2;_lh);_nb;JSONQuery(_ik;_mb;_b5;_nl;_m9;_lh);_nc;JSONQuery(_ik;_mb;_b4;_nl;_2;_lh);_nd;JSONQuery(_ik;_mb;_b5;_nl;_1;_lh);_ne;JSONQuery(_ik;_mb;_b5;_nl;\"\";_lh))];Case(_hu;_nh;_nn;_nm;_no));_d=_bs;Let([_ik=_b;_mb=_c;_m1=_f;_lh=_g;_l5=_cr];JSONQuery(_ik;_mb;_bq;_l5;_m1;_lh));_d=_bt;Let([_ik=_b;_mb=_c;_m1=_f;_lh=_g;_l5=_cs];JSONQuery(_ik;_mb;_bq;_l5;_m1;_lh));_d=_br;Let([_np=_b;_kp=_f;_nq=Case(_kp=_d6;_np;Let([_nr=_kp&\"0123456789\";_ns=Filter(_np;_nr)];Substitute(_ns;_kp;_d6)))];GetAsNumber(_nq));_g=_bu;Let([_nt=\"{\\\"MAP\\\":[{\\\"SOURCE\\\":\\\"\"&_d2&\"\\\",\\\"OUTPUT\\\":\\\"INDEX\\\",\\\"DATA_TYPE\\\":\\\"NUMBER\\\"}]}\";_nu=JSONQuery(_b;_c;_d;_e;_f;_nt);_nv=Left(_nu;Length(_z))=_z];Case(_nv;_nu;JSONQuery(_nu;\"\";\"MATCH_ALL\";\"\";\"\";\"INDEX\")));_g=_bv;Let([_nt=\"{\\\"MAP\\\":[{\\\"SOURCE\\\":\\\"\"&_d1&\"\\\",\\\"OUTPUT\\\":\\\"KEY\\\"}]}\";_nw=JSONQuery(_b;_c;_d;_e;_f;_nt);_nv=Left(_nw;Length(_z))=_z];Case(_nv;_nw;JSONQuery(_nw;\"\";\"MATCH_ALL\";\"\";\"\";\"KEY\"))))))",
      "FixElement": "Let ( [\r\r\t// unique character pairs that cannot appear in the ~param\r\tUC1 = 0 & Char ( 1 ) ;\r\tUC2 = 0 & Char ( 2 )\r\r] ;\r\rIf ( ~serialNum ;\r\r\t// add serial number to the object name\r\tUC1 & Right ( \"00\" & ~serialNum ; 3 ) & UC2 & ~param ;\r\r\t// remove all serial numbers from the resulted JSON data\r\tLet ( [\r\t\t// encode the unique character pairs in JSON format\r\t\tJC1 = JSONSetElement ( \"[]\" ; 0 ; UC1 ; 1 ) ;\r\t\tJC2 = JSONSetElement ( \"[]\" ; 0 ; UC2 ; 1 ) ;\r\t\tJC1 = Middle ( JC1 ; 3 ; Length ( JC1 ) - 4 ) ;\r\t\tJC2 = Middle ( JC2 ; 3 ; Length ( JC2 ) - 4 ) ;\r\t\t// move sereial numbers to separate lines\r\t\tLST = Substitute (\r\t\t\t~param ;\r\t\t\t[ JC1 ; ¶& JC1 ] ;\r\t\t\t[ JC2 ; ¶& JC2 ]\r\t\t) ;\r\t\t// remove lines with serial numbers\r\t\tLST = FilterValues (\r\t\t\tLST ;\r\t\t\tSubstitute ( LST ; ¶& JC1 ; ¶& JC2 )\r\t\t) ;\r\t\t// remove extra CRs\r\t\tRSLT = Substitute ( LST ; ¶& JC2 ; \"\" )\r\t] ;\r\t\t// remove last CR\r\t\tLeft ( RSLT ; Length ( RSLT ) - 1 )\r\t)\r\r) )",
      "Map": "While ( \r           [ //Initial Variables\r\r               ~result = \"\";\r\r               ~vid = Get ( UUIDNumber );  //variable id\r\r               $fData[~vid] = JSONFormatElements ( ~data );\r\r               ~dataIndicator = Left ( $fData[~vid] ; 1 ) ;\r\r               ~isValidData = Case ( \r                                                 ~dataIndicator = \"[\" ; 1 ; \r                                                 ~dataIndicator = \"{\" ; 2 ;\r                                                 0\r                                               );\r\r              ~dataKeys = JSONListKeys ( $fData[~vid] ; \"\" );\r\r               ~dataLength = ValueCount ( ~dataKeys );\r\r               ~index = 0;\r\r               ~resultIndex = 0;\r\r               ~index = Case ( ~isValidData ; ~index ; ~dataLength + 1 ) //last chance to bail out  \r\r           ] ; //Condition\r\r               ~index < ~dataLength ; \r\r           [ //Logic\r\r               ~key = GetValue (\r                                             ~dataKeys ; \r                                             ~index + 1 \r                                          );\r\r               ~value = Case ( \r                                        ~isValidData = 1 ;  \r                                        JSONGetElement ( $fData[~vid] ; \"[\" & ~key & \"]\" ); \r                                        ~isValidData = 2 ;  \r                                        JSONGetElement ( $fData[~vid] ; ~key ) \r                                      );\r\r               ~item = Case ( \r                                        ~isValidData = 1 ; \r                                        Case ( \r                                                    Left ( ~value ; 1 ) = \"[\" ; ~value ; \r                                                    Left ( ~value ; 1 ) = \"{\" ; ~value  ; \r                                                    Quote ( ~value ) \r                                                 ); \r                                         ~isValidData = 2 ; Quote ( ~key ) & \":\" & Quote ( ~value )\r                                     );\r\r               //this is the boolean test to see if the element is included in new array\r               ~operation = Evaluate ( \r                                            Substitute ( \r                                                              ~calculationString ; \r                                                              [\"\\'\" ; \"#@^\"]; \r                                                              [\"'\" ; \"\\\"\"];\r                                                              [\"#@^\" ; \"'\"];\r                                                              [\"@value\" ; Quote( ~value )];\r                                                              [\"@key\" ; Quote( ~key )];\r                                                              [\"@index\" ; ~index ];\r                                                              [\"@data\";\"$fData[\" & ~vid & \"]\"]\r                                                             )\r                                          );\r\r                 ~result = Case ( \r                                          ~operation = \"?\" ; \"Error\" ; \r                                          Case ( \r                                                    ~index = 0 ; \r                                                    ~operation ;\r                                                    ~result & \", \" & ~operation\r                                                   )\r                                         );\r\r                 ~index = ~index + 1\r\r             ] ; //Result\r\r                 Case ( \r                           ~isValidData ;\r                           Case ( \r                                       ~result = \"Error\" ; \r                                       \"Error in operationString\" ; \r                                       not IsEmpty ( ~result ) ; \r                                       Case ( \r                                                  ~isValidData = 1 ; \"[\" & ~result  & \"]\" ; \r                                                  ~isValidData = 2 ; \"{\" & ~result  & \"}\" \r                                                )                                            \r                                   ) ;\r                            \"Error in array data\" \r                          )\r\r        )",
      "Object": {
        "ContainsKey": "Case ( PatternCount ( ~keyName ; \".\" ) > 0 and Length ( ~keyName ) >= 3 ; \r\r\tTT.Json.Object.ContainsKey ( JSONGetElement ( ~jsonObject ; GetValue ( Substitute ( ~keyName ; \".\" ; ¶ ) ; 1 ) ) ; Middle ( ~keyName ; Position ( ~keyName ; \".\" ; 1 ; 1 ) + 1 ; Length ( ~keyName ) ) )\r\r;\r\rLet ( [\r\r\tkeys = JSONListKeys ( ~jsonObject ; \"\" )\r\r] ;\r\r\tnot IsEmpty ( FilterValues ( ~keyName ; keys ) )\r\r)\r)",
        "Merge": "Let(\r[\r\r~sourceKeys = JSONListKeys ( ~sourceObject ; \"\" );\r~targetKeys = JSONListKeys ( ~targetObject ; \"\" )\r\r];\rCase(\r\r\t//look for error ans exit\r\tLeft(~sourceKeys; 1) = \"?\" ; ~sourceKeys & \" In Source.\";\r\tLeft(~targetKeys; 1) = \"?\" ; ~targetKeys  & \" In Target.\" ;\r\tLeft(  JSONGetElement ( ~sourceObject ; \"\" )  ;1) = \"[\" ; \"? * Array in Source. Must be an object\" ;\r\r\t// look for the last recusion  and exit\r\tValueCount ( ~sourceKeys) < 1  ; ~targetObject ; // done\r\r \r\tLet(\r\t[\r\r       // merge this rounds key into the target\r\t~thisKey = GetValue ( ~sourceKeys ; 1 ) ;\r\t~thisValue = JSONGetElement( ~sourceObject ; ~thisKey ) ;\r\t~firstChar = Left ( ~thisValue ; 1 ) ;\r\t~needToCheckForNumber = Filter ( ~firstChar ; \"0123456789\" ) = ~firstChar ; \r\t\r        ~newTarget = JSONSetElement ( ~targetObject ; ~thisKey ; ~thisValue ; TT.Json.Type ( ~thisValue ) );\r\r\t// remove this rounds key from the source\r\t~newSource = JSONDeleteElement ( ~sourceObject ; ~thisKey )\r\t] ; \r\r\t// repeat\r\tTT.Json.Object.Merge ( ~newTarget ; ~newSource ) \r       ) \r)\r\r)"
      },
      "Paths": "Let(\r[\rvLoop        = ~loop + 1 ;\r\rvChar1       = Left( ~json ; 1 ) ;\rvChildren    = Case( vChar1 = \"[\" or vChar1 = \"{\" ; JSONListKeys ( ~json ; \"\" ) ) ;\r\rvChild       = GetValue( vChildren ; vLoop ) ;\rvChild       = If ( PatternCount ( vChild ; \".\" ) and Left ( vChild ; 1 ) ≠ \"[\" ; \"['\" & vChild & \"']\" ; vChild ) ;\rvChildWithArrayBrackets = Case( vChar1 = \"[\" and not IsEmpty( vChild ) ; \"[\" & vChild & \"]\" ; vChild ) ;\rvChildPath   = ~rootPath & Case( not IsEmpty( ~rootPath ) and not IsEmpty( vChildWithArrayBrackets ) and vChar1 ≠ \"[\" ; \".\" ) & vChildWithArrayBrackets\r];\r\r\rCase(\r/* 1.a: This is a node -> Recurse -> Paths to children of branch */\rnot IsEmpty( vChild ) ; \rCase( not ~loop and not IsEmpty( ~rootPath ) ; ~rootPath & \"¶\" ) &\rTT.Json.Paths( JSONGetElement ( ~json ; vChild ) ; vChildPath ; \"\" ) ;\r\r\r/* 1.b: This is a leaf */\rvChildPath & Case( not IsEmpty( vChildPath ) ; \"¶\" )\r) &\r\r/* Loop over remaining branches */\rCase( vLoop < ValueCount( vChildren ) ; TT.Json.Paths ( ~json ; ~rootPath ; vLoop ) )\r\r)",
      "Query": "Case(Floor(GetAsNumber(Get(ApplicationVersion)))<18;\"?ERROR: This Custom Function requires a minimum FMP version of v18.\";Let([\r\r\t_MAX_RECURSIONS = 50000 ;\r\r_b=Json;_c=TargetPath;_d=Operator;_e=ComparisonValue;_f=ValueType;_g=ResultPath;_h=\"\\\\\";_i=Char(13);_j=Char(10);_k=Char(8232);_l=_h&\"u2028\";_m=Char(8233);_n=_h&\"u2029\";_o=\"\\\"\";_p=\"'\";_q=\"#\";_r=\"#E\";_s=\"#B\";_t=\"#Q\";_u=\"#R\";_v=\"#N\";_w=\"#S\";_x=\"#P\";_y=\"@!@#$%$%^\";_z=\"?ERROR: \";_0=21;_1=JSONString;_2=JSONNumber;_3=JSONBoolean;_4=JSONArray;_5=JSONObject;_6=JSONNull;_7=\"DATE_\";_8=\"NUMBER_OR_NUMERIC_STRING\";_9=List(_1;_2;_3;_6;_8);_ba=\"#M\";_bb=\"#D\";_bc=\"9\";_bd=\"91\";_be=\"92\";_bf=\"93\";_bg=\"94\";_bh=\"95\";_bi=\"_F1\";_bj=\"_F2\";_bk=\"_F3\";_bl=\"_F4\";_bm=\"_F5\";_bn=\"_F6\";_bo=\"_F7\";_bp=\"_F8\";_bq=\"_F9\";_br=\"_F10\";_bs=\"IS_MIN_VALUE\";_bt=\"IS_MAX_VALUE\";_bu=\".INDEXES.\";_bv=\".KEYS.\";_bw=\"DEPTH\";_bx=\"INCLUDE_HIST\";_by=\"HIST\";_bz=\"PREV\";_b0=\"SRC\";_b1=\"[*]\";_b2=\"../\";_b3=\"./\";_b4=\"EQUALS\";_b5=\"NUMERIC_EQUALS\";_b6=\"EXACT\";_b7=\"LIKE\";_b8=\"BEGINS_WITH\";_b9=\"ENDS_WITH\";_ca=\"IN\";_cb=\"CONTAINS\";_cc=\"CONTAINS_CASE_SENSITIVE\";_cd=\"MATCH_ALL\";_ce=\">\";_cf=\">=\";_cg=\"<\";_ch=\"<=\";_ci=\"...\";_cj=\"...x\";_ck=\"x...\";_cl=\"x...x\";_cm=List(_cl;_cj;_ck;_ci);_cn=List(_ce;_cf;_cg;_ch;_cm);_co=List(_b4;_b5;_b6;_b7;_b8;_b9;_ca;_cd;_cb;_cc;_cn);_cp=\"SUM\";_cq=\"COUNT\";_cr=\"MIN\";_cs=\"MAX\";_ct=\"AVG\";_cu=\"#\";_cv=\"$\";_cw=\"LIST\";_cx=\"LIST_DISTINCT\";_cy=\";\";_cz=13;_c0=\"NUMBER\";_c1=\"BOOLEAN\";_c2=\"FALSE\";_c3=\"TRUE\";_c4=\"STRING\";_c5=\"EMPTY_STRING\";_c6=\"NON_EMPTY_STRING\";_c7=\"NULL\";_c8=\"ARRAY\";_c9=\"OBJECT\";_da=\"ALL\";_db=\"YYYYMMDD\";_dc=\"YYYYDDMM\";_dd=\"MMDDYYYY\";_de=\"DDMMYYYY\";_df=List(_db;_dc;_dd;_de);_dg=\"DATE\";_dh=_dg&\"_\"&Substitute(_df;_i;_i&_dg&\"_\");_di=\"DAY\";_dj=_di&\"_\"&Substitute(_df;_i;_i&_di&\"_\");_dk=\"MONTH\";_dl=_dk&\"_\"&Substitute(_df;_i;_i&_dk&\"_\");_dm=\"YEAR\";_dn=_dm&\"_\"&Substitute(_df;_i;_i&_dm&\"_\");_do=List(_dh;_dj;_dl;_dn);_dp=List(_c0;_c2;_c3;_c5;_c6;_c7;_c8;_c9);_dq=List(_c0;_c1;_c6;_c8;_c9);_dr=\"EMPTY_STR\";_ds=\"NON_TRIVIAL_STR\";_dt=\"MAP\";_du=\"TEMPLATE\";_dv=\"BASE_PATH\";_dw=\"SOURCE\";_dx=\"OUTPUT\";_dy=\"DATA_TYPE\";_dz=\"DEFAULT\";_d0=\"TRANSFORM\";_d1=\".KEY.\";_d2=\".INDEX.\";_d3=\".REMOVE.\";_d4=\".OUTPUT.\";_d5=\".SELF.\";_d6=Left(1/2;1);_d7=List(\",\";\".\");_d8=_d=_bi or _d=_bj or _d=_bk or _d=_bl or _d=_bm or _d=_bn or _d=_bo or _d=_bp or _d=_bs or _d=_bt or _d=_bq or _d=_br or _g=_bu or _g=_bv];Case( not _d8;SetRecursion(While([_d9=Left(_b;Length(_y))=_y;_ea=Case(_d9;GetValue(_b;1));_eb=Case(_d9;Replace(_b;1;Length(_ea)+1;\"\");_b);_ec=Case(_d9;Replace(_ea;1;Length(_y);\"\");\"{}\");_ed=JSONGetElement(_ec;_bw)+0;_ee=Case(_d9;GetAsBoolean(JSONGetElement(_ec;_bx));Left(Trim(_g);1)<>\"{\";0;PatternCount(_g;_b2)=0;0;1);_ef=_ed+1;_ec=JSONSetElement(_ec;[_bw;_ef;_2];[_bx;_ee;_3]);_eg=_by&\".\"&_ef;_eh=Let([_ei=Substitute(_eb;[_q;_r];[_h&_h;_s];[_l;_w];[_k;_w];[_n;_x];[_m;_x]);_ej=JSONGetElement(\"[\"&_ei&\"]\";0)];Substitute(_ej;[_h&\"r\";_u];[_h&\"n\";_v];[_h&_o;_t];[_o&\"}\";_bb&_o&\"}\"];[_o&\"]\";_bb&_o&\"]\"];[_o&\",\";_bb&_o&\",\"];[_t;_h&_o]));_ek=_d;_el=(_ek=_cd);_em=Case(_ek=_cb;1;_ek=_cc;1;0);_en=Case(_ek=_b7;1;_ek=_b8;1;0);_eo=Case(_en;1;_ek=_b9;1;_ek=_ca;1;_em;1;0);_ep=Case(_en;1;_ek=_b9;1;_em;1;0);_eq=Case(_ek=_b5;1;0);_er=Case(ValueCount(FilterValues(_f;_do))>0;_f;\"\");_es= not IsEmpty(_er);_et=Case( not _es;0;ValueCount(FilterValues(_f;_dh))>0;1;0);_eu=ValueCount(FilterValues(_ek;_cn));_ev=ValueCount(FilterValues(_ek;_cm));_ew=(_f=_2);_ex=(_f=_1 or _es);_ey=GetValue(_e;1);_ez=GetValue(_e;2);_e0=GetAsNumber(Case(_et;GetAsDate(_ey);_ey));_e1=GetAsNumber(Case(_et;GetAsDate(_ez);_ez));_e2=Case(_eq;1;_eu;1;_ev;1;0);_e3=Case( not _e2;\"\";ValueCount(FilterValues(_f;_d7))=1;_f;\"\");_e4= not IsEmpty(_e3);_e5=Case( not _e2;0; not _e4;0;_e3=_d6;0;1);_e6=Case(_es;_1;_e4;_8; not IsEmpty(_f);_f;_e2;_8;_1);_e7=Case( not _e2;0;_e6=_8;1;_e6=_1;1;0);_e8=_f;_e9=Case(_et;GetAsNumber(_e);_es and _ek<>_ca;GetAsNumber(_e);_e6=_2;GetAsNumber(_e);_e7;GetAsNumber(_e);_ek=_ca or _e6=_1;Let([_ei=Substitute(_e;[_q;_r];[_h;_s];[_k;_w];[_m;_x];[_j;_v])];Case(_ek=_ca;UniqueValues(_ei;1;\"Unicode_Raw\");Substitute(_ei;[_i;_u])));_e);_fa=Case(_ek=_ca;Substitute(_e9;\" \";\"\");\"\");_fb=TT.Json.Query(\"\";_c;_bl;\"\";\"\";\"\");_fc=GetValue(_fb;3);_fd=GetValue(_fb;4);_fe=IsEmpty(_fd);_ff= not _fe;_fg=Case(_el;\"\";TT.Json.Query(_fc;\"\";_bi;\"\";\"\";\"\"));_fh=Case(Right(_c;1)<>\"]\";0;Right(Substitute(_c;\" \";\"\");2)=\"']\";0;1);_fi=Left(JSONFormatElements(_g);1)=\"{\";_fj= not _fi;_fk=Case(_fj;\"\";_g);_fl=Case(_fj;\"\";Substitute(_fk;[_q;_r];[_h&_h;_s];[_l;_w];[_n;_x];[_h&\"r\";_u];[_h&\"n\";_v]));_fm=Case(_fi;\"\";Let([_fn=Substitute(_g;[\" \";\"\"])];Case(Right(_fn;1)<>\")\";\"\";Left(_fn;Length(_cp)+1)=_cp&\"(\";_cp;Left(_fn;Length(_cq)+1)=_cq&\"(\";_cq;Left(_fn;Length(_cr)+1)=_cr&\"(\";_cr;Left(_fn;Length(_cs)+1)=_cs&\"(\";_cs;Left(_fn;Length(_ct)+1)=_ct&\"(\";_ct;Left(_fn;Length(_cp)+Length(_cu)+1)=_cp&_cu&\"(\";_cp&_cu;Left(_fn;Length(_cq)+Length(_cu)+1)=_cq&_cu&\"(\";_cq&_cu;Left(_fn;Length(_cr)+Length(_cu)+1)=_cr&_cu&\"(\";_cr&_cu;Left(_fn;Length(_cs)+Length(_cu)+1)=_cs&_cu&\"(\";_cs&_cu;Left(_fn;Length(_ct)+Length(_cu)+1)=_ct&_cu&\"(\";_ct&_cu;Left(_fn;Length(_cp)+Length(_cv)+1)=_cp&_cv&\"(\";_cp&_cv;Left(_fn;Length(_cq)+Length(_cv)+1)=_cq&_cv&\"(\";_cq&_cv;Left(_fn;Length(_cr)+Length(_cv)+1)=_cr&_cv&\"(\";_cr&_cv;Left(_fn;Length(_cs)+Length(_cv)+1)=_cs&_cv&\"(\";_cs&_cv;Left(_fn;Length(_ct)+Length(_cv)+1)=_ct&_cv&\"(\";_ct&_cv;Left(_fn;Length(_cw)+1)=_cw&\"(\";_cw;Left(_fn;Length(_cx)+1)=_cx&\"(\";_cx;\"\")));_fo=Case(IsEmpty(_fm);\"\";Let([_fp=Position(_g;\"(\";0;1)+1;_fq=Position(_g;\")\";Length(_g);-1);_fr=Middle(_g;_fp;_fq-_fp)];Substitute(_fr;_cy;_i)));_fs=RightValues(_fo;ValueCount(_fo)-1);_ft=Case(_fi;JSONGetElement(_fl;_dv);IsEmpty(_fm);_g;Trim(GetValue(_fo;1)));_fu=Substitute(_fm;[_cu;\"\"];[_cv;\"\"]);_fv= not IsEmpty(FilterValues(_fu;List(_cp;_cr;_cs;_ct)));_fw=(_fm=_cw) or (_fm=_cx);_fx=(_fm=_cq);_fy=(_fu=_ct);_fz=Case( not _fv;\"\";Right(_fm;1)=_cu;1;0);_f0=Case( not _fv;\"\";Right(_fm;1)=_cv;1;0);_f1=Case( not _fv;\"\";Let([_f2=Trim(GetValue(_fs;1))];Case(ValueCount(FilterValues(_f2;_d7))=1;_f2;\"\")));_f3= not IsEmpty(_f1);_f4=Case( not _f3;0;_f1=_d6;0;1);_f5=Trim(GetValue(_fs;1));_f6=Case( not _fx;\"\";_d9;_f5;Let([_f7=Case( not IsEmpty(_f5);Substitute(_f5;[\",\";_i];[\" \";_i]);_dq);_f8=Case(ValueCount(FilterValues(_c4;_f7))>0;List(_f7;_c5;_c6);_f7);_f8=Case(ValueCount(FilterValues(_c1;_f8))>0;List(_f8;_c2;_c3);_f8);_f8=Case(ValueCount(FilterValues(_da;_f8))>0;_dp;_f8);_f9=FilterValues(_dp;_f8);_ga=Trim(Substitute(_f9;_i;\" \"));_gb=Substitute(_ga;[_c6;_ds];[_c5;_dr])];_gb));_gc=Case( not _fw;\"\";Let([_gd=GetAsNumber(GetValue(_fs;1))];Case(IsEmpty(_gd);Char(_cz);Char(_gd))));_ge=Case( not _fv;\"\";_f3;\"\";Trim(GetValue(_fs;1)));_gf= not IsEmpty(_ge);_gg=Case( not _gf;\"\";_fz;_fm&\" aggregate can not be applied to a date string.\";IsEmpty(FilterValues(_ge;_do));\"Unsupported Date Format parameter supplied for \"&_fm&\" aggregate.\"; not IsEmpty(FilterValues(_ge;_dh)) and _fu=_cp;_cp&\" aggregate can not be applied to a full date.\";\"\");_gh=Case( not _gf;0;IsEmpty(FilterValues(_ge;_dh));0;1);_gi=Case( not _gh;0;_d9;0;1);_gj=Case(_fj;\"\";Let([_gk=JSONGetElement(_fl;_du)];Case(IsEmpty(_gk);\"{}\";_gk)));_gl=Case(_fj;\"\";JSONGetElement(_fl;_dt));_gm=Case(_fj;\"\";IsEmpty(_gl);\"ResultPath is JSON, but no harvest map data supplied.\";Left(JSONFormatElements(_gl);1)=\"?\";\"Supplied harvest map is not valid JSON.\";(_gj<>_d5) and Left(JSONFormatElements(_gj);1)=\"?\";\"Supplied harvest template is not valid JSON.\");_gn=Case(_fi and IsEmpty(_gm);While([_go=_gl;_ej=0;_gp=ValueCount(JSONListKeys(_go;\"\"));_gq=\"\";_gr=0;_gs=0];_ej<_gp and IsEmpty(_gq);[_gt=JSONGetElement(_go;_ej);_gq=Case(IsEmpty(JSONGetElement(_gt;_dw));\"Map item must contain a \"&_dw&\" value.\";IsEmpty(JSONGetElement(_gt;_dx));\"Map item is missing \"&_dx&\" value.\");_gu=JSONGetElement(_gt;_dx)=_d1;_gv=JSONGetElement(_gt;_dw)=_d3;_gr=Case(_gu and  not _gv;1;_gr);_gs=Case(_gu and _gv;1;_gs);_ej=_ej+1];List(_gr;_gs;_gq)));_gw=_fi and GetValue(_gn;1);_gx=_fi and GetValue(_gn;2);_gy=Case(_fj;\"\"; not IsEmpty(_gm);_gm;ValueCount(_gn)>2;GetValue(_gn;3);_gw and _gx;\"Map contains conflicting directives to both set and clear object keys.\";\"\");_gz=TT.Json.Query(\"\";_ft;_bl;\"\";\"\";\"\");_g0=GetValue(_gz;1);_g1=GetValue(_gz;2);_g2=GetValue(_gz;3);_g3=GetValue(_gz;4);_g4=GetValue(_gz;5);_g5=GetValue(_gz;6);_g6=GetValue(_gz;7);_g7=Case(_fi;\"\";_el and IsEmpty(_g2);\"\";TT.Json.Query(_g2;\"\";_bi;\"\";\"\";\"\"));_g8=Case(_g4;1;_g1 and _fi;1;0);_g9=Case(_g0;_g6;_g8;_g3;\"\");_ha=Case(IsEmpty(_g9) and  not _fi;Case(_fx;_cq&\"(*)\";\"\");Let([_hb=Substitute(_g9;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q]);_hc=JSONSetElement(_fk;_dv;_hb;_1)];Case(_fx;_fm&\"( \"&_hb&_cy&_f6&\" )\";_fv and _gf;_fm&\"( \"&_hb&_cy&_ge&\" )\";_fv and _f3;_fm&\"( \"&_hb&_cy&_f1&\" )\";_fv;_fm&\"( \"&_hb&\" )\";_fw;_fm&\"( \"&_hb&\" )\";_fi;_hc;_hb)));_hd=Left(Trim(_eh);1)=\"{\";_he=Case(_gx;0;_gw;1;_hd and _fi;1;_hd and IsEmpty(_g);1;0);_hf=_hd;_hg=Case(_ek=_cd;\"\";_eu;\"\";_e7;\"\";Let([_hh=Case(_ff;_fd;_fc);_hi=Right(Substitute(_hh;\" \";\"\");2)=_p&\"]\";_hj=Case(_hi;Position(_hh;\"[\"&_p;Length(_hh);-1)-1;Position(_hh;\".\";Length(_hh);-1));_hk=Case(_hj;Replace(_hh;1;_hj;\"\");_hh);_hl=GetAsBoolean(_e9)];Case(_ek=_ca;TT.Json.Query(_e9;\"\";_bj;\"\";\"\";_hk);List(TT.Json.Query(_ek;_hk;_bk;_e9;_e6;\"\");If(_e6=_3 and _ek=_b4;List(TT.Json.Query(_ek;_hk;_bk;_hl;_1;\"\");TT.Json.Query(_ek;_hk;_bk;_hl;_2;\"\")));If(_e6=_6 and _ek=_b4;TT.Json.Query(_ek;_hk;_bk;\"\";_1;\"\"))))));_hm=ValueCount(_hg);_hn=_i&JSONListValues(_eh;\"\")&_i;_ho=Case(_hf;JSONListKeys(_eh;\"\"));_hp=Case(IsEmpty(_ek);\"Missing Operator parameter.\";IsEmpty(FilterValues(_co;_ek));\"Unsupported Operator parameter.\";IsEmpty(_b);\"Missing Json parameter.\";Left(_hn;2)=_i&\"?\";\"Malformed Json parameter supplied.\";IsEmpty(_c) and _d<>_cd;\"Missing TargetPath parameter.\";Right(Substitute(_c;\" \";\"\");3)=\"[*]\";\"TargetPath parameters with a wildcard array at the end of the path are not supported.\";_eo and _e6<>_1;\"The \"&_ek&\" operator only supports ValueType of: JSONString.\";_ep and IsEmpty(_e9);\"The \"&_ek&\" operator requires a non-empty ComparisonValue argument.\";_ek=_ca and ValueCount(_e9)>_0;\"Maximum number of \"&_ca&\" match values exceeded.\";_ek<>_cd and IsEmpty(FilterValues(_e6;_9));\"Unsupported ValueType parameter.\";_eq and _e6<>_1 and _e6<>_2 and _e6<>_8;\"The \"&_ek&\" operator only supports ValueType of: JSONString, JSONNumber, or \\\"\\\".\"; not IsEmpty(_gg);_gg;_en and _es;\"The \"&_ek&\" operator can not be used against Date values.\";_ek=_b9 and _es;\"The \"&_ek&\" operator can not be used against Date values.\";_ek=_ca and _et;\"The \"&_ca&\" operator can not be used with full Date-string values.\";_e7 and IsEmpty(_e9);\"The \"&_ek&\" operator requires a non-empty numeric ComparisonValue argument.\";_fj and _ek=_cd and IsEmpty(Substitute(_g;[\".\";\"\"]));\"The \\\"MATCH_ALL\\\" operator requires a non-trivial ResultPath parameter.\";_eu and (_e6<>_2 and _e6<>_1 and _e6<>_8 and  not IsEmpty(_e6));\"Unsupported ValueType parameter.\";_eu and IsEmpty(_e0);\"Missing/invalid comparison value.\";_ev and IsEmpty(_e1);\"Missing/invalid range end value.\";_e6=_3 and _e9<>1 and _e9<>0;\"When specifying a ValueType of JSONBoolean, the ComparisonValue argument must be one of: { True, False, 0, 1 }\";_e6=_6 and  not IsEmpty(_e9);\"When specifying a ValueType of JSONNull, the ComparisonValue argument must be empty.\";_fj and IsEmpty(Substitute(_g;[\".\";\"\"])) and (_fv or _fw or _fx);\"Aggregate functions require a non-trivial ResultPath parameter.\";_fj and _fe and _g0;\"Relative ResultPaths can only be used when the TargetPath contains [*]\"; not IsEmpty(_gy);_gy);_hq=Case(_fu=_cr or _fu=_cs or _fu=_ct;\"\";_fu=_cp or _fx;0;\"\");_hr=\"\";_hs=0;_ht=Case(_ek=_cd;1;_eu;1;_es;1;_fh;1;_e7;1;0);_hu= not IsEmpty(_hp);_hv=Trim(_g2)=\"*\" and _fx and _ek=_cd;_hw=Case(_hu;0;_hv;0;1)];_hw;[_hx=Let([_hy=_hn;_hz=_hg];Case( not IsEmpty(_hp);0;_ht;2;_hm<1;0;_hm=1;Position(_hy;_hz;0;1);_hm<4;Min(Let(_h0=Position(_hy;GetValue(_hz;1);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;2);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;3);0;1);Case(_h0;_h0)));Min(Let(_h0=Position(_hy;GetValue(_hz;1);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;2);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;3);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;4);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;5);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;6);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;7);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;8);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;9);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;10);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;11);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;12);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;13);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;14);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;15);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;16);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;17);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;18);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;19);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;20);0;1);Case(_h0;_h0));Let(_h0=Position(_hy;GetValue(_hz;21);0;1);Case(_h0;_h0)))));_h1=_hx>0;_h2=_h1;_h3=Case(_h1;Position(_hn;_i;_hx;-1)+1);_h4=Case(_h1;Position(_hn;_i;_hx;1));_h5=Case(_h1;PatternCount(Left(_hn;_hx);_i));_hs=_hs+(_h5+0);_h6=Case(_hf;_h5);_h7=Case(_h1;Middle(_hn;_h3;_h4-_h3));_h8=Right(_h7;1)=\"}\";_h9=Right(_h7;1)=\"]\";_ia=_h1 and (_h8 or _h9);_ib=Case(_ia;Substitute(_h7;[_bb;\"\"]));_ic=Case(_ia and _fe;JSONGetElement(_ib;_fc));_id=Case(_g0;\"\";_el and IsEmpty(_g2);\"\"; not _ia;\"\";Substitute(_ib;[_q;_r];[_h&_h;_s];[_h&_o;_t];[_bc;_bd];[\"null\";_be];[\"true\";_bf];[\"false\";_bg];[_o&_o;_bh];[\":\"&_o;\":\"&_o&_ba];[\"[\"&_o;\"[\"&_o&_ba];[_o&\"]\";_ba&_o&\"]\"];[_o&\",\";_ba&_o&\",\"];[_t;_h&_o];[_s;_h&_h];[_r;_q]));_ie=Case(_ff;\"\";_el;\"\"; not _ia;\"\";Let([_if=JSONGetElement(_id;_fg);_ig=Case(Left(_if;Length(_ba))=_ba;1;Right(_if;Length(_ba))=_ba;1;0)];Case(_if=_bh;_c5;_if=_bf;_c3;_if=_bg;_c2;_if=_be;_c7;_ig;_c4; not IsEmpty(_if) and Filter(_if;\".0123456789e-+\")=_if;_c0;\"UNSUPPORTED_VALUE\")));_ih=Case(_es and _ie=_c4;TT.Json.Query(_ic;_er;_bp;\"\";\"\";\"\");_e7 and _ie=_c4;Case(_e5;TT.Json.Query(_ic;\"\";_br;\"\";_e3;\"\");GetAsNumber(_ic));_ic);_ii=Case(_ff;Let([_ij=Right(JSONGetElement(_h7;_fc);1)=\"]\";_ik=JSONGetElement(_ib;_fc);_il=Substitute(_ik;[_v;_h&\"n\"];[_u;_h&\"r\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q])];Case(_ij;_il;\"[]\")));_im=Case(_fe;\"\";_eu or _ev;_e;_ek=_ca or _e6=_1;Substitute(_e9;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q]);_e9);_in=Case(_ff;Substitute(_fd;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q]));_io=Case(_g8;Let([_ij=Right(JSONGetElement(_h7;_g2);1)=\"]\";_ik=JSONGetElement(_ib;_g2);_il=Substitute(_ik;[_v;_h&\"n\"];[_u;_h&\"r\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q])];Case(_ij;_il;\"[]\")));_ip=Case(_ff and _ii=\"[]\";0;_ff;Let([_iq=TT.Json.Query(_ii;_in;_ek;_im;_e8;_cq&\"(*)\")];_iq>0);_ek=_cd;1; not _ia;0;_es and _ie<>_c4;0;_es and  not _eu;Case(_ek=_b4;GetAsNumber(_ih)=_e9;_ek=_b6;GetAsNumber(_ih)=_e9;_ek=_ca;Let([_ir=FilterValues(_ih;_fa);_is=ValueCount(_ir)>0];_is);0);_ek=_b4 and  not _es;Case(_ie=_c4 and _e6=_1;(_ih=_e9);_ie=_c0 and _e6=_2;(_ih=_e9);(_ie=_c7 or _ie=_c5) and (_e6=_6 or _e6=_1) and IsEmpty(_e9);1;(_ie=_c3 or _ih=1) and _e6=_3 and _e9=1;1;(_ie=_c2 or _ih=0) and _e6=_3 and _e9=0;1;0);_ek=_b6 and  not _es;Case(_ie=_c0 and _e6=_2;(_ih=_e9);_ie=_c4 and _e6=_1;Exact(_ih;_e9);_ie=_c7 and _e6=_6 and IsEmpty(_e9);1;_ie=_c5 and _e6=_1 and IsEmpty(_e9);1;_ie=_c3 and _e6=_3 and _e9=1;1;_ie=_c2 and _e6=_3 and _e9=0;1;0);_ek=_ca;Case( not IsEmpty(FilterValues(_ih;_e9));1;(_ie=_c5 or _ie=_c7) and PatternCount(_i&_e9;_i&_i);1;0);_en;_ie=_c4 and (Left(_ih;Length(_e9))=_e9);_ek=_b9;_ie=_c4 and (Right(_ih;Length(_e9))=_e9);_eq;Case(_ie<>_c4 and _ie<>_c0;0;_e6=_1 and _ie<>_c4;0;_e6=_2 and _ie<>_c0;0;_ih=_e9;1;0);_ek=_cb;_ie=_c4 and PatternCount(_ih;_e9)>0;_ek=_cc;_ie=_c4 and Substitute(_ih;_e9;\"\")<>_ih;_eu;Case(_ie<>_c0 and _ie<>_c4;0;_ew and _ie<>_c0;0;_ex and _ie<>_c4;0;Let([_it=GetAsNumber(_ih)];Case(IsEmpty(_it);0;_ek=_ce;(_it>_e0);_ek=_cf;(_it>=_e0);_ek=_cg;(_it<_e0);_ek=_ch;(_it<=_e0);_ek=_cl;(_it>_e0) and (_it<_e1);_ek=_cj;(_it>=_e0) and (_it<_e1);_ek=_ck;(_it>_e0) and (_it<=_e1);_ek=_ci;(_it>=_e0) and (_it<=_e1);0)));0);_iu=Case( not _ip;\"\";_g0 or _g8;JSONSetElement(_ec;_eg;_ib;_1);_ec);_hr=Case( not _ip and _fu=_cp;0; not _ip and _fv;\"\"; not _ip and _fx;0; not _ip;\"\";_g0 and _ii=\"[]\";\"\";_g0;Let([_iv=List(_y&_iu;_ii);_iw=TT.Json.Query(_iv;_in;_ek;_im;_e8;_ha);_ix=Substitute(_iw;[_q;_r];[_h&_h;_s];[_l;_w];[_k;_w];[_n;_x];[_m;_x];[_h&\"r\";_u];[_h&\"n\";_v]);_hy=JSONGetElement(\"[\"&_ix&\"]\";0)];Case(_fv;_iw;_fx;_iw;_hy=\"[]\";\"\";\",\"&Middle(_hy;2;Length(_hy)-2)));_g8 and _io=\"[]\";\"\";_g8;Let([_iv=List(_y&_iu;_io);_iw=TT.Json.Query(_iv;\"\";_cd;\"\";\"\";_ha);_ix=Substitute(_iw;[_q;_r];[_h&_h;_s];[_l;_w];[_k;_w];[_n;_x];[_m;_x];[_h&\"r\";_u];[_h&\"n\";_v]);_hy=JSONGetElement(\"[\"&_ix&\"]\";0)];Case(_fv;_iw;_fx;_iw;_hy=\"[]\";\"\";\",\"&Middle(_hy;2;Length(_hy)-2)));_fi and (_ib=\"[]\" or IsEmpty(_ib));\"\";_fi;Let([_iv=JSONSetElement(\"{}\";[_b0;_ib;_1];[_bz;_iu;_1]);_iy=Case(_hf;GetValue(_ho;_h6))];TT.Json.Query(_iv;_hs;_bm;_iy;_gj;_gl));_he;Let([_iy=GetValue(_ho;_h6);_iz=Let([_hy=JSONSetElement(\"[]\";0;_iy;_1)];Middle(_hy;2;Length(_hy)-2))];\",\"&_iz&\":\"&_ib);Trim(_g2)=\"*\" and _fx;1;IsEmpty(_g2) and (_fv or _fx);0;IsEmpty(_g2);\",\"&_ib;Let([_i0=JSONGetElement(_ib;_g2);_i1=JSONGetElement(_id;_g7);_i2=Case(Left(_i1;Length(_ba))=_ba;1;Right(_i1;Length(_ba))=_ba;1;0);_i3=Case(_i1=_bh;_c5;_i1=_bf;_c3;_i1=_bg;_c2;_i1=_be;_c7;_i2;_c4;Left(Trim(_i1);1)=\"[\";_c8;Left(Trim(_i1);1)=\"{\";_c9; not IsEmpty(_i1) and Filter(_i1;\".0123456789e-+\")=_i1;_c0;\"UNRESOLVED_PATH\");_i0=Case(_g5 and _i3<>_c8;\"[]\";_i0);_i4=_gf and _i3=_c4;_i5=Case(_i4;Let([_ej=TT.Json.Query(_i0;_ge;_bp;\"\";\"\";\"\")];GetAsNumber(_ej)));_i6= not _i4 and _i3=_c4;_i7=Case(_i6;Let([_ej=Substitute(_i0;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q])];Case(_f4;TT.Json.Query(_ej;\"\";_br;\"\";_f1;\"\");GetAsNumber(_ej))));_i8=Case(_i3=_c4;1;_i3=_c0;1;_i3=_c8 and _g5;1;0);_i9=Case(_fu=_cq;Case(_i3=_c0 and PatternCount(_f6;_c0);1;_i3=_c4 and PatternCount(_f6;_ds);1;_i3=_c3 and PatternCount(_f6;_c3);1;_i3=_c2 and PatternCount(_f6;_c2);1;_i3=_c5 and PatternCount(_f6;_dr);1;_i3=_c7 and PatternCount(_f6;_c7);1;_i3=_c9 and PatternCount(_f6;_c9);1;_i3=_c8 and _g5 and _i0=\"[]\";0;_i3=_c8 and _g5;TT.Json.Query(_i0;_i1;_bn;_cq;(0&_i&0&_i&\"\"&_i&\"\");_f6);_i3=_c8 and PatternCount(_f6;_c8);1;0);_fu=_cp;Case(_i3=_c0 and _f0;0;_i3=_c0;_i0;_i3=_c4 and _fz;0;_i4;_i5;_i6;_i7+0;_i3=_c8 and _g5;TT.Json.Query(_i0;_i1;_bn;_cp;(_fz&_i&_f0&_i&_ge&_i&_f1);\"\");0);_fu=_cr or _fu=_cs;Case(_i3=_c0 and _f0;\"\";_i3=_c0;_i0;IsEmpty(_i0);\"\";_i3=_c4 and _fz;\"\";_i4;_i5;_i6;_i7;_i3=_c8 and _g5;TT.Json.Query(_i0;_i1;_bn;_fu;(_fz&_i&_f0&_i&_ge&_i&_f1);\"\");\"\");_fu=_ct;Case(_i3=_c0 and _f0;\"\";_i3=_c0;_i0&_i&\"1\";_i3=_c8 and _g5 and _i0=\"[]\";\"\";_i3=_c8 and _g5;TT.Json.Query(_i0;_i1;_bn;_ct;(_fz&_i&_f0&_i&_ge&_i&_f1);\"\");_fz;\"\";_i4;Case(IsEmpty(_i5);\"\";_i5&_i&\"1\");_i6;Case(IsEmpty(_i7);\"\";_i7&_i&\"1\");\"\");_g5 and _i3<>_c8;\"\";_fw and  not _i8;\"\";_i3=\"UNRESOLVED_PATH\";\"\";_i3=_c5;_o&_o;_i3=_c7;\"null\";_i3=_c3;\"true\";_i3=_c2;\"false\";_i3=_c4;Let([_hy=Trim(JSONSetElement(\"[]\";0;_i0;_1))];Middle(_hy;2;Length(_hy)-2));_i3=_c8 and _g5;Middle(Trim(_i0);2;Length(Trim(_i0))-2);_i3=_c8;_i0;_i0)];Case(_fv;_i9;_fx;_i9;IsEmpty(_i9);\"\";\",\"&_i9)));_hq=Case((_fu=_cp or _fx);GetAsNumber(_hq)+GetAsNumber(_hr);_fu=_cr;Min(GetAsNumber(_hq);GetAsNumber(_hr));_fu=_cs;Max(GetAsNumber(_hq);GetAsNumber(_hr));_fu=_ct;Case(IsEmpty(_hr);_hq;Let([_ja=GetAsNumber(GetValue(_hr;1));_jb=GetAsNumber(GetValue(_hr;2));_jc=GetAsNumber(GetValue(_hq;1))+_ja;_jd=GetAsNumber(GetValue(_hq;2))+_jb];_jc&_i&_jd));_hq&_hr);_hn=Case(_h2;Replace(_hn;1;_h4-1;\"\"));_ho=Case(_h2 and _hf;Let([_je=Position(_ho;_i;0;_h6)];Replace(_ho;1;_je;\"\")));_hw=_h2 and Length(_hn)>1];Case(_hu;_z&_hp;_hv;ValueCount(JSONListValues(_eh;\"\"));_fu=_ct;Case(_d9;_hq;Let([_jc=GetAsNumber(GetValue(_hq;1));_jd=GetAsNumber(GetValue(_hq;2));_jf=Case(_jd=0;\"\";_jc/_jd)];Case(IsEmpty(_jf);\"\";_gi;GetAsDate(Truncate(_jf;0));_jf)));_fv and _gi;GetAsDate(GetAsNumber(_hq));_fv or _fx;GetAsNumber(_hq);Let([_jg=Replace(_hq;1;1;\"\");_jh=Case(_he;\"{\"&_jg&\"}\";\"[\"&_jg&\"]\");_ji=JSONFormatElements(_jh);_jj=Case(Left(_ji;1)=\"?\";_z&\"Unexpected parse error while formatting result: \"&_ji);_jk= not _d9;_jl=Case(_jk and _fw;Let([_jm=JSONListValues(_ji;\"\");_jm=Case(_fm=_cx;UniqueValues(_jm;1;\"Unicode_Raw\");_jm);_jm=Case(_fm=_cx and Right(_jm;1)=_i;Left(_jm;Length(_jm)-1);_jm)];Substitute(_jm;[_i;_y];[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q];[_y;_gc]));Substitute(_ji;[_u;_h&\"r\"];[_v;_h&\"n\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q]))];Case(IsEmpty(_jj);_jl;_jj&_i&_i&_i&_jh))));_MAX_RECURSIONS);_d=_bi;While([_hh=_b;_jn=Substitute(_hh;[\"[\";_i&\"[\"];[\"]\";\"]\"&_i]);_jo=_jn;_jp=\"\";_jq=1;_jr=ValueCount(_jo)];_jq<=_jr;[_js=GetValue(_jo;_jq);_jt=Substitute(_js;\" \";\"\");_ju=Left(_js;1)=\"[\" and Left(_jt;2)<>\"['\";_jv=Case(_ju;_js;Substitute(_js;[_bc;_bd];[\"null\";_be];[\"true\";_bf];[\"false\";_bg]));_jp=_jp&_jv;_jq=_jq+1];_jp);_d=_bj;While([_jw=_b;_jx=\"\";_jy=_g;_jq=1;_jr=ValueCount(_jw)];_jq<=_jr;[_jz=GetValue(_jw;_jq);_j0=TT.Json.Query(_b4;_jy;_bk;_jz;_1;\"\");_jx=List(_jx;_j0);_jq=_jq+1];_jx);_d=_bk;Let([_hk=_c;_j1=_e;_j2=_f;_j3=_b;_j4=Case(_j3=_cb;1;_j3=_cc;1;_j3=_b9;1;0);_j5=Case(_j4;\"\";Let([_hy=Trim(JSONSetElement(\"{}\";_hk;_j1;_j2))];Trim(Middle(_hy;2;Length(_hy)-2))));_j6=Length(_j5);_j7=Case(_j4;Let([_jm=JSONSetElement(\"[]\";0;_j1;_1);_j8=Trim(Middle(_jm;2;Length(_jm)-2));_j9=Middle(_j8;2;Length(_j8)-2)];_j9))];Case(_j4;_j7;_j3=_b7 or _j3=_b8;Replace(_j5;_j6;1;\"\");_j2=_1;Replace(_j5;_j6;1;_bb&_o);_j5));_d=_bl;Let([_hh=_c;_ka=Left(_hh;Length(_b3))=_b3;_hh=Case(_ka;Replace(_hh;1;Length(_b3);\"\");_hh);_hh=Substitute(_hh;[_q;_r];[_h;_s];[_k;_w];[_m;_x];[_j;_v];[_i;_u]);_kb=Substitute(_hh;\" \";\"\");_kc=Position(_kb;_b1;0;1);_kd=Position(_hh;\"[\";0;PatternCount(Left(_kb;_kc);\"[\"));_ke=Position(_hh;\"]\";_kd;1);_kf=_kd>0;_kg=Case(_kf;Left(_hh;_kd-1);_hh);_kh=Case(_kf;Replace(_hh;1;_ke;\"\");\"\");_kh=Case(Left(_kh;1)=\".\";Replace(_kh;1;1;\"\");_kh);_g4=_kf and  not IsEmpty(_kh);_g5=Right(_kb;3)=_b1;_g6=_kg&Case(_kf;_b1)&_kh];_ka&_i&_kf&_i&_kg&_i&_kh&_i&_g4&_i&_g5&_i&_g6);_d=_bn;While([_ki=_b;_kj=Substitute(_ki;[_u;_i];[_v;_j];[_x;_m];[_w;_k];[_s;_h];[_r;_q]);_kk=_c;_kl=_e;_km=GetAsBoolean(GetValue(_f;1));_kn=GetAsBoolean(GetValue(_f;2));_ko=GetValue(_f;3);_kp=GetValue(_f;4);_kq=Case(ValueCount(FilterValues(_kp;_d7))=1;1;0);_e5=Case(_km;0; not _kq;0;_kp=_d6;0;1);_kr=Case(IsEmpty(_ko);0;_km;0;_kl=_cq;0;1);_ks=_g;_kt=JSONListKeys(_kj;\"\");_ku=Left(_kt;1)<>\"?\" and Left(Trim(_kj);1)=\"[\";_kv=ValueCount(_kt);_kw=0;_kx=0;_ky=0;_kz=\"\";_k0=\"\";_jq=0];_ku and (_jq<_kv);[_j1=JSONGetElement(_kj;_jq);_k1=JSONGetElement(_kk;_jq);_k2=Case(Left(_k1;Length(_ba))=_ba;1;Right(_k1;Length(_ba))=_ba;1;0);_j2=Case(_k1=_bh;_c5;_k1=_bf;_c3;_k1=_bg;_c2;_k1=_be;_c7;_k2;_c4;Left(Trim(_k1);1)=\"[\";_c8;Left(Trim(_k1);1)=\"{\";_c9; not IsEmpty(_k1) and Filter(_k1;\".0123456789e-+\")=_k1;_c0;\"UNRESOLVED_PATH\");_k3=Case(_kr and _j2<>_c4;\"\";_kr;GetAsNumber(TT.Json.Query(_j1;_ko;_bp;\"\";\"\";\"\"));_j2=_c0 and _kn;\"\";_j2=_c0;_j1;_j2=_c4 and  not _km;Case(_e5;TT.Json.Query(_j1;\"\";_br;\"\";_kp;\"\");GetAsNumber(_j1));\"\");_k4=Case(_kl<>_cq;0;_j2=_c0 and PatternCount(_ks;_c0);1;_j2=_c4 and PatternCount(_ks;_ds);1;_j2=_c3 and PatternCount(_ks;_c3);1;_j2=_c2 and PatternCount(_ks;_c2);1;_j2=_c5 and PatternCount(_ks;_dr);1;_j2=_c7 and PatternCount(_ks;_c7);1;_j2=_c9 and PatternCount(_ks;_c9);1;_j2=_c8 and PatternCount(_ks;_c8);1;0);_k5=Case(_kl<>_ct;0; not IsEmpty(_k3);1;0);_kw=_kw+_k3;_kx=_kx+_k4;_ky=_ky+_k5;_kz=Case(_kl<>_cr;\"\";IsEmpty(_kz);_k3;IsEmpty(_k3);_kz;Min(GetAsNumber(_k3);GetAsNumber(_kz)));_k0=Case(_kl<>_cs;\"\";IsEmpty(_k0);_k3;IsEmpty(_k3);_k0;Max(GetAsNumber(_k3);GetAsNumber(_k0)));_jq=_jq+1];Case( not _ku;\"\";_kl=_cp;GetAsNumber(_kw);_kl=_cq;GetAsNumber(_kx);_kl=_cr;GetAsNumber(_kz);_kl=_cs;GetAsNumber(_k0);_kl=_ct and _ky=0;\"\";_kl=_ct;_kw&_i&_ky;\"\"));_d=_bm;While([_k6=_b;_k7=JSONGetElement(_k6;_bz);_k7=Case(IsEmpty(_k7);\"{}\";_k7);_k8=JSONGetElement(_k6;_b0);_k8=Case(IsEmpty(_k8);\"{}\";_k8);_k9=_c-1;_la=_e;_lb=_la;_gj=Case(_f=_d5;_k8;_f);_gl=_g;_lc=List(_cp;_cr;_cs;_ct;_cp&_cu;_cr&_cu;_cs&_cu;_ct&_cu;_cx;_cw;_cq);_jq=0;_jr=ValueCount(JSONListKeys(_gl;\"\"));_ld=_gj;_le=0];_jq<_jr;[_lf=JSONGetElement(_gl;_jq);_lg=JSONGetElement(_lf;_dw);_lh=JSONGetElement(_lf;_dx);_li=JSONGetElement(_lf;_dz);_lj=JSONGetElement(_lf;_dy);_j2=Case(IsEmpty(_lj);_1;_lj=_c0;_2;_lj=_c4;_1;_lj=_c1;_3;_lj=_c8;_4;_lj=_c9;_5;_lj=_c7;_6;_lj);_lk=JSONGetElement(_lf;_d0);_ll=_lg=_d1;_lm=_lg=_d2;_ln=_lh=_d1;_lo=_lh=_d4;_lp=_ln and _lg=_d3;_le=_le or _lo;_lq=Case(_lm;_k9;_ll and IsEmpty(_lb);_k9;_ll;_lb;TT.Json.Query(_k8;_k7;_bo;_lg;_li;_lk));_lr=IsEmpty(_lq);_ls=Case( not _lr;_j2;_j2=_1;_1;_6);_ld=Case(_lo;Let([_hy=JSONSetElement(\"[]\";0;_lq;_1)];Middle(_hy;2;Length(_hy)-2));_le;_ld;_ln;_ld;JSONSetElement(_ld;_lh;_lq;_ls));_la=Case(_lp;\"\";_ln;_lq;_la);_jq=_jq+1];Case(IsEmpty(_la);\",\"&_ld;Let([_hy=JSONSetElement(\"[]\";0;_la;_1);_lt=Middle(_hy;2;Length(_hy)-2)];\",\"&_lt&\":\"&_ld)));_d=_bo;Let([_lu=_b;_lv=_c;_lw=_e;_lx=Trim(_lw);_li=_f;_lk=_g;_ly=Position(_lx;\"(\";0;1);_lz=Case(_ly<2;0;Right(_lx;1)<>\")\";0;Let([_l0=Trim(Left(_lx;_ly-1));_l1=List(_cp;_cp&_cu;_cr;_cr&_cu;_cs;_cs&_cu;_ct;_ct&_cu;_cq;_cw;_cx);_l2=ValueCount(FilterValues(_l0;_l1))>0];_l2));_l3=Case( not _lz;_lw;Let([_l4=Replace(_lx;1;_ly;\"\");_l5=Trim(Left(_lx;_ly-1));_l6=Position(_l4;_cy;0;1);_l7=Case(_l6;Left(_l4;_l6-1);Left(_l4;Length(_l4)-1));_l8=Trim(_l7);_l9=_l5&\"(\";_ma=Case(_l6;Replace(_l4;1;_l6-1;\"\");\")\")];_l8&_i&_l9&_i&_ma));_mb=GetValue(_l3;1);_mc=GetValue(_l3;2);_md=GetValue(_l3;3);_kb=Substitute(_mb;[\" \";\"\"]);_me=PatternCount(_kb;_b1)>0;_mf=_me or _lz;_mg=PatternCount(_mb;_b2);_mh=_mg*Length(_b2);_mi=Case(_mh=0;1;Let([_mj=Left(_mb;_mh);_mk=Substitute(_mj;_b2;\"\")];IsEmpty(_mk)));_ml=(_mg>0);_mm=Replace(_mb;1;_mh;\"\");_mn=_mc&_mm&_md;_mo=Case(IsEmpty(_lk);0; not _mf;0;_lz;0;Left(JSONGetElement(_lk;_dt);1)<>\"[\";0;1);_mp=Case(_mo;JSONSetElement(_lk;_dv;_mn;_1);\"\");_mq=Case(_mo;_mp;_mn);_mr=Case(_ml;Let([_ms=JSONGetElement(_lv;_bw);_mt=_ms-_mg;_mu=JSONGetElement(_lv;_by&\".\"&_mt)];_mu);_lu);_mv=Case(IsEmpty(_mn);\"\";IsEmpty(_mr);\"\"; not _mi;\"\";_mf;Let([_il=Substitute(_mr;[_v;_h&\"n\"];[_u;_h&\"r\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q]);_mw=\"[\"&_il&\"]\";_mx=Substitute(_mq;[_v;_h&\"n\"];[_u;_h&\"r\"];[_x;_n];[_w;_l];[_s;_h&_h];[_r;_q]);_iw=TT.Json.Query(_mw;\"\";_cd;\"\";\"\";_mx);_ix=Substitute(_iw;[_q;_r];[_h&_h;_s];[_l;_w];[_k;_w];[_n;_x];[_m;_x];[_h&\"r\";_u];[_h&\"n\";_v])];_ix);JSONGetElement(_mr;_mn))];Case(IsEmpty(_lw);_li;IsEmpty(_mv);_li;_mv));_d=_bp;Let([_my=_b;_mz=_c;_m0=Substitute(_mz;\"_\";_i);_m1=GetValue(_m0;1);_m2=GetValue(_m0;2);_m3=Substitute(_my;[\"-\";_i];[\"/\";_i];[\".\";_i];[\"+\";_i]);_m4=GetValue(_m3;1);_m5=GetValue(_m3;2);_m6=GetValue(_m3;3);_m7=Case(_m2=_db;Date(_m5;_m6;_m4);_m2=_dc;Date(_m6;_m5;_m4);_m2=_dd;Date(_m4;_m5;_m6);_m2=_de;Date(_m5;_m4;_m6);\"\");_m8=Case(_m1=_dg;GetAsNumber(_m7);_m1=_di;Day(_m7);_m1=_dk;Month(_m7);_m1=_dm;Year(_m7);\"\")];_m8);_d=_bq;Let([_ik=_b;_mb=_c;_l5=_e;_m1=_f;_lh=_g;_m2=Case(ValueCount(FilterValues(_m1;_do))=1;_m1;\"\");_m9=Case(ValueCount(FilterValues(_m1;_d7))=1;_m1;\"\");_na= not IsEmpty(_m2);_nb= not IsEmpty(_m9);_nc=(_m1=_2);_nd=(_m1=_1);_ne=Case(IsEmpty(_m1);1;_nb;1;0);_nf=Case(_na;0;_nc;0;_nd;0;_ne;0;1);_ng=JSONFormatElements(_ik);_nh=Case(_nf;_z&\"Invalid ValueType parameter supplied.\";IsEmpty(_mb);_z&\"Missing TargetPath parameter.\";Left(_ng;1)=\"?\";_z&\"Invalid JSON supplied.\";\"\");_hu= not IsEmpty(_nh);_ni=Left(_ng;1)=\"{\";_nj=Case(_ni and IsEmpty(_lh);\"{}\";\"[]\");_nk=Case(_na;_l5&\"( \"&_mb&_cy&_m2&\" )\";_nb;_l5&\"( \"&_mb&_cy&_m9&\" )\";_nc;_l5&_cu&\"( \"&_mb&\" )\";_nd;_l5&_cv&\"( \"&_mb&\" )\";_ne;_l5&\"( \"&_mb&\" )\");_nl=Case(_hu;\"\";TT.Json.Query(_ik;\"\";_cd;\"\";\"\";_nk));_nm=Case(Left(_nl;Length(_z))=_z;_nl;\"\");_nn= not IsEmpty(_nm);_no=Case(_hu;\"\";_nn;\"\";IsEmpty(_nl);_nj;_na;TT.Json.Query(_ik;_mb;_b4;_nl;_m2;_lh);_nb;TT.Json.Query(_ik;_mb;_b5;_nl;_m9;_lh);_nc;TT.Json.Query(_ik;_mb;_b4;_nl;_2;_lh);_nd;TT.Json.Query(_ik;_mb;_b5;_nl;_1;_lh);_ne;TT.Json.Query(_ik;_mb;_b5;_nl;\"\";_lh))];Case(_hu;_nh;_nn;_nm;_no));_d=_bs;Let([_ik=_b;_mb=_c;_m1=_f;_lh=_g;_l5=_cr];TT.Json.Query(_ik;_mb;_bq;_l5;_m1;_lh));_d=_bt;Let([_ik=_b;_mb=_c;_m1=_f;_lh=_g;_l5=_cs];TT.Json.Query(_ik;_mb;_bq;_l5;_m1;_lh));_d=_br;Let([_np=_b;_kp=_f;_nq=Case(_kp=_d6;_np;Let([_nr=_kp&\"0123456789\";_ns=Filter(_np;_nr)];Substitute(_ns;_kp;_d6)))];GetAsNumber(_nq));_g=_bu;Let([_nt=\"{\\\"MAP\\\":[{\\\"SOURCE\\\":\\\"\"&_d2&\"\\\",\\\"OUTPUT\\\":\\\"INDEX\\\",\\\"DATA_TYPE\\\":\\\"NUMBER\\\"}]}\";_nu=TT.Json.Query(_b;_c;_d;_e;_f;_nt);_nv=Left(_nu;Length(_z))=_z];Case(_nv;_nu;TT.Json.Query(_nu;\"\";\"MATCH_ALL\";\"\";\"\";\"INDEX\")));_g=_bv;Let([_nt=\"{\\\"MAP\\\":[{\\\"SOURCE\\\":\\\"\"&_d1&\"\\\",\\\"OUTPUT\\\":\\\"KEY\\\"}]}\";_nw=TT.Json.Query(_b;_c;_d;_e;_f;_nt);_nv=Left(_nw;Length(_z))=_z];Case(_nv;_nw;TT.Json.Query(_nw;\"\";\"MATCH_ALL\";\"\";\"\";\"KEY\"))))))",
      "Reduce": "While ( \r           [ //Initial Variables\r\r               ~result = \"\";\r\r               ~vid = Get ( UUIDNumber );  //variable id\r\r               $fData[~vid] = JSONFormatElements ( ~data );\r\r               ~dataIndicator = Left ( $fData[~vid] ; 1 ) ;\r\r               ~isValidData = Case ( \r                                                 ~dataIndicator = \"[\" ; 1 ; \r                                                 ~dataIndicator = \"{\" ; 2 ;\r                                                 0\r                                               );\r\r              ~dataKeys = JSONListKeys ( $fData[~vid] ; \"\" );\r\r               ~dataLength = ValueCount ( ~dataKeys );\r\r               ~index = 0;\r\r               ~resultIndex = 0;\r\r               ~index = Case ( ~isValidData ; ~index ; ~dataLength + 1 ) //last chance to bail out  \r\r           ] ; //Condition\r\r               ~index < ~dataLength ; \r\r           [ //Logic\r\r               ~key = GetValue (\r                                             ~dataKeys ; \r                                             ~index + 1 \r                                          );\r\r               ~value = Case ( \r                                        ~isValidData = 1 ;  \r                                        JSONGetElement ( $fData[~vid] ; \"[\" & ~key & \"]\" ); \r                                        ~isValidData = 2 ;  \r                                        JSONGetElement ( $fData[~vid] ; ~key ) \r                                      );\r\r               ~item = Case ( \r                                        ~isValidData = 1 ; \r                                        Case ( \r                                                    Left ( ~value ; 1 ) = \"[\" ; ~value ; \r                                                    Left ( ~value ; 1 ) = \"{\" ; ~value  ; \r                                                    Quote ( ~value ) \r                                                 ); \r                                         ~isValidData = 2 ; Quote ( ~key ) & \":\" & Quote ( ~value )\r                                     );\r\r                ~operation = Case ( ~index = 0 ; \r                                               Evaluate ( \r                                                               Substitute ( \r                                                                                 ~calculationString ; \r                                                                                 [\"\\'\" ; \"#@^\"]; \r                                                                                 [\"'\" ; \"\\\"\"];\r                                                                                 [\"#@^\" ; \"'\"];\r                                                                                 [\"@value\" ; Quote( ~value )];\r                                                                                 [\"@key\" ; Quote( ~key )];\r                                                                                 [\"@index\" ; ~index ];\r                                                                                 [\"@data\";\"$fData[\" & ~vid & \"]\"];\r                                                                                 [\"@result\"; Quote(~startingValue) ]\r                                                                                )\r                                                             );\r                                               Evaluate ( \r                                                               Substitute ( \r                                                                                ~calculationString ; \r                                                                                 [\"\\'\" ; \"#@^\"]; \r                                                                                 [\"'\" ; \"\\\"\"];\r                                                                                 [\"#@^\" ; \"'\"];\r                                                                                 [\"@value\" ; Quote( ~value )];\r                                                                                 [\"@key\" ; Quote( ~key )];\r                                                                                 [\"@index\" ; ~index ];\r                                                                                 [\"@data\";\"$fData[\" & ~vid & \"]\"];\r                                                                                 [\"@result\"; Quote(~result) ]\r                                                                                )\r                                                             )\r                                               );\r                             \r\r                 ~result = Case ( \r                                          ~operation = \"?\" ; \"Error\" ; \r                                          ~operation \r                                         );\r\r                 ~index = ~index + 1\r\r             ] ; //Result\r\r                 Case ( \r                           ~isValidData ;\r                           Case ( \r                                       ~result = \"Error\" ; \r                                       \"Error in objectTest\" ; \r                                       not IsEmpty ( ~result ) ; \r                                       ~result                                          \r                                   ) ;\r                            \"Error in array data\" \r                          )\r\r        )",
      "Type": "Case (\r TT.Json.isValid ( ~value ) and Left ( ~value ; 1 ) = \"[\" and Right ( ~value ; 1 ) = \"]\" ; JSONArray ;\r TT.Json.isValid ( ~value ) and Left ( ~value ; 1 ) = \"{\" and Right ( ~value ; 1 ) = \"}\" ; JSONObject ;\r~value = \"\" or ~value = \"null\" ; JSONNull ;\rTT.Fm.TypeOf ( ~value ) = \"Number\" ; JSONNumber ;\rJSONString\r)",
      "isValid": "Let (\r[\r~text = TT.Text.SuperTrim ( ~text ) ;\r~isValid = Left ( JSONFormatElements ( ~text ) ; 1 ) ≠ \"?\" ; \r~firstChar = Left ( ~text ; 1 ) ;\r~lastChar = Right ( ~text ; 1 )\r] ;\r\r~isValid and\r\r(\r( ~firstChar = \"[\" and ~lastChar = \"]\" ) \ror \r( ~firstChar = \"{\" and ~lastChar = \"}\" )\r)\r\r)"
    },
    "List": {
      "Convert": {
        "ToArray": "While ( \r[ \r~count = ValueCount ( ~list ) ;\r~array = \"[]\" ;\r~i = 1\r] ; \r\r~i <= ~count ; \r\r[ \r~index = ~i - 1 ;\r~value = GetValue ( ~list ; ~i ) ;\r~type = TT.Json.Type ( ~value ) ;\r~array = TT.Json.Array.Push ( ~array ; ~value ; ~type ) ; \r~i = ~i + 1 \r] ; \r\r~array \r\r)\r\r/*\rCase ( \rLeft ( ~list ; 1 ) = \"[\" ; ~list ;\r~list = \"\" ; \"[]\" ;\r\"[\\\"\" & Substitute ( ~list ; ¶ ; \"\\\", \\\"\" ) & \"\\\"]\"\r)\r*/"
      },
      "Custom": "/*\r Special Thanks to Ugo Di Luca - Grazie Mille, pour l'aiguillage qu'il m'a fait prendre,\r\r                          Thank you for all his comments and his notice  ®  Ugo Di Luca \r\r===========================================================\r\r\r\r//   Author: Agnès Barouh - filemaker@tictac.fr\r\r\r\r//   CustomList ( Start ; End ; Function )  v_4.8\r\r// [please, do not used \"CLNum\" in your calculation with Let() ]\r\r//   Objectives and examples  :\r\r\r\r- Build any list based on all Native or Custom Functions involving a 'Number' value as a parameter, such as :\r\rLeft(), Middle(), GetValue(), GetRepetitionNumber (),  GetNthRecord(), GetLayoutObjectAttribute () ...\r\rex : - CustomList ( 1 ; Get ( FoundCount ) ; \"GetNthRecord ( FirstName ; [n] )\" ) \r\rwill return James¶Henry¶Susan if your foundset has 3 records.\r\r\r\r- Build any range based on Dates, Times, TimeStamps, and obviously Numbers\r\rex : CustomList ( 1 ; 5 ; \"GetAsDate ( StartingDate ) + [n]\" )\r\rwill return a range of 5 dates starting from the specified StartingDate\r\r\r\rThe 'Function' Parameter is nothing else than a litteral calculation expression. \r\rTherefore, CustomList allows for any filtering or parsing process based on any condition you may need.\r\rex : CustomList ( 10 ; 100 ; \"Let ( [ Value = GetValue ( MyList ; [n] ) ] ; Case ( PatternCount ( Value ; \"X\" ) ; Value ))\" )\r\rwill parse any value containing a \"X\" in  the 'MyList' chain, in between the 10th and the 100th values.\r\r\r\rSee the 'Under the Hood' part at the end of the function to fully understand the process of this function\r\r\r\r--------------------------------\r\r/* MAJOR UPDATE */  Updated July'08\r\r/* UPDATE */  Updated August'10 for adapte to FileMakerGo\r\r/* UPDATE */  Updated November'11 for adapte to FileMakerServer\r\r/* UPDATE */  Updated November'12 for adapte to FileMaker IWP\r\r\r\r\r\r--------------------------------\r\r\r\rCustomList is based on a totally new algorithm, and is now volontarily bridled to a maximum range of 500,000 values, where the first version was technically limited to a max of 18,700 values.\r\rPrevious version still available here : http://www.briandunning.com/cf/747\r\r\r\rThe new CustomList() is faster and still is NOT recursive.\r\rThe arguments are unchanged which makes it compatible with all your previous developments involving CustomList().\r\r\r\rFor Developper ease, the new CustomList() includes a debugging mode.\r\rfind the \"*****DEBUGGING MODE*****\" tag in the formula below to switch mode.\r\rWhen debug is set to 1, any error will be returned with its appropriate explanatory code, else the result will be set to \"?\"\r\r--------------------------------*/\r\r\r\r// ----------- FORMULA STARTS HERE -----------\r\r\r\rCase (\r\r           /*This function will not evaluate if Invalid parameters were passed for Start and End.*/\r\r\r\r            IsEmpty ( Start ) or IsEmpty ( End ) or End < 1 or Start < 1; \"\";\r\r          \r\r            Let ( [\r\r                         Start =  GetAsNumber ( Start );\r\r                         End =   GetAsNumber ( End );\r\r                         Diff = End - Start + 1;\r\r                         V =  Case ( Left ( Get ( ApplicationVersion ) ; 2 ) = \"Go\" ; 1 ; Left ( Get ( ApplicationVersion ) ; 2 ) = \"Se\" ; 2 ; Left ( Get ( ApplicationVersion ) ; 2 ) = \"We\" ; 3 ; 0 ) ;\r\r                         PL = Choose ( V ; 1700  ; 400 ; 300 ; 600 ) ;\r\r\r\r                         /*Check for a range higher than 500,000 values  ( max 150000 values for FmGo and 120000 for FmS and 250000 for IWP ).\r\r                          For FMPro/Adv, CustomList() is volontarily restrained to 500 000 but you can but you can go beyond.*/\r\r\r\r                         End =   Case ( ( Diff > Choose ( V ; 500000  ; 150000 ; 120000 ; 250000 ) ) or ( End < Start ) or IsEmpty ( Start ) or IsEmpty ( End ); \"Error\"; End );\r\r                         $null = \"\\\"\\\"\";\r\r\r\r                         /*CustomList has its own recursion TT.Model. As CustomList may be involved into the \"function\" argument, \r\r                         each CustomList expression used is passed to a repeating variable for evaluation*/\r\r\r\r                         iter = Let ( $CLExeCount = $CLExeCount + 1 ; $CLExeCount & PatternCount ( Function ; \"TT.List.Custom\" ) + 1 ) ;\r\r                         $CLn[ iter ]  = Start - 1;\r\r\r\r                         Calc = Case ( Diff ≥ ( PL - 10 ) ; ( PL / 10 )  ; Floor ( Diff / 10 ) + 1 );\r\r\r\r                         /*Here starts the \"magic\" of the Substitutions and the whole mechanism.\r\r                         CustomList() is set to evaluate stacks of 1,700 values at a time ( 400 for FileMakerGo), which is the \r\r                         current limit of FileMaker internal Evaluate function*/\r\r\r\r                         First = Substitute ( ( 10 ^ Calc ) - 1; 9; \"__________\" ) ;  \r\r                         X = Floor ( Diff / PL );\r\r                         $CLRemainder[ iter ]  = Diff - ( X * PL );\r\r\r\r                         /*When the \"Function\" argument is left empty, CustomList() will return a numeric list based on the range defined */\r\r\r\r                         FunctionR = Case ( IsEmpty ( Function ); \"CLNum\"; Substitute ( Function; [\"[n]\"; \"CLNum\"] ; [¶ ; \"\"] ) );\r\r\r\r                         /*Each repeating variable content is parsed in order to get our String ready for the last evaluation - Special care is made for\r\r                         French users here, please substitute the \"definir\" below with your local translation of the \"Let\" function if you're not using an english\r\r                         version. The use of \"Let ([\" is recommanded anyway*/\r\r\r\r                         $CLExecute[ iter ] = Case ( Left ( Substitute ( Lower ( Function ); [\"definir\"; \"Let\" ]; [\" \"; \"\"]; [\"¶\"; \"\"]); 5 ) = \"Let([\";\r\r                                            Substitute (  First ; [ \"_\";  \"Let([$CLn[\" & iter & \"]=$CLn[\" & iter & \"]+1;CLNum=$CLn[\" & iter & \"];\" &\r\r                                            Replace ( FunctionR; 1; Position ( FunctionR; \"[\"; 1; 1 ); \"\" ) & \"&\\¶&¶\"] );\r\r                                            Substitute ( First ; [ \"_\";  \"Let([$CLn[\" & iter & \"]=$CLn[\" & iter & \"]+1;CLNum=$CLn[\" & iter & \"]];\" & FunctionR & \")&\\¶&¶\"] ) );\r\r\r\r                         /*Final compilation starts here. The reminder part above each 1,700 values is treated now. */\r\r  \r\r                          Final = Case ( X > 0; Substitute ( ( 10 ^ X ) - 1; 9; \"Evaluate ( $CLExecute[\" & iter & \"] & $null ) & \" ) ) &\r\r                                      \"Evaluate( LeftValues ( $CLExecute[\" & iter & \"] ; $CLRemainder[\" & iter & \"]  ) & $null ) & \" & $null;\r\r\r\r                         /*The Final variable can now be evaluated to get our List*/\r\r\r\r                          Result  =   Case ( End <> \"Error\"; Substitute ( \"#^#\" & Evaluate  ( Final ) & \"#^#\";\r\r                                           [ \"#^#|#^#\"; \"¶\" ]; [ \"¶\"; \"¶#^#\" ]; [ \"#^#¶\"; \"\" ]; [ \"¶#^#\"; \"¶\" ]; [ \"¶#^#\"; \"\" ]; [ \"#^#\"; \"\" ] ) ) ;\r\r                          $CLExecute[ iter ]  = \"\" \r\r\r\r// ----------- FUNCTION RESULT BELOW -----------\r\r            ];\r\r/*CustomList returns either the valid result, or an error formatted according to the debugging mode chosen above*/\r\r\r\r     Case (\r\r          ( Length ( Result ) and ( Result = Filter ( Result; \"?\" ))) or End =  \"Error\";\r\r          Let ([\r\r                    /*****DEBUGGING MODE*****/   // Case Debug = 1, returned error \"[error_CL], Number, Name and Calculation error\" ,if Debug  <> 1, returned error is \"?\"\r\r                    Debug = \"1\";\r\r                    Write = Substitute ( Function; \"[n]\"; 1 ); NumError = EvaluationError ( Evaluate ( Write ) );\r\r                    Error = \"[\" & NumError & \"]\" & \"Unlisted error | Unknown error, check calculation or check \\\"Start\\\" and \\\"End\\\" ¶102 | Field is missing¶103 | Relationship is missing¶106 | Table is missing¶113 | Function is missing¶1204 | Number, text constant, field name or \\\"(\\\" expected¶1205 | Comment is not terminated with \\\"*/\\\"¶1206 | Text constant must end with a quotation mark¶1207 | Unbalanced parenthesis¶1208 | Operator or function missing or \\\"(\\\" not expected¶1211 | List usage is not allowed in this function¶1212 | An operator (for example, +, -, *,;) is expected here¶1215 | This parameter is an invalid Get function parameter\";\r\r                    Pos = ValueCount ( Left ( Error; Position ( Error; NumError & \" \"; 1; 1 ) ) )\r\r     ];\r\r          Case ( Debug = 1; \"[Error_CL]  | Return error : \" & GetValue ( Error; Case ( Pos = 0; 1; Pos ) ) & ¶ & TextStyleAdd ( \"Calculation ( for [n] = 1 ) : \"; Bold ) & Write; \"?\" ));\r\r  Result ))\r\r)\r\r\r\r// ----------- UNDER THE HOOD -----------\r\r\r\r/*com.fmi.calculation.TT.Text. Not very much afterwards...\r\rBasically, CustomList() does two things :\r\r1/ Transform your formula in a litteral chain :\r\r\r\rCustomList ( 1; 4; \"GetNthRecord ( Field ; [n])\")\r\rtherefore becomes\r\r\"Let ([ CLNum = 1 ] ; GetNthRecord ( Field ; CLNum )) & ¶ &\r\rLet ([ CLNum = 2 ] ; GetNthRecord ( Field ; CLNum )) & ¶ &\r\rLet ([ CLNum = 3 ] ; GetNthRecord ( Field ; CLNum )) & ¶ &\r\rLet ([ CLNum = 4 ] ; GetNthRecord ( Field ; CLNum ))\"\r\r\r\r2/ Evaluates this chain.\r\r\r\rInterrested in the mechanism ?\r\rMy advice then : dissect this function by escaping the 'Result' and placing one of the numerous intermediary variables available.\r\rSpecial attention should be paid to the 'First' Variable, everything starts from there !*/\r\r\r\r// ===================================\r\r/*com.fmi.calculation.TT.Text.\r\r\r\r    This function is published on FileMaker Custom Functions\r\r    to check for updates and provide feedback and bug reports\r\r    please visit http://www.fmfunctions.com/fid/118\r\r\r\r    Prototype: CustomList( Start; End; Function )\r\r    Function Author: Agnès (http://www.fmfunctions.com/mid/46)\r\r    Last updated: 07 November 2012\r\r    Version: 2*/\r\r// ===================================",
      "Filter": "/* FilterList ( ListA ; Attribute ; ListB ; CaseSensitive ) .v2.0\r\rFilterList () requires CustomList ( Start ; End ; Function )*/\r\r\r\r// Limited => ListA < 18700 values and ListB < 18700 values too\r\r// Attributes : Equals - NotEquals - Contains - NotContains - BeginsWith - NotBeginsWith - EndsWith - NotEndsWith\r\r// Optional parameters : CaseSensitive : Boolean\r\r\r\r// Result\r\r/* --------- CaseSensitive = empty or 0\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"Equals\" ; \"One¶four\" ; \"\" or 0 ) => \"One¶Four\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"NotEquals\" ; \"One¶four\" ; \"\" or 0 ) => \"Two¶three¶five\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"Contains\" ; \"O¶t\" ; \"\" or 0 ) => \"One¶Two¶three¶Four\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"NotContains\" ; \"O¶t\" ; \"\" or 0 ) => \"five\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"BeginsWith\" ; \"F¶t\" ; \"\" or 0 ) => \"Two¶three¶Four¶five\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"NotBeginsWith\" ; \"F¶t\" ; \"\" or 0 ) => \"One\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"EndsWith\" ; \"o¶E\" ; \"\" or 0 ) => \"One¶Two¶three¶five\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"NotEndsWith\" ; \"o¶E\" ; \"\" or 0 ) => \"Four\"\r\r\r\r*/\r\r/* --------- CaseSensitive = 1\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"Equals\" ; \"One¶four\" ; 1 ) => \"One\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"NotEquals\" ; \"One¶four\" ; 1 ) => \"Two¶three¶Four¶five\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"Contains\" ; \"O¶t\" ; 1 ) => \"One¶three\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"NotContains\" ; \"O¶t\" ; 1 ) => \"Two¶Four¶five\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"BeginsWith\" ; \"F¶t\" ; 1 ) => \"three¶Four\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"NotBeginsWith\" ; \"F¶t\" ; 1 ) => \"One¶Two¶five\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"EndsWith\" ; \"o¶E\" ; 1 ) => \"Two\"\r\rFilterList ( \"One¶Two¶three¶Four¶five\" ; \"NotEndsWith\" ; \"o¶E\" ; 1 ) => \"One¶three¶Four¶five\"\r\r*/\r\r\r\r//-------------------------------------------------------------------*/\r\r// Agnès Barouh - Juillet 2007 - To report bugs : :  barouh.agnes@wanadoo.fr\r\r//-------------------------------------------------------------------*/\r\r\r\rCase (\r\tValueCount ( ListA ) > 18700 or ValueCount ( ListB ) > 18700 ; \"Too many Values\" ;\r\tIsEmpty ( ListA ) ; \"\" ;\r\tIsEmpty ( ListB ) ; ListA ;\r\tIsEmpty ( Attribute ) ; \"Missing Attribute\" ;\r\tIsEmpty ( FilterValues ( Attribute ; \"Equals¶NotEquals¶Contains¶NotContains¶BeginsWith¶NotBeginsWith¶EndsWith¶NotEndsWith\" ) ) ; \"Incorrect attribute\" ;\r\tnot ( CaseSensitive = 1 or ( GetAsNumber ( CaseSensitive + 0 ) = 0 ) ) ; \"Incorrect CaseSensitive\" ;\r\tAttribute = \"Equals\" and CaseSensitive < 1 ; Substitute ( FilterValues ( ListA ; ListB ) & \"#|#\" ; [\"¶#|#\" ; \"\" ]; [\"#|#\" ; \"\" ]) ;\r\r     Let ([\r\t$TagB = Case ( IsEmpty ( FilterValues ( Attribute ; \"Equals¶NotEquals¶BeginsWith¶NotBeginsWith\" ) ) ; \"\" ; \"#|#\" ) ;\r\t$TagE = Case ( IsEmpty ( FilterValues ( Attribute ; \"Equals¶NotEquals¶EndsWith¶NotEndsWith\" ) ) ; \"\" ; \"#|#\" ) ;\r\t$MyFirstList = ListA ;\r\t$MyList = \"[#|#]\" & $TagB & Substitute ( Choose ( CaseSensitive ; Upper ( $MyFirstList ) ; $MyFirstList ) ; [ ¶ ; $TagE & ¶ & \"[#|#]\" & $TagB ] ) & $TagE ;\r\t$Values = Choose ( CaseSensitive ; Upper ( ListB ) ; ListB ) ;\r\r\r\r\t\tTrigger = TT.List.Custom ( 1 ; ValueCount ( ListB ) ;\r                           \"Let ([Value = GetValue ( $Values ; [n] ) ; $MyList = case ( Not IsEmpty ( value ) ; Substitute ( $MyList  ; $TagB & Value & $TagE ; \\\"X##X\\\"  ) ; $MyList ) ] ; \\\"\\\" )\" ) ;\r\t$MyList = Substitute (  $MyList ; [ \"[#|#]\"; \"\" ] ;  [ \"#|#\"; \"\" ]  ) ;\r\r\t$Test = Case ( Left ( Attribute ; 3 ) = \"Not\"  ; \"<1\" ;  \">0\");\r\r\r\t_result =     Case (\r\r        CaseSensitive < 1 and Left ( Attribute ; 3 ) = \"Not\" ; Substitute ( FilterValues ( $MyFirstList ; $MyList ) & \"#|#\" ; [\"¶#|#\" ; \"\" ] ; [\"#|#\" ; \"\" ]) ;\r\t\tTT.List.Custom ( 1 ; ValueCount ( $MyList  ) ; \"Let ([ Value = GetValue ( $MyList ; [n] ) ]; Case ( Position ( Value ; \\\"X##X\\\" ; 0 ; 1 )\" & $Test & \" ; GetValue ( $MyFirstList ; [n] )))\" )\r         )\r       ];\r_result\r      )\r) & Let( [ $MyFirstList = \"\" ; $MyList = \"\" ; $Values = \"\"] ; \"\" )",
      "Lookup": "Let ( \r[\r~list1Position = TT.List.Value.Position ( ~list1 ; ~value ; 1 ; 1 ) ;\r~list2Position = TT.List.Value.Position ( ~list2 ; ~value ; 1 ; 1 ) ;\r~position = Max ( ~list1Position ; ~list2Position ) ;\r~toList = If ( ~list1Position ; ~list2 ; ~list1 )\r] ;\r\rIf ( ~list1Position or ~list2Position ; GetValue ( ~toList ; ~position ) )\r\r)",
      "RemoveNulls": "Let(\r\r  ~uuid = Get ( UUID ) ;\r\r  If(\r\r    //Check if unlikely string rears its head\r    Position( ~list; ~uuid ; 0 ; 1 ) ;\r\r    //If so, simulate an out-of-range error.\r    Evaluate( \"Factorial( -1 )\" ) ; \r\r    // Otherwise, proceed to get rid of nulls\r    Substitute(\r      ~uuid & ~list & ~uuid ;\r      [ \"¶¶\"; ¶ & ~uuid & ¶ ] ;\r      [ \"¶¶\"; ¶ & ~uuid & ¶ ] ;\r      [ ~uuid & ¶; \"\" ] ;\r      [ ¶ & ~uuid ; \"\" ] ;\r      [ ~uuid ; \"\" ]\r    )\r  )\r)",
      "Sort": "Case (\r        not IsEmpty ( $$sl_V ) ;\r\rLet ([\r        Size = ValueCount ( ValueList )\r ];\r Case (\r        Size ≤ 2 ; Replace ( $$sl_Res ; Position ( $$sl_Res ; ¶ ; 1 ; $$sl_n ) + 1 ; 0 ; $$sl_V & ¶ ) & Let ( $$sl_V = \"\" ; \"\" ) ;\r Let( [\r         A = Ceiling ( Size / 2 ) ;\r         V =  GetValue ( ValueList ; A ) ;\r         Compare = Choose ( Type ; V ; GetAsNumber ( V ) ; GetAsDate ( V ) ; GetAsTime ( V ) ; GetAsTimestamp ( V ) ) ;\r         Test = Case (  Sort = \"<=\" ; $$sl_G <= Compare ; $$sl_G >= Compare ) ;\r         NewList = Choose ( Test ; Let ( $$sl_n = $$sl_n + A - 1 ; MiddleValues ( ValueList ; A ; Size )) ; LeftValues ( ValueList ; A ))\r         ];\r    TT.List.Sort ( NewList ; Sort  ; Type )\r     )\r));\r\rLet ([\r\r $sl_List = ValueList ;\r $$sl_Res = GetValue ( $sl_List ; 1 ) ;\r $sl_Get = \"GetAs\" & Case ( IsEmpty ( Type ) ; \"Text\" ; Type ) ;\r $sl_T = Case ( Type = \"Text\" or IsEmpty ( Type ) ; 0 ; Type = \"Number\" ; 1 ; Type = \"Date\" ; 2 ; Type = \"Time\" ; 3 ; Type = \"TimeStamp\" ; 4 ) ;\r $sl_A = Case ( Sort = \"Desc\" ; \">=\" ; Sort = \"Asc\" or IsEmpty ( Sort ) ; \"<=\" ) ;\r $sl_D = Case ( Sort = \"Desc\" ; \"<=\" ; \">=\" ) ;\r\r                         Start = 2 ; End = ValueCount ( $sl_List ) ; Diff = End - Start + 1;\r                         End =  Case ( Diff > 100000 or IsEmpty ( End ); \"Error\"; End );\r                         $sl_C = Start - 1; $null = \"\\\"\\\"\";\r\r                         V =  Case ( Left ( Get ( ApplicationVersion ) ; 2 ) = \"Go\" ; 1 ; Left ( Get ( ApplicationVersion ) ; 2 ) = \"Se\" ; 2 ; Left ( Get ( ApplicationVersion ) ; 2 ) = \"We\" ; 3 ; 0 ) ;\r                         PL = Choose ( V ; 1700  ; 400 ; 300 ; 900 ) ;\r                         Calc = Case ( Diff ≥ ( PL - 10 ) ; ( PL / 10 )  ; Floor ( Diff / 10 ) + 1 );\r                         First = Substitute ( ( 10 ^ Calc ) - 1; 9; \"__________\" ) ;  \r                         X = Floor ( Diff / PL );\r\r                         $sl_Exe = Substitute (  First ; \"_\" ;\r\"Let ([\r$sl_C = $sl_C + 1 ; $$sl_n = 1 ;\r$$sl_V = GetValue ( $sl_List ; $sl_C );\r$$sl_G = \" & $sl_Get & \" ( $$sl_V );\r$$sl_Res = Case( $$sl_G \" & $sl_A & $sl_Get & \" ( GetValue ( $$sl_Res ; 1 ) ) ; $$sl_V &\\¶& $$sl_Res ;\r$$sl_G \" & $sl_D & $sl_Get & \" ( GetValue ( $$sl_Res ;$sl_C-1)) ; $$sl_Res &\\¶& $$sl_V ;\rTT.List.Sort ($$sl_Res ; $sl_A ; $sl_T))];\\\"\\\")&\\¶&¶\" ); // NOTA : If you change the name of the CF, \"SortList\", Change here too.\r  \r                          Final =  Case ( X > 0; Substitute ( ( 10 ^ X ) - 1; 9; \"Evaluate ( $sl_Exe & $null ) & \" ) ) &\r                                      \"Evaluate( LeftValues ( $sl_Exe ; \" & Diff - ( X * PL ) & \" ) & $null ) & \" & $null\r            ];\rCase ( \r       IsEmpty ( ValueList ) ; \"\" ; \r       End = \"Error\" ; \"Error : Check ValueList or Start and End\" ;\r       IsEmpty ( $sl_T ) or IsEmpty ( $sl_A ) ; \"Error : Check Sort and Type\" ;\r       Substitute ( \"#^#\" & Evaluate ( Final ) & \"#^#\"; [ \"¶\"; \"¶#^#\" ];[ \"#^#¶\"; \"\" ];[ \"¶#^#\"; \"¶\" ];[ \"¶#^#\"; \"\" ];[ \"#^#\"; \"\" ]) & $$sl_Res\r       )\r)\r& Let ([ $sl_Exe  = \"\" ; $sl_C = \"\" ; $sl_List = \"\" ; $$sl_Res = \"\" ; $$sl_G = \"\" ; $$sl_n = \"\" ; $$sl_V = \"\" ]; \"\" )\r)",
      "Sum": "Evaluate ( \"Sum ( 0 ; \" & Substitute ( TT.List.RemoveNulls ( ~list ) ; ¶ ; \";\" ) & \" )\" )",
      "Value": {
        "Exclude": "FilterValues ( ~list ; UniqueValues ( Substitute ( ~valuesToExclude & ¶ ; [¶ ; Char ( 8203 ) & ¶ ] )  & ~list ) )",
        "Exists": "GetAsBoolean ( Position ( ¶ & ~list & ¶ ; ¶ & ~searchValue & ¶ ; 0 ; 1 ) )",
        "First": "GetValue ( TT.List.RemoveNulls ( ~list ) ; 1 )",
        "Last": "Let (\r~list =  TT.List.RemoveNulls ( ~list ) ;\rGetValue ( ~list  ; ValueCount ( ~list ) )\r)",
        "Max": "Let (\r$list = ~list ;\r\rEvaluate ( \r\"Max (\" & \rSubstitute ( \rTT.List.Custom ( 1 ; ValueCount ( ~list ) ; \"Let ( [ ~value = GetValue ( $list ; [n] ) ] ; If ( Filter ( ~value ; \\\"0123456789\\\" ) = ~value ; ~value ; Quote ( ~value ) )  )\" ) ;\r¶ ; \";\"\r) &\r\")\"\r)\r\r)\r\r\r\r//Evaluate ( \"Max ( \" & Substitute ( TT.List.RemoveNulls(~list ) ; ¶ ; \";\" ) & \" )\" )",
        "Min": "Let (\r$list = ~list ;\r\rEvaluate ( \r\"Min (\" & \rSubstitute ( \rTT.List.Custom ( 1 ; ValueCount ( ~list ) ; \"Let ( [ ~value = GetValue ( $list ; [n] ) ] ; If ( Filter ( ~value ; \\\"0123456789\\\" ) = ~value ; ~value ; Quote ( ~value ) )  )\" ) ;\r¶ ; \";\"\r) &\r\")\"\r)\r\r)\r\r//Evaluate ( \"Min ( \" & Substitute ( TT.List.RemoveNulls ( ~list ) ; ¶ ; \";\" ) & \" )\" )",
        "Next": "Let ( \r[\r~next = TT.List.Value.Position ( ~list ; ~currentValue ; 1 ; 1 ) + 1 ;\r~next = If ( not ~exitAfterLast and ~next > ValueCount ( ~list ) ; 1 ; ~next )\r] ;\r\rGetValue ( ~list ; ~next )\r\r)",
        "Position": "Let ( \r[\r~list = ¶ & ~list & ¶ ;\r~searchValue =  ¶ & ~searchValue  & ¶\r] ;\r\rValueCount ( Left ( ~list ; Position ( ~list ; ~searchValue ; Position ( ~list ; ¶ ; 1 ; ~start ) ; ~occurrence ) ) )\r\r)",
        "Previous": "Let ( \r[\r~previous = TT.List.Value.Position ( ~list ; ~currentValue ; 1 ; 1 ) - 1 ;\r~previous = If ( not ~exitAfterLast and ~previous = 0 ; ValueCount ( ~list ) ; ~previous )\r] ;\r\rGetValue ( ~list ; ~previous )\r\r)",
        "Random": "Let (\r~value = Floor ( Random * ( ValueCount ( ~list ) ) ) + 1 ;\r\rGetValue ( ~list ; ~value )\r)",
        "Toggle": "Let ([\r~LV = ValueCount( ~values);\r~thisValue= GetValue( ~values; 1);\r~moreValues = MiddleValues( ~values ; 2; ValueCount( ~values));\r~novalue = IsEmpty ( FilterValues ( ~list ; ~thisValue ) );\r~newList = Substitute( ~list;  [\"¶¶¶\"; \"¶\"] ; [\"¶¶\"; \"¶\"] ) ;\r~listminusvalue = Substitute( \"¶¶\" & ~newList & \"¶¶\"; [¶ & ~thisValue & ¶ ; ¶ ] ; [\"¶¶¶\"; \"\"] ; [\"¶¶\"; \"\"] ) ;\r~listplusvalue = Substitute( List ( ~newList ; ~thisValue ); [\"¶¶\"; \"¶\"] );\r~result = Case ( ~novalue ; ~listplusvalue ; ~listminusvalue );\r\r~LNR = Length( ~result );\r~TR = Right( ~result; 1) = \"¶\";\r~LR = Left ( ~result; 1) = \"¶\";\r~result = Middle ( ~result; 1+ ~LR; ~LNR - ~TR - ~LR )\r];\r\rCase( \r~LV < 2 ; ~result; \rTT.List.Value.Toggle ( ~result; ~moreValues )\r)\r)"
      }
    },
    "MBS": {
      "SFTP": {
        "File": {
          "Delete": "If ( Right ( ~url ; 1 ) = \"/\" ; \"L'url complet doit finir par le nom de fichier\" ;\r\rLet (\r[\r~pos = Position ( ~url ; \"/\" ; 1 ; 3 ) ;\r~path = Substitute ( Middle ( ~url ; ~pos ; Length ( ~url ) ) ; \" \" ; \"\\ \" ) ;\r~server = Left ( ~url ; Position ( ~url ; \"/\" ; 8 ; 1 ) ) ; \r\r~prep = \rTT.MBS.SFTP.Initialize( ~username ; ~password ) &\rMBS ( \"CURL.SetOptionURL\" ; $curl ; ~server ) &\rMBS ( \"CURL.SetOptionNoBody\" ; $curl ; 1 ) &\rMBS ( \"CURL.SetOptionQuote\" ; $curl ; \"rm \"& ~path ) ;\r\r~perform = MBS ( \"CURL.Perform\" ; $curl ) ;\r$debug = MBS ( \"CURL.GetDebugAsText\" ; $curl ) ;\r~release = MBS ( \"CURL.Release\" ; $curl )\r] ;\r\r//Retourner le résultat du perform. \r//Si résultat OK, le fichier est supprimé\r~perform\r\r)\r\r)",
          "Download": {
            "ToDisk": "Let (\r[\r~prep = \rTT.MBS.SFTP.Initialize( ~username ; ~password ) &\rMBS ( \"CURL.SetOptionURL\" ; $curl ; ~url ) &\rMBS ( \"CURL.SetOptionBufferSize\" ; $curl ; 512*1024 ) &\rMBS ( \"CURL.CreateOutputFile\" ; $curl ; ~diskFilePath ) ;\r\r~perform = MBS ( \"CURL.Perform\" ; $curl ) ;\r$debug = MBS ( \"CURL.GetDebugAsText\" ; $curl ) ;\r~release = MBS ( \"CURL.Release\" ; $curl )\r] ;\r\r//Retourner le résultat du perform. \r//Si résultat OK, le fichier se trouve dans le chemin spécifié\r//Le debug se trouve dans $debug\r~perform\r\r)",
            "ToVariable": "Let (\r[\r~prep = \rTT.MBS.SFTP.Initialize( ~username ; ~password ) &\rMBS ( \"CURL.SetOptionURL\" ; $curl ; ~url ) &\rMBS ( \"CURL.SetOptionBufferSize\" ; $curl ; 512*1024 ) ;\r\r~perform = MBS ( \"CURL.Perform\" ; $curl ) ;\r$file = MBS ( \"CURL.GetResultAsContainer\" ; $curl ) ;\r$debug = MBS ( \"CURL.GetDebugAsText\" ; $curl ) ;\r~release = MBS ( \"CURL.Release\" ; $curl )\r] ;\r\r//Retourner le résultat du perform. \r//Si résultat OK, le fichier se trouve dans $file\r//Le debug se trouve dans $debug\r~perform\r\r)"
          },
          "Upload": {
            "FromContainer": "If ( not Position ( Right ( ~url ; 6 ) ; \".\" ; 1 ; 1 ) ; \"L'url complet doit finir par le nom de fichier\" ; \r\rLet (\r[\r~container = If ( Position ( ~container ; \"::\" ; 1 ; 1 ) ; GetField ( ~container ) ; ~container ) ;\r\r~prep = \rTT.MBS.SFTP.Initialize( ~username ; ~password ) &\rMBS ( \"CURL.SetOptionURL\" ; $curl ; ~url ) &\rMBS ( \"CURL.SetOptionUpload\" ; $curl ; 1 ) &\rMBS ( \"CURL.SetOptionFTPCreateMissingDirs\" ; $curl ; 1 ) &\rMBS ( \"CURL.SetInputFile\" ; $curl ; ~container ) ;\r\r~perform = MBS ( \"CURL.Perform\" ; $curl ) ;\r$debug = MBS ( \"CURL.GetDebugAsText\" ; $curl ) ;\r~release = MBS ( \"CURL.Release\" ; $curl )\r] ;\r\r//Retourner le résultat du perform. \r//Si résultat OK, le fichier a été uploadé sur le serveur\r//Le debug se trouve dans $debug\r~perform\r\r)\r\r)",
            "FromDisk": "If ( not Position ( Right ( ~url ; 6 ) ; \".\" ; 1 ; 1 ) ; \"L'url complet doit finir par le nom de fichier\" ; \r\rLet (\r[\r~prep = \rTT.MBS.SFTP.Initialize( ~username ; ~password ) &\rMBS ( \"CURL.SetOptionURL\" ; $curl ; ~url ) &\rMBS ( \"CURL.SetOptionUpload\" ; $curl ; 1 ) &\rMBS ( \"CURL.SetOptionFTPCreateMissingDirs\" ; $curl ; 1 ) &\rMBS ( \"CURL.OpenInputFile\" ; $curl ; ~diskFilePath ) ;\r\r~perform = MBS ( \"CURL.Perform\" ; $curl ) ;\r$debug = MBS ( \"CURL.GetDebugAsText\" ; $curl ) ;\r~release = MBS ( \"CURL.Release\" ; $curl )\r] ;\r\r//Retourner le résultat du perform. \r//Si résultat OK, le fichier a été uploadé sur le serveur\r//Le debug se trouve dans $debug\r~perform\r\r)\r\r)"
          }
        },
        "Folder": {
          "Listing": "Let (\r[\r~prep = \rTT.MBS.SFTP.Initialize( ~username ; ~password ) &\rMBS ( \"CURL.SetOptionURL\" ; $curl ; ~url ) ;\r\r~perform = MBS ( \"CURL.Perform\" ; $curl ) ;\r$debug = MBS ( \"CURL.GetDebugAsText\" ; $curl ) ;\r$folderListing = MBS ( \"CURL.GetResultAsText\" ; $curl ; \"UTF-8\" ) ;\r~release = MBS ( \"CURL.Release\" ; $curl )\r] ;\r\r//Retourner le résultat du perform. \r//Si résultat OK, le listing se trouve dans $folderListing\r~perform\r\r)"
        },
        "Initialize": "Let (\r$curl = MBS ( \"CURL.New\" ) ;\r\rMBS ( \"CURL.SetOptionUsername\" ; $curl ; ~username ) &\rMBS ( \"CURL.SetOptionPassword\" ; $curl ; ~password ) &\r\rMBS ( \"CURL.SetDebugWithData\" ; $curl ; 0 ) &\rMBS ( \"CURL.SetDebugWithTime\" ; $curl ; 1 ) &\rMBS ( \"CURL.SetDebugWithProgress\" ; $curl ; 1 ) &\rMBS ( \"CURL.SetOptionVerbose\" ; $curl ; 1 ) \r\r)"
      },
      "ScriptSteps": {
        "Header": "Let (\r~setClipboard = MBS ( \"Clipboard.SetFileMakerData\" ; \"ScriptStep\" ;\r\r\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\r<fmxmlsnippet type=\\\"FMObjectList\\\">\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>============================================================================================================================================\r</Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>   Sert à :\t\t\tUtilité</Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>   Paramètre 1 :\t\tAction (obligatoire)\r                     </Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>   Paramètre 2 :\t\tOption (facultatif)\r                     </Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>   Notes :\t\t\t</Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>   Auteur :\t\t\t\" & Get ( UserName ) & \"</Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>   Date création :\t\" & Get ( CurrentDate ) & \"</Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>   Modifications :\t</Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>============================================================================================================================================</Text>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"86\\\" name=\\\"Set Error Capture\\\">\r    <Set state=\\\"True\\\"/>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"85\\\" name=\\\"Allow User Abort\\\">\r    <Set state=\\\"False\\\"/>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>GetValue ( Get ( ScriptParameter ) ; 1 )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$action</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>GetValue ( Get ( ScriptParameter ) ; 2 )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$option</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>TODO : Supprimer les paramètres non nécessaires, ajouter les manquants, ne pas oublier de les indiquer dans le nom du script </Text>\r  </Step>\r</fmxmlsnippet>\"\r) ;\r\"Vous pouvez maintenant coller le résultat à l'intérieur d'un script.\"\r)",
        "Loop": {
          "FileExists": "Let (\r~setClipboard = MBS ( \"Clipboard.SetFileMakerData\" ; \"ScriptStep\" ;\r\r\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\r<fmxmlsnippet type=\\\"FMObjectList\\\">\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>\\\"//définir le path de base\\\"</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$pathBase</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>$pathBase</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$path</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$fileExists</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>1</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$i</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"71\\\" name=\\\"Loop\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"188\\\" name=\\\"Get File Exists\\\">\r    <UniversalPathList>$path</UniversalPathList>\r    <Text/>\r    <Field>$fileExists</Field>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"72\\\" name=\\\"Exit Loop If\\\">\r    <Calculation>not $fileExists</Calculation>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"68\\\" name=\\\"If\\\">\r    <Calculation>$fileExists</Calculation>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>Substitute ( $pathBase ; \\\".xlsx\\\" ; \\\"(\\\" &amp; $i &amp; \\\").xlsx\\\" )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$path</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>$i + 1</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$i</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"70\\\" name=\\\"End If\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"73\\\" name=\\\"End Loop\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\">\r    <Text>Utiliser le path résultant</Text>\r  </Step>\r</fmxmlsnippet>\"\r\r) ;\r\r\"Vous pouvez maintenant coller le résultat à l'intérieur d'un script.\"\r\r)",
          "Iterator": "Let (\r~setClipboard = MBS ( \"Clipboard.SetFileMakerData\" ; \"ScriptStep\" ;\r\r\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\r<fmxmlsnippet type=\\\"FMObjectList\\\">\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>\\\"//liste\\\"</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$list</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>ValueCount ( $list )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$count</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>1</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$i</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"71\\\" name=\\\"Loop\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"72\\\" name=\\\"Exit Loop If\\\">\r    <Calculation>$i &gt; $count</Calculation>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>$i + 1</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$i</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"73\\\" name=\\\"End Loop\\\"/>\r</fmxmlsnippet>\"\r\r) ;\r\r\"Vous pouvez maintenant coller le résultat à l'intérieur d'un script.\"\r\r)",
          "JsonArray": "Let (\r~setClipboard = MBS ( \"Clipboard.SetFileMakerData\" ; \"ScriptStep\" ;\r\r\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\r<fmxmlsnippet type=\\\"FMObjectList\\\">\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>\\\"\\\"</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$array</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>ValueCount ( JSONListKeys ( $array ; \\\"\\\" ) )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$count</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>0</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$i</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"71\\\" name=\\\"Loop\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"72\\\" name=\\\"Exit Loop If\\\">\r    <Calculation>$i = $count</Calculation>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>JSONGetElement ( $array ; $i )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$quelqueChose</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>$i + 1</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$i</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"73\\\" name=\\\"End Loop\\\"/>\r</fmxmlsnippet>\"\r\r) ;\r\r\"Vous pouvez maintenant coller le résultat à l'intérieur d'un script.\"\r\r)",
          "JsonObject": "Let (\r~setClipboard = MBS ( \"Clipboard.SetFileMakerData\" ; \"ScriptStep\" ;\r\r\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\r<fmxmlsnippet type=\\\"FMObjectList\\\">\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>\\\"\\\"</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$object</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>JSONListKeys ( $object ; \\\"\\\" )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$keysList</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>ValueCount ( $keysList )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$count</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>1</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$i</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"71\\\" name=\\\"Loop\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"72\\\" name=\\\"Exit Loop If\\\">\r    <Calculation>$i &gt; $count</Calculation>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>JSONGetElement ( $keysList ; $i )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$key</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>JSONGetElement ( $object ; $key )</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$value</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"89\\\" name=\\\"# (comment)\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>$i + 1</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$i</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"73\\\" name=\\\"End Loop\\\"/>\r</fmxmlsnippet>\"\r\r) ;\r\r\"Vous pouvez maintenant coller le résultat à l'intérieur d'un script.\"\r\r)",
          "Omit": "Let (\r~setClipboard = MBS ( \"Clipboard.SetFileMakerData\" ; \"ScriptStep\" ;\r\r\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\r<fmxmlsnippet type=\\\"FMObjectList\\\">\r  <Step enable=\\\"True\\\" id=\\\"16\\\" name=\\\"Go to Record/Request/Page\\\">\r    <NoInteract state=\\\"False\\\"/>\r    <RowPageLocation value=\\\"First\\\"/>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"71\\\" name=\\\"Loop\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"68\\\" name=\\\"If\\\">\r    <Calculation>//raison d'omettre</Calculation>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"141\\\" name=\\\"Set Variable\\\">\r    <Value>\r      <Calculation>Get(RecordNumber) = Get(FoundCount)</Calculation>\r    </Value>\r    <Repetition>\r      <Calculation>1</Calculation>\r    </Repetition>\r    <Name>$last</Name>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"25\\\" name=\\\"Omit Record\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"72\\\" name=\\\"Exit Loop If\\\">\r    <Calculation>$last</Calculation>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"69\\\" name=\\\"Else\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"16\\\" name=\\\"Go to Record/Request/Page\\\">\r    <NoInteract state=\\\"False\\\"/>\r    <Exit state=\\\"True\\\"/>\r    <RowPageLocation value=\\\"Next\\\"/>\r  </Step>\r  <Step enable=\\\"True\\\" id=\\\"70\\\" name=\\\"End If\\\"/>\r  <Step enable=\\\"True\\\" id=\\\"73\\\" name=\\\"End Loop\\\"/>\r</fmxmlsnippet>\"\r\r) ;\r\r\"Vous pouvez maintenant coller le résultat à l'intérieur d'un script.\"\r\r)"
        }
      }
    },
    "Model": {
      "Json": "Substitute (\r\r\"//Base - Types nommés¶\rJSONSetElement ( \\\"{}\\\" ;¶\r[ \\\"string\\\" ; \\\"string\\\" ; JSONString ] ;¶\r[ \\\"number\\\" ; 1 ; JSONNumber ] ;¶\r[ \\\"object\\\" ; \\\"{}\\\" ; JSONObject ] ;¶\r[ \\\"array\\\" ; \\\"[]\\\" ; JSONArray ] ;¶\r[ \\\"boolean\\\" ; True ; JSONBoolean ]¶\r)¶\r¶\r¶\r//Base - Types numérotés¶\rJSONSetElement ( \\\"{}\\\" ;¶\r[ \\\"string\\\" ; \\\"string\\\" ; 1 ] ;¶\r[ \\\"number\\\" ; 1 ; 2 ] ;¶\r[ \\\"object\\\" ; \\\"{}\\\" ; 3 ] ;¶\r[ \\\"array\\\" ; \\\"[]\\\" ; 4 ] ;¶\r[ \\\"boolean\\\" ; True ; 5 ]¶ \r)¶\r¶\r¶\r//Exemple multi-niveaux d'objets¶\rJSONSetElement ( \\\"{}\\\" ;¶\r[ \\\"Personne1.prenom\\\" ; \\\"Georgette\\\" ; 1 ] ;¶\r[ \\\"Personne1.nom\\\" ; \\\"Dubreuil\\\" ; 1 ] ;¶\r[ \\\"Personne2.prenom\\\" ; \\\"Barbie\\\" ; 1 ] ;¶\r[ \\\"Personne2.nom\\\" ; \\\"Bruschette\\\" ; 1 ]¶\r)¶\r¶\r¶\r//Exemple array¶\rJSONSetElement ( \\\"[]\\\" ;¶\r[ 0 ; 45367 ; 2 ] ;¶\r[ 1 ; 73781 ; 2 ]¶\r)¶\r¶\r¶\r//Exemple array d'objets¶\rJSONSetElement ( \\\"[]\\\" ;¶\r[ \\\"[0].type\\\" ; \\\"personne\\\" ; 1 ] ;¶\r[ \\\"[0].prenom\\\" ; \\\"Georgette\\\" ; 1 ] ;¶\r[ \\\"[0].nom\\\" ; \\\"Dubreuil\\\" ; 1 ] ;¶\r[ \\\"[1].type\\\" ; \\\"personne\\\" ; 1 ] ;¶\r[ \\\"[1].prenom\\\" ; \\\"Barbie\\\" ; 1 ] ;¶\r[ \\\"[1].nom\\\" ; \\\"Bruschette\\\" ; 1 ]¶\r)\" ;\r\r\"¶ \" ; ¶\r\r)",
      "Let": "Substitute (\r\r\"Let (¶\r[¶\r~var1 = value1 ;¶\r~var2 = value2¶\r] ;¶\r¶\rresultat¶\r¶\r)\" ;\r\r\"¶ \" ; ¶\r\r)",
      "PortalFilter": "Substitute (\r\r\"//Exemple de rubrique globale texte recherche (search), présence dans une liste storée dans une globale (color), booléen (favorite).¶\r//Inspiré de ISO FileMaker Magasine ( https://www.filemakermagazine.com/videos/multi-criteria-portal-filtering#comment-3320 ) et adapté pour plus de performances¶\r¶\rLet (¶\r[¶\r~filterSearchON = not IsEmpty ( Portal Records::SEARCH ) ;¶\r~filterColorON = not IsEmpty ( $$FILTER.COLOR ) ;¶\r~filterFavoriteON = $$FILTER.FAVORITE ;¶\r¶\r~matchesSearch = If ( not ~filterSearchON ; True ; Position ( Portal Records::name ; Interface::SEARCH ; 1 ; 1 ) ) ;¶\r~matchesColors = If ( not ~filterSearchON ; True ; not IsEmpty ( FilterValues ( $$FILTER.COLOR ; Portal Records::color ) ) ) ;¶\r~matchesFavorite = If ( not ~filterSearchON ; True ; Portal Records::favorite = $$FILTER.FAVORITE¶\r¶\r] ;¶\r¶\r~matchesSearch and ~matchesColors and ~matchesFavorite¶\r¶\r)\" ;\r\r\"¶ \" ; ¶\r\r)",
      "SQL": "Substitute (\r\r\"//BASE¶\rExecuteSQL ( \\\"¶\rSELECT¶\rFROM¶\rWHERE¶\r\\\" ; \\\"\\\" ; \\\"\\\" )¶\r¶\r¶\r//GROUPES, TRIS¶\rExecuteSQL ( \\\"¶\rSELECT¶\rFROM¶\rWHERE¶\rGROUP BY¶\rORDER BY¶\r\\\" ; \\\"\\\" ; \\\"\\\" )¶\r¶\r¶\r//CHOISIR PLUS RÉCENT ENREGISTREMENT¶\rExecuteSQL ( \\\"¶\rSELECT¶\rFROM¶\rWHERE¶\rORDER BY CreationTimestampField DESC¶\rFETCH FIRST 1 ROW ONLY¶\r\\\" ; \\\"\\\" ; \\\"\\\" )¶\r¶\r¶\r//CASE¶\rExecuteSQL ( \\\"¶\rSELECT¶\rCASE¶\r    WHEN condition1 THEN result1¶\r    WHEN condition2 THEN result2¶\r    WHEN conditionN THEN resultN¶\r    ELSE result¶\rEND¶\r¶\rFROM¶\rWHERE¶\r\\\" ; \\\"\\\" ; \\\"\\\" )¶\r¶\r¶\r//JOINS¶\rTypes : JOIN (même chose que INNER JOIN) ou LEFT JOIN ou RIGHT JOIN ou LEFT OUTER JOIN ou RIGHT INNER JOIN¶\r¶\rSELECT table1.column, table2.column FROM table1 INNER JOIN table2 ON table1.pk = table2.fk¶\r¶\r¶\r//CRÉER DES ALIAS¶\rSELECT column1 as a, column2 as b FROM table1 as c¶\rou simplement¶\rSELECT column1 a, column2 b FROM table1 c¶\r¶\r¶\r//FONCTIONS LES PLUS UTILISÉES¶\rSUM()¶\rCOUNT()¶\rAVG()¶\r|| (pour concaténer)¶\rLOWER()  UPPER()¶\rMIN()   MAX()¶\r¶\r¶\r//OPÉRATEURS CONDITIONS¶\r= ou !=¶\r< > <= >=¶\rIN ou NOT IN ('valeur1','valeur2','ValeurN')¶\rLIKE ou NOT LIKE '%abc%'\" ;\r\r\"¶ \" ; ¶\r\r)",
      "While": "Substitute (\r\r\"Exemple pour itérer dans une liste. Notez que ~result doit être initialisé à null au départ.¶\rWhile (¶\r[¶\r~list = ... ;¶\r~count = ValueCount ( ~list ) ;¶\r~result = \\\"\\\" ;¶\r~i = 1¶\r] ;¶\r¶\r~i <= ~count ;¶\r¶\r[¶\r~result = ...¶\r~i = ~i + 1¶\r] ;¶\r¶\r~result¶\r¶\r)\" ;\r\r\"¶ \" ; ¶\r\r)"
    },
    "Number": {
      "Convert": {
        "ToFm": "If ( IsEmpty ( Filter ( ~number ; \".,\" ) ) ; ~number ; \rLet (\r[\r~trueDelimiter = Left ( 1/2 ; 1 ) ;\r~length = Length ( ~number ) ;\r~lastDotPosition = Position ( ~number ; \".\" ; ~length ; -1 ) ;\r~lastCommaPosition = Position ( ~number ; \",\" ; ~length ; -1 ) ;\r~position = ~length - Max ( ~lastDotPosition ; ~lastCommaPosition ) ;\r~filtered = Filter ( ~number ; \"-0123456789\" )\r] ;\r\rReplace ( ~filtered ; Length ( ~filtered ) - ~position + 1 ; 0 ; ~trueDelimiter )\r\r)\r\r)",
        "ToPercent": "Let (\r~number = TT.Number.Convert.ToFM ( ~number ) ;\rIf ( ~number ≥ 1 or ~number ≤ -1 ; ~number / 100 ; ~number )\r)"
      },
      "Format": "Let (\r[\r~number = Abs ( Round ( ~number ; ~decimalPrecision ) ) ;\r~decimalSeparator = If ( ~decimalSeparator = \"\" ; Left ( 1/2 ; 1 ) ; ~decimalSeparator ) ;\r~thousandSeparator = If ( ~thousandSeparator = \"\" ; JSONGetElement ( Get ( SystemLocaleElements ) ; \"Num.1000s\" ) ; ~thousandSeparator )\r] ;\r\r~prefix &\r\rCase ( not IsEmpty ( ~number ) ;\r      Case ( GetAsNumber ( ~number ) < 0; \"-\" ) &\r      Substitute ( NumToJText ( Int ( ~number ); 1; 0 ); \",\"; ~thousandSeparator ) &\r      Choose ( ~decimalPrecision ≤ 0 ; ~decimalSeparator &\r      Middle ( ~number - Int ( ~number ) & Substitute ( ( 10 ^ ~decimalPrecision ) - 1; 9; 0 ); 2; ~decimalPrecision ) )\r) &\r\r~suffix\r\r)",
      "RandomInteger": "Floor ( Random * ( ~max - ~min + If ( ~includeMax ; 1 ) ) ) + ~min",
      "SystemDecimal": "Left ( 1 / 2 ; 1 )",
      "isBetween": "If ( ~includeMin ; ~number ≥ ~min ; ~number > ~min ) and\rIf ( ~includeMax ; ~number ≤ ~max ; ~number < ~max )",
      "isEven": "Mod ( GetAsNumber ( ~number ) ; 2 ) = 0",
      "isOdd": "Mod ( GetAsNumber ( ~number ) ; 2 ) ≠ 0"
    },
    "Parameters": {
      "Get": "GetValue ( Get ( ScriptParameter ) ; ~position )",
      "Pack": "Let ( \r[\r$variablesList = ~variablesList ;\r~assign = TT.List.Custom ( 1 ; ValueCount ( $variablesList ) ; \r\"Let ( \r[ \r~variable = GetValue ( $variablesList ; [n] ) ;\r~variable = If ( Left ( ~variable ; 1 ) ≠ \\\"$\\\" ; \\\"$\\\" ) & ~variable ;\r~name = Substitute ( ~variable ; \\\"$\\\" ; \\\"\\\" ) ;\r~value = Evaluate ( ~variable ) ;\r$json = JSONSetElement ( $json ; ~name ; ~value ; TT.Json.Type ( ~value ) )\r] ;\r\\\"\\\"\r)\" \r)\r] ;\r\r$json\r\r)",
      "Unpack": "Let (\r[\r$parameters = ~parameters ;\r$isJson = TT.Json.isValid ( $parameters ) ;\r$keys = If ( $isJson ; JSONListKeys ( $parameters ; \"\" ) ) ;\r\r$variableNames = If ( $isJson ;\rList ( ~variablesNames ; RightValues ( $keys ; ValueCount ( $keys ) - ValueCount ( ~variablesNames ) ) ) ;\rList ( ~variablesNames ; LeftValues ( \"a¶b¶c¶d¶e¶f¶g¶h¶i¶j¶k¶l¶m¶n¶o¶p¶q¶r¶s¶t¶u¶v¶w¶x¶y¶z\" ; 26 - ValueCount ( ~variablesNames ) ) )\r) ;\r\r~count = ValueCount ( $variableNames ) ;\r\r~letVariables = TT.List.Custom ( 1 ; ~count ; \r\"Let( \r[ \r~key = GetValue ( $keys ; [n] ) ;\r~variableName = GetValue ( $variableNames ; [n] ) ;\r~value = If ( $isJson ; JsonGetElement ( $parameters ; ~key ) ; GetValue ( $parameters ; [n] ) ) ; \r~text = GetAsText ( ~value ) ; \r~number = GetAsNumber ( ~value ) ; \r~validDate = IsValid ( GetAsDate ( ~text ) ) and not IsEmpty ( ~number ) ; \r~validTime = IsValid ( GetAsTime ( ~text ) ) and Position ( ~text ; \\\":\\\" ; 1 ; 1 ) > 0 and not IsEmpty ( ~number ) ;\r~value = Case ( \r\t\t\t~value = \\\"\\\" or ~value = \\\"?\\\" ; Quote ( ~value ) ;\r\t\t\t~validTime and ~validDate ; \\\"GetAsTimestamp ( \\\" & Quote ( ~value ) & \\\" )\\\" ;\r\t\t\t~validTime ; \\\"GetAsTime ( \\\" & Quote ( ~value ) & \\\" )\\\" ;\r\t\t\t~validDate ; \\\"GetAsDate ( \\\" & Quote ( ~value ) & \\\" )\\\" ;\r\t\t\t~text ≠ GetAsText ( ~number ) ; Quote ( ~value ) ; \r\t\t\t~number\r\t\t)\r] ; \r\\\"$\\\" & ~variableName & \\\"=\\\" & ~value )\" \r) ;\r\r~assign = Evaluate ( \"Let ([\" & Substitute ( ~letVariables ; ¶ ; \";\" ) & \"] ; \\\"\\\" )\" )\r] ;\r\rIf ( Position ( ~letVariables ; \"error\" ; 1 ; 1 ) ; \"ERR\" ; \"OK\" )\r\r) "
    },
    "Path": {
      "Build": "Let ( \r[\r~baseFolder = Case ( \r\tPosition ( ~baseFolder ; \"temp\" ; 1 ; 1 ) ; Get ( TemporaryPath ) ;\r\tPosition ( ~baseFolder ; \"desk\" ; 1 ; 1 ) ; Get ( DesktopPath ) ;\r\tPosition ( ~baseFolder ; \"docu\" ; 1 ; 1 ) ; Get ( DocumentsPath )\r) ;\r\r//Test container reference and extract filename\r~containerName = GetContainerAttribute ( ~filenameOrContainer; \"filename\" ) ;\r\r//If parameter is a valid container reference, return the container filename, else use the parameter as filename\r~filename = Choose ( ~containerName = \"\" ; ~containerName ; ~filenameOrContainer )\r] ;\r\rTT.Path.FM ( ~baseFolder & TT.Filename.Format ( ~filename ; TT.Filename.Extension ( ~filename ) ; \"\" ; \"\" ) ; ~isImage )\r\r)",
      "Combine": "Let ([\r\t~sep = If ( PatternCount ( ~segmentsList ; \"\\\\\" ) > 1 ;  \"\\\\\" ;  \"/\" ) ;\r\t~count = ValueCount ( ~segmentsList );\r\t\r\t~segment = GetValue ( ~segmentsList ; 1 ) ;\r\t~segment2 = GetValue ( ~segmentsList ; 2 ) ;\r\t~leftChar = Left ( ~segment2 ; 1 ) ;\r\t~segment2 = If ( \r\t\t~leftChar = \"/\" or ~leftChar = \"\\\\\" ;  \r\t\t\tRight ( ~segment2 ; Length ( ~segment2 ) - 1 );\r\t\t// Else\r\t\t\t~segment2\r\t);\r\t/* remove trailing slash from segment 1 */\r\t~rightChar = Right ( ~segment ; 1 );\r\t~segment = If ( \r\t\t~rightChar = \"/\" or ~rightChar = \"\\\\\" ;  \r\t\t\tLeft ( ~segment ; Length ( ~segment ) - 1 );\r\t\t// Else\r\t\t\t~segment\r\t);\r\t/* remove trailing slash from segment 2 */\r\t~rightChar = Right ( ~segment2 ; 1 );\r\t~segment2 = If ( \r\t\t~rightChar = \"/\" or ~rightChar = \"\\\\\" ;  \r\t\t\tLeft ( ~segment2 ; Length ( ~segment2 ) - 1 );\r\t\t// Else\r\t\t\t~segment2\r\t);\t\r\t~segment = ~segment & ~sep & ~segment2 \r];\r\tCase ( \r\t\t~count <= 1 ; \r\t\t\t~segmentsList ;\r\t\t~count = 2 ;\r\t\t\t~segment ;\r\t\t// Else\r\t\t\tTT.Path.Combine ( List ( ~segment ; RightValues ( ~segmentsList ; ~count - 2 ) ) )\r)\r\r)",
      "FM": "If ( \r\tLeft ( ~fullPath ; 7 ) = \"fmnet:/\" ; \r\t\t~fullPath ; \r\t// Else\r\t\tLet ([\r\t\t\t/* normalize */\r\t\t\t~fullPath = TT.Path.Normalize ( ~fullPath ) ;\r\r\t\t\t/* on Mac, remove \"/Volumes/\" */\r\t\t\t~fullPath = If (\r\t\t\t\tGet ( SystemPlatform ) = 1 /* Mac */ and Left ( ~fullPath ; 9 ) = \"/Volumes/\" ;\r\t\t\t\t\tRight ( ~fullPath ; Length ( ~fullPath ) - 8 ) ;\r\t\t\t\t// Else\r\t\t\t\t\t~fullPath\r\t\t\t);\r\r\t\t\t/* prepend with \"file:\", which works the same as filewin: or filemac: (in my testing, at least) */\r\t\t\t~fullPath = If ( ~isImage ; \"image:\" ; \"file:\" ) & ~fullPath\r\t\t];\r\t\t\t~fullPath\r\t\t)\r) // end if",
      "LastNode": "If (\r\tIsEmpty ( Trim ( ~fullPath ) ) ; \r\t\"\" ;\r\tLet ([\r\t\t~fullPath = TT.Path.Normalize ( ~fullPath );\r//\t\t~sep = If ( Get ( SystemPlatform ) = -2 /* Windows */ ;  \"\\\\\" ;  \"/\" ) ;\r\t\t~sep = \"/\";\r\t\t~lastSeparator = Position ( ~fullPath ; ~sep ; Length ( ~fullPath ) ; -1 ) ;\r\t\t~node = Right ( ~fullPath ; Length ( ~fullPath ) - ~lastSeparator ) \r\t];\r\t\t~node\r\t)\r)",
      "Normalize": "If ( \r\tLeft ( ~fullPath ; 7 ) = \"fmnet:/\" ; \r\t~fullPath ; \r\tLet ([\r\t\t/* path separator */\r\t\t~fullPath = Substitute ( ~fullPath ; \"\\\\\" ; \"/\"  ) ;\r\r\t\t/* remove file* prefix, if any */\r\t\t~fullPath = Case ( \r\t\t\tLeft ( ~fullPath ; 5 ) = \"file:\" ;\r\t\t\t\tRight ( ~fullPath ; Length ( ~fullPath ) - 5 ) ;\r\t\t\tLeft ( ~fullPath ; 8 ) = \"filewin:\" or  Left ( ~fullPath ; 8 ) = \"filemac:\" ;\r\t\t\t\tRight ( ~fullPath ; Length ( ~fullPath ) - 8 ) ;\r\t\t\t// Else\r\t\t\t\t~fullPath \r\t\t);\r\r\t\t/* on Mac, add \"/Volumes/\" if it doesn't exist */\r\t\t~fullPath = If ( \r\t\t\tGet ( SystemPlatform ) = 1 /* Mac */ and Left ( ~fullPath ; 9 ) ≠ \"/Volumes/\" ;\r\t\t\t\tIf (\r\t\t\t\t\tLeft ( ~fullPath ; 1 ) = \"/\" ;\r\t\t\t\t\t\"/Volumes/\" & Right ( ~fullPath ; Length ( ~fullPath ) - 1 );\r\t\t\t\t\t\"/Volumes/\" & ~fullPath \r\t\t\t\t) ;\r\t\t\t// Else\r\t\t\t\t~fullPath\r\t\t);\r\r\t\t/* on Windows, prepend with forward slash, if it doesn't exist */\r\t\t~fullPath = If (\r\t\t\tGet ( SystemPlatform ) = -2 /* Windows */ and Left ( ~fullPath ; 1 ) ≠ \"/\" ;\r\t\t\t\t\"/\" & ~fullPath;\r\t\t\t// Else\r\t\t\t\t~fullPath\r\t\t\t\r\t\t);\r\r\t\t/* never end with a path separator */\r\t\t~fullPath = If (\r\t\t\tRight ( ~fullPath ; 1 ) = \"/\" ;\r\t\t\t\tLeft ( ~fullPath ; Length ( ~fullPath ) - 1 ) ;\r\t\t\t// Else\r\t\t\t\t~fullPath\r\t\t)\r\t];\r\t\t~fullPath\r\t)\r) // end if",
      "OS": "If ( \r\tLeft ( ~fullPath ; 7 ) = \"fmnet:/\" ; \r\t\t\"?\" ; \r\t// Else\r\t\tLet ([\r\t\t\t/* normalize */\r\t\t\t~fullPath = TT.Path.Normalize ( ~fullPath ) ;\r\r\t\t\t/* adjust for Windows */\r\t\t\t~fullPath = If ( \r\t\t\t\tGet ( SystemPlatform ) = -2  ; /* Windows */\r\t\t\t\t\tIf ( \r\t\t\t\t\t\t// not a network path\r\t\t\t\t\t\tLeft ( ~fullPath ; 2 ) ≠ \"//\" ;\r\t\t\t\t\t\t\tSubstitute ( Right ( ~fullPath ; Length ( ~fullPath ) - 1 ) ; \"/\" ; \"\\\\\" ) ;\r\t\t\t\t\t\t// Else\r\t\t\t\t\t\t\t Substitute ( ~fullPath ; \"/\" ; \"\\\\\" ) \r\t\t\t\t\t) ;\r\t\t\t\t// Else\r\t\t\t\t\t~fullPath\r\t\t\t)\r\t\t];\r\t\t\t~fullPath\r\t\t)\r) // end if",
      "Parent": "If (\r\tIsEmpty ( Trim ( ~fullPath ) ) ; \r\t\"\" ;\r\tLet ([\r\t\t/* trim */\r\t\t~fullPath = Trim ( ~fullPath ) ;\r\r\t\t/* remove last node */\r\t\t~separator = If ( PatternCount ( ~fullPath ; \"/\" ) > 2 ; \"/\" ; \"\\\\\" ) ;\r\t\t~endsWithSeparator = Right ( ~fullPath ; 1 ) = ~separator ;\r\t\t~lastSeparator = Position ( ~fullPath ; ~separator ; Length ( ~fullPath ) - 1 ; -1 ) ;\r\t\t~lastSeparator = If ( ~lastSeparator ≠ \"\" ; ~lastSeparator ; Position ( ~fullPath ; ~separator ; Length ( ~fullPath ) - 1 ; -1 ) ) ;\r\t\t~fullPath = \r\t\t\tIf (\r\t\t\t\t~lastSeparator = 0 ;\r\t\t\t\t\t\"\" ; /* error: last separator not found */\r\t\t\t\t// Else\r\t\t\t\t\tLeft ( ~fullPath ; ~lastSeparator - If ( not ~endsWithSeparator ; 1 ) )\r\t\t\t)\r\t] ;\r\t\t~fullPath\r\t)\r)",
      "Url": "Let (\r~fullPath = TT.Path.Normalize ( ~fullPath ) ;// Substitute ( ~fullPath ; [ \"filewin:\" ; \"\" ] ;[ \"filemac:\" ; \"\" ] ; [ \"file:\" ; \"\" ] ) ;\r\rCase(\r\tLeft(~fullPath;1)=\"/\" and Abs(Get(SystemPlatform))=1;  // (case x) \r\t\t\"file://\"&~fullPath;\r\tLeft(~fullPath;1)=\"/\" and Get(SystemPlatform)=-2;  // (case y)\r\t\t\"file://\"&~fullPath;\r\tAbs(Get(SystemPlatform))=1;  // -1=PPC Mac, 1=Intel Mac (undocumented) \r\t\t\"file://\"&Right(~fullPath;Length(~fullPath)-6);  // (case a) \r\tGet(SystemPlatform)=-2 and Left(~fullPath;7)=\"file://\";  // Windows UNC drive\r\t\t\"file:\"&Substitute(Right(~fullPath;Length(~fullPath)-7);\"/\";\"\\\\\")  // (case b) \r\t;  // Anything else\r\t\t\"file://\"&Right(~fullPath;Length(~fullPath)))  /* (case c) */\r\r\r)\r\r\r/*\rLet (\r~fullPath = // Substitute ( ~fullPath ; [ \"filewin:\" ; \"\" ] ;[ \"filemac:\" ; \"\" ] ; [ \"file:\" ; \"\" ] ) ;\r\rCase(\r\tLeft(~fullPath;1)=\"/\" and Abs(Get(SystemPlatform))=1;  // (case x) \r\t\t\"file:///Volumes\"&~fullPath;\r\tLeft(~fullPath;1)=\"/\" and Get(SystemPlatform)=-2;  // (case y)\r\t\t\"file://\"&~fullPath;\r\tAbs(Get(SystemPlatform))=1;  // -1=PPC Mac, 1=Intel Mac (undocumented) \r\t\t\"file:///Volumes/\"&Right(~fullPath;Length(~fullPath)-6);  // (case a) \r\tGet(SystemPlatform)=-2 and Left(~fullPath;7)=\"file://\";  // Windows UNC drive\r\t\t\"file:\\\\\\\\\"&Substitute(Right(~fullPath;Length(~fullPath)-7);\"/\";\"\\\\\")  // (case b) \r\t;  // Anything else\r\t\t\"file:///\"&Right(~fullPath;Length(~fullPath)-6))  // (case c)\r\r)\r*/"
    },
    "SQL": {
      "ConvertValue": "Let ( \r[\r~type = TT.Fm.TypeOf ( ~value )\r] ;\r\rCase ( \r~value = \"\" ; \"NULL\" ;\r~type = \"timestamp\" ; \"'\" & TT.Timestamp.Convert.FmToIso ( ~value ; \" \" ) & \"'\" ;\r~type = \"date\" ; \"'\" & TT.Date.Convert.FmToIso ( ~value ) & \"'\" ;\r~type = \"time\" ; \"'\" & TT.Time.Convert.FmToIso ( ~value ) & \"'\" ;\r~type = \"number\" ; ~value ;\r\"'\" & ~value & \"'\"\r)\r\r)",
      "Field": "Let ( \r[\r~field = If ( not Position ( ~field ; \"::\" ; 1 ; 1 ) ; GetFieldName ( ~field ) ; ~field )\r] ;\r\rSubstitute ( \"\\\"\" & ~field & \"\\\"\" ; \"::\" ; \"\\\".\\\"\" \r\r)\r\r)",
      "Query": {
        "Build": "Let ( \r[\r~select = TT.Text.GetBetween ( ~query ; \"select\" ; \"from\" ; 1 ; 0 ) ;\r~query = Replace ( ~query ; Position ( ~query ; \"from\" ; 1 ; 1 ) ; 4 ; \"¶FROM\" ) ;\r~fromTable = Trim ( Substitute ( TT.Text.GetBetween ( ~query ; \"from \" ; \" \" ; 1 ; 0 ) ; \"\\\"\" ; \"\" ) ) ;\r\r~query = Substitute ( ~query ; [ \"INNER JOIN\" ; \"JOIN\" ] ; [ \"inner join\" ; \"JOIN\" ] ; [ \"join\" ; \"JOIN\" ] ; [ \"JOIN\" ; \"¶JOIN\" ] ) ;\r\r~where = Position ( ~query ; \"where\" ; 1 ; 1 ) ;\r~query = If ( ~where ; Replace ( ~query ; ~where ; 5 ; \"¶WHERE\" ) ; ~query ) ;\r\r~groupBy = Position ( ~query ; \"group by\" ; 1 ; 1 ) ;\r~query = If ( ~groupBy ; Replace ( ~query ; ~groupBy ; 8 ; \"¶GROUP BY\" ) ; ~query ) ;\r\r~having = Position ( ~query ; \"having\" ; 1 ; 1 ) ;\r~query = If ( ~having ; Replace ( ~query ; ~having ; 6 ; \"¶HAVING\" ) ; ~query ) ;\r\r~orderBy = Position ( ~query ; \"order by\" ; 1 ; 1 ) ;\r~query = If ( ~orderBy ; Replace ( ~query ; ~orderBy ; 7 ; \"¶ORDER BY\" ) ; ~query ) ;\r\r~fetch = Position ( ~query ; \"fetch first\" ; 1 ; 1 ) ;\r~query = If ( ~fetch ; Replace ( ~query ; ~fetch ; 11 ; \"¶fetch first\" ) ; ~query ) ;\r\r~query = Substitute ( ~query ; [ \" AND \" ; \"¶AND \" ] ; [ \" and \" ; \"¶AND \" ] ) ;\r~query = Substitute ( ~query ; [ \" OR \" ; \"¶OR \" ] ; [ \" or \" ; \"¶OR \" ] ) ;\r~query = Substitute ( ~query ; \",\" ; \"¶\" ) ;\r\r~count = ValueCount ( ~query )\r] ;\r\r\rIf ( ~count < 4 ;\r\r//Query Simple\rLet (\r[\r~hasFunction = PatternCount ( ~select ; \"(\" ) and PatternCount ( ~select ; \")\" ) ;\r~selectField = Trim ( Case ( \rPatternCount ( ~select ; \"\\\"\" ) = 2 ; TT.Text.GetBetween ( ~select ; \"\\\"\" ; \"\\\"\" ; 1 ; 0 ) ;\r~hasFunction ; TT.Text.GetBetween ( ~select ; \"(\" ; \")\" ; 1 ; 0 ) ;\rTT.Text.GetBetween ( ~select ; \" \" ; \" \" ; 1 ; 0 )\r) ) ;\r~function = If ( ~hasFunction ; Quote ( Trim ( TT.Text.GetBetween ( ~select ; \" \" ; \"(\" ; 1 ; 0 ) ) ) ; Quote ( \"\" ) ) ;\r\r~where = TT.Text.GetBetween ( ~query ; \"WHERE \" ; \"\" ; 1 ; 0 ) ;\r~whereField = Trim ( Case ( \rIsEmpty ( ~where ) ; Quote ( \"\" ) ;\rPatternCount ( ~where ; \"\\\"\" ) = 2 ; TT.Text.GetBetween ( ~where ; \"\\\"\" ; \"\\\"\" ; 1 ; 0 ) ;\rTT.Text.GetBetween ( ~where ; \"\" ; \" \" ; 1 ; 0 )\r) ) ;\r~whereField = If ( not IsEmpty ( ~whereField ) ; \"GetFieldName ( \" & ~fromTable & \"::\" & ~whereField & \" )\" ) ;\r~whereOperator = Case (\rPatternCount ( ~where ; \"!=\" ) ; \"!=\" ;\rPatternCount ( ~where ; \"=\" ) ; \"=\" ;\rPatternCount ( ~where ; \"<>\" ) ; \"<>\" ;\rPatternCount ( ~where ; \"<\" ) ; \"<\" ;\rPatternCount ( ~where ; \">\" ) ; \">\" ;\rPatternCount ( ~where ; \"like\" ) ; \"like\" ;\r) ;\r~whereValue = Trim ( TT.Text.GetBetween ( ~where ; ~whereOperator ; \"\" ; 1 ; 0 ) ) ;\r~whereValue = If ( TT.Fm.TypeOf ( ~whereValue ) = \"number\" ; ~whereValue ; Quote ( ~whereValue ) ) ;\r~whereOperator = Quote ( ~whereOperator )\r] ;\r\"TT.SQL.Query.Simple ( GetFieldName ( \" & ~fromTable & \"::\" & ~selectField & \" ) ; \" & ~function & \" ; \" & ~whereField & \" ; \" & ~whereOperator & \" ; \" & ~whereValue & \" )\" \r);\r\r\r\r//Query Complex\rLet (\r~jsonQuery = While (\r[\r~count = ValueCount ( ~query ) ;\r~i = 1 ;\r~jsonQuery = \"\" ;\r~key = \"\" ;\r~selectCounter = 0 ;\r~joinsCounter = 0 ;\r~whereCounter = 0 ;\r~groupByCounter = 0 ;\r~havingCounter = 0 ;\r~orderByCounter = 0\r] ;\r\r~i <= ~count ;\r\r[\r~line = Trim ( GetValue ( ~query ; ~i ) ) ;\r~key = Case (\rPatternCount ( ~line ; \"select\" ) ; \"select\" ;\rPatternCount ( ~line ; \"from\" ) ; \"from\" ;\rPatternCount ( ~line ; \"join\" ) ; \"joins\" ;\rPatternCount ( ~line ; \"where\" ) ; \"where\" ;\rPatternCount ( ~line ; \"group by\" ) ; \"groupBy\" ;\rPatternCount ( ~line ; \"having\" ) ; \"having\" ;\rPatternCount ( ~line ; \"order by\" ) ; \"orderBy\" ;\rPatternCount ( ~line ; \"fetch\" ) ; \"firstRows\" ;\r~key\r) ;\r~lineContainsKey = PatternCount ( ~line ; ~key ) ;\r~hasFunction = PatternCount ( ~line ; \"(\" ) and PatternCount ( ~select ; \")\" ) ;\r~hasQuotes = PatternCount ( ~line ; \"\\\"\" ) = 2 ; \r~hasAnd = PatternCount ( ~line ; \"and \" ) ; \r~hasOr = PatternCount ( ~line ; \"or \" ) ; \r\r~selectField = Trim ( Case ( \r~key ≠ \"select\" ; \"\" ;\r~hasQuotes ; TT.Text.GetBetween ( ~line ; \"\\\"\" ; \"\\\"\" ; 1 ; 0 ) ;\r~hasFunction ; TT.Text.GetBetween ( ~line ; \"(\" ; \")\" ; 1 ; 0 ) ;\r~lineContainsKey ; TT.Text.GetBetween ( ~line ; ~key & \" \" ; \" \" ; 1 ; 0 ) ;\rTT.Text.GetBetween ( ~line ; \"\" ; \"\" ; 1 ; 0 )\r) ) ;\r\r~selectFunction = Case ( \r~key ≠ \"select\" or not ~hasFunction ; \"\" ;\rQuote ( Trim ( TT.Text.GetBetween ( ~line ; \" \" ; \"(\" ; 1 ; 0 ) ) )\r) ;\r\r~joinTable = Trim ( Case ( ~key ≠ \"joins\" ; \"\" ;  TT.Text.GetBetween ( ~line ; \"join \" ; \" on\" ; 1 ; 0 ) ) ) ;\r~joinLeftField = Case ( ~key ≠ \"joins\" ; \"\" ; TT.Text.GetBetween ( ~line ; \" on \" ; \"=\" ; 1 ; 0 ) ) ;\r~joinLeftField = Trim ( If ( PatternCount ( ~joinLeftField ; \".\" ) ; TT.Text.GetBetween ( ~joinLeftField ; \".\" ; \"\" ; 1 ; 0 ) ) ) ;\r~joinRightField = Case ( ~key ≠ \"joins\" ; \"\" ; TT.Text.GetBetween ( ~line ; \"=\" ; \"\" ; 1 ; 0 ) ) ;\r~joinRightField = Trim ( If ( PatternCount ( ~joinRightField ; \".\" ) ; TT.Text.GetBetween ( ~joinRightField ; \".\" ; \"\" ; 1 ; 0 ) ) ) ;\r~joinLeftField = Case ( IsEmpty ( ~joinLeftField ) ; \"\" ; ~fromTable & \"::\" & ~joinLeftField ) ;\r~joinRightField = Case ( IsEmpty ( ~joinRightField ) ; \"\" ; ~joinTable & \"::\" & ~joinRightField ) ;\r\r~whereField = Trim ( Case ( \r~key ≠ \"where\" ; \"\" ; \r~hasQuotes ; TT.Text.GetBetween ( ~line ; \"\\\"\" ; \"\\\"\" ; 1 ; 0 ) ;\r~hasFunction ; TT.Text.GetBetween ( ~line ; \"(\" ; \")\" ; 1 ; 0 ) ;\rTT.Text.GetBetween ( ~line ; \" \" ; \" \" ; 1 ; 0 )\r) ) ;\r~whereFunction = If ( ~hasFunction and not IsEmpty ( ~whereField ) ; Quote ( Trim ( TT.Text.GetBetween ( ~line ; \" \" ; \"(\" ; 1 ; 0 ) ) ) ) ;\r~whereOperator = Case (\rIsEmpty ( ~whereField ) ; \"\" ;\rPatternCount ( ~line ; \"!=\" ) ; \"!=\" ;\rPatternCount ( ~line ; \"=\" ) ; \"=\" ;\rPatternCount ( ~line ; \"<>\" ) ; \"<>\" ;\rPatternCount ( ~line ; \"<\" ) ; \"<\" ;\rPatternCount ( ~line ; \">\" ) ; \">\" ;\rPatternCount ( ~line ; \"like\" ) ; \"like\" ;\r) ;\r~whereValue = Trim ( If ( not IsEmpty ( ~whereField ) ; Trim ( TT.Text.GetBetween ( ~line ; ~whereOperator ; \"\" ; 1 ; 0 ) ) ) ) ;\r~whereType = TT.Fm.TypeOf ( ~whereValue ) ;\r~whereJsonType = If ( ~whereType = \"number\" ; \"JSONNumber\" ; \"JSONString\" ) ;\r~whereValue = Case ( IsEmpty ( ~whereValue ) ; \"\" ; ~whereType = \"number\" ; ~whereValue ; Quote ( ~whereValue ) ) ;\r~whereOperator = If ( not IsEmpty ( ~whereOperator ) ; Quote ( ~whereOperator ) ) ;\r\r~groupByField = Trim ( Case ( \r~key ≠ \"groupBy\" ; \"\" ;\r~hasQuotes ; TT.Text.GetBetween ( ~line ; \"\\\"\" ; \"\\\"\" ; 1 ; 0 ) ;\rTT.Text.GetBetween ( ~line ; \" \" ; \"\" ; 2 ; 0 )\r) ) ;\r\r~havingField = Trim ( Case ( \r~key ≠ \"having\" ; \"\" ; \r~hasQuotes ; TT.Text.GetBetween ( ~line ; \"\\\"\" ; \"\\\"\" ; 1 ; 0 ) ;\r~hasFunction ; TT.Text.GetBetween ( ~line ; \"(\" ; \")\" ; 1 ; 0 ) ;\rTT.Text.GetBetween ( ~line ; \" \" ; \" \" ; 1 ; 0 )\r) ) ;\r~havingFunction = If ( ~hasFunction and not IsEmpty ( ~havingField ) ; Quote ( Trim ( TT.Text.GetBetween ( ~line ; \" \" ; \"(\" ; 1 ; 0 ) ) ) ) ;\r~havingOperator = Case (\rIsEmpty ( ~havingField ) ; \"\" ;\rPatternCount ( ~line ; \"!=\" ) ; \"!=\" ;\rPatternCount ( ~line ; \"=\" ) ; \"=\" ;\rPatternCount ( ~line ; \"<>\" ) ; \"<>\" ;\rPatternCount ( ~line ; \"<\" ) ; \"<\" ;\rPatternCount ( ~line ; \">\" ) ; \">\" ;\rPatternCount ( ~line ; \"like\" ) ; \"like\" ;\r) ;\r~havingValue = Trim ( If ( not IsEmpty ( ~havingField ) ; TT.Text.GetBetween ( ~line ; ~havingOperator ; \"\" ; 1 ; 0 ) ) ) ;\r~havingType = TT.Fm.TypeOf ( ~havingValue ) ;\r~havingJsonType = If ( ~havingType = \"number\" ; \"JSONNumber\" ; \"JSONString\" ) ;\r~havingValue = Case ( IsEmpty ( ~havingValue ) ; \"\" ; ~havingType = \"number\" ; ~havingValue ; Quote ( ~havingValue ) ) ;\r~havingOperator = If ( not IsEmpty ( ~havingOperator ) ; Quote ( ~havingOperator ) ) ;\r\r~orderByField = Trim ( Case ( \r~key ≠ \"orderBy\" ; \"\" ;\r~hasQuotes ; TT.Text.GetBetween ( ~line ; \"\\\"\" ; \"\\\"\" ; 1 ; 0 ) ;\rTT.Text.GetBetween ( ~line ; \" \" ; \"\" ; 2 ; 0 )\r) ) ;\r\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~selectField ) ; \"[ \\\"select[\" & ~selectCounter & \"].field\\\" ; GetFieldName ( \" & ~fromTable & \"::\" & ~selectField & \" ) ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~selectFunction ) ; \"[ \\\"select[\" & ~selectCounter & \"].function\\\" ; \" & ~selectFunction & \" ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~joinTable ) ; \"[ \\\"joins[\" & ~joinsCounter & \"].type\\\" ; \" & Quote ( \"join\" ) & \" ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~joinTable ) ; \"[ \\\"joins[\" & ~joinsCounter & \"].leftField\\\" ; GetFieldName ( \" & ~joinLeftField & \" ) ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~joinTable ) ; \"[ \\\"joins[\" & ~joinsCounter & \"].rightField\\\" ; GetFieldName ( \" & ~joinRightField & \" ) ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~whereField ) ; \"[ \\\"where[\" & ~whereCounter & \"].field\\\" ; GetFieldName ( \" & ~fromTable & \"::\" & ~whereField & \" ) ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~whereFunction ) ; \"[ \\\"where[\" & ~whereCounter & \"].function\\\" ; \" & ~whereFunction & \" ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~whereOperator ) ; \"[ \\\"where[\" & ~whereCounter & \"].operator\\\" ; \" & ~whereOperator & \" ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~whereValue ) ; \"[ \\\"where[\" & ~whereCounter & \"].value\\\" ; \" & ~whereValue & \" ; \" & ~whereJsonType & \" ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~whereField ) and ~hasOr ; \"[ \\\"where[\" & ~whereCounter & \"].or\\\" ; \" & \"true\" & \" ; JSONBoolean ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~groupByField ) ; \"[ \\\"groupBy[\" & ~groupByCounter & \"].field\\\" ; GetFieldName ( \" & ~fromTable & \"::\" & ~groupByField & \" ) ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~havingField ) ; \"[ \\\"having[\" & ~havingCounter & \"].field\\\" ; GetFieldName ( \" & ~fromTable & \"::\" & ~havingField & \" ) ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~havingFunction ) ; \"[ \\\"having[\" & ~havingCounter & \"].function\\\" ; \" & ~havingFunction & \" ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~havingOperator ) ; \"[ \\\"having[\" & ~havingCounter & \"].operator\\\" ; \" & ~havingOperator & \" ; JSONString ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~havingValue ) ; \"[ \\\"having[\" & ~havingCounter & \"].value\\\" ; \" & ~havingValue & \" ; \" & ~havingJsonType & \" ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~havingField ) and ~hasOr ; \"[ \\\"having[\" & ~havingCounter & \"].or\\\" ; \" & \"true\" & \" ; JSONBoolean ]\" ) ) ;\r~jsonQuery = List ( ~jsonQuery ; If ( not IsEmpty ( ~orderByField ) ; \"[ \\\"orderBy[\" & ~orderByCounter & \"].field\\\" ; GetFieldName ( \" & ~fromTable & \"::\" & ~orderByField & \" ) ; JSONString ]\" ) ) ;\r\r~selectCounter = ~selectCounter + If ( not IsEmpty ( ~selectField ) ; 1 ) ;\r~joinsCounter = ~joinsCounter + If ( not IsEmpty ( ~joinTable ) ; 1 ) ;\r~whereCounter = ~whereCounter + If ( not IsEmpty ( ~whereField ) ; 1 ) ;\r~groupByCounter = ~groupByCounter + If ( not IsEmpty ( ~groupByField ) ; 1 ) ;\r~havingCounter = ~havingCounter + If ( not IsEmpty ( ~havingField ) ; 1 ) ;\r~orderByCounter = ~orderByCounter + If ( not IsEmpty ( ~orderByField ) ; 1 ) ;\r~i = ~i + 1\r] ;\r\rSubstitute ( ~jsonQuery ; ¶ ; \" ;¶\" )\r) ;\r\r\"TT.SQL.Query.Complex (¶¶JsonSetElement ( \\\"{}\\\" ;¶\" & ~jsonQuery & \"¶)¶¶)\"\r)\r\r)\r\r)",
        "Complex": "Let (\r[\r//------------------------------------------------------------------------------------------------------------------------\r~joinsArray = JSONGetElement ( ~jsonQuery ; \"joins\" ) ;\r~joins = If ( IsEmpty ( ~joinsArray ) ; \"{}\" ; While (\r[\r~joinsCount = ValueCount ( JSONListKeys ( ~joinsArray ; \"\" ) ) ;\r~joinsFinal = \"{}\" ;\r~i = 0\r] ;\r\r~i < ~joinsCount ;\r\r[\r~joinObject = JSONGetElement ( ~joinsArray ; ~i ) ;\r~joinLeftField = JSONGetElement ( ~joinObject ; \"leftField\" ) ;\r~joinLeftTable = TT.Fm.Database.GetTableName ( ~joinLeftField ) ;\r~joinLeftField = TT.SQL.Field ( ~joinLeftField ) ;\r~joinRightField = JSONGetElement ( ~joinObject ; \"rightField\" ) ;\r~joinRightTable = TT.Fm.Database.GetTableName ( ~joinRightField ) ;\r~joinRightField = TT.SQL.Field ( ~joinRightField ) ;\r$joinsRightTablesList = List ( $joinsRightTablesList ; ~joinRightTable ) ;\r~joinType = JSONGetElement ( ~joinObject ; \"type\" ) ;\r\r~joinsFinal = JSONSetElement ( ~joinsFinal ; ~joinLeftTable ; JSONGetElement ( ~joinsFinal ; ~joinLeftTable ) & \" \" & ~joinType & \" \" & ~joinRightTable & \" on \" & ~joinLeftField & \" = \" & ~joinRightField ; 1 ) ;\r\r~i = ~i + 1\r] ;\r\r~joinsFinal\r\r) \r) ;\r//------------------------------------------------------------------------------------------------------------------------\r~selectArray = JSONGetElement ( ~jsonQuery ; \"select\" ) ;\r~select = While (\r[\r~selectCount = ValueCount ( JSONListKeys ( ~selectArray ; \"\" ) ) ;\r~selectFinal = \"\" ;\r~tablesList = \"\" ;\r~i = 0\r] ;\r\r~i < ~selectCount ;\r\r[\r~selectObject = JSONGetElement ( ~selectArray ; ~i ) ;\r~selectField = JSONGetElement ( ~selectObject ; \"field\" ) ;\r~tablesList = TT.Text.SuperTrim ( UniqueValues ( List ( ~tablesList ; TT.Fm.Database.GetTableName ( ~selectField ) ) ) ) ;\r~selectField = TT.SQL.Field ( ~selectField ) ;\r~selectFunction = JSONGetElement ( ~selectObject ; \"function\" ) ;\r~selectField = If ( not IsEmpty ( ~selectFunction ) ; ~selectFunction & \"(\" & ~selectField & \")\" ; ~selectField ) ;\r\r~selectFinal = If ( not IsEmpty ( ~selectFinal ) ; ~selectFinal & \",\" ) & ~selectField ;\r\r~i = ~i + 1\r] ;\r\r\"SELECT \" & ~selectFinal & \" FROM \" & \rWhile ( \r[\r~tablesCount = ValueCount ( ~tablesList ) ;\r~tablesListFinal = \"\" ;\r~i = 1\r] ;\r\r~i <= ~tablesCount ;\r\r[\r~table = GetValue ( ~tablesList ; ~i ) ;\r~exists = not IsEmpty ( FilterValues ( $joinsRightTablesList ; ~table ) ) ;\r~tablesListFinal = List ( ~tablesListFinal ; If ( not ~exists ; ~table & JSONGetElement ( ~joins ; ~table ) ) ) ;\r~i = ~i + 1\r] ;\r\rSubstitute ( ~tablesListFinal ; ¶ ; \", \" )\r\r)\r\r) ;\r//------------------------------------------------------------------------------------------------------------------------\r~whereArray = JSONGetElement ( ~jsonQuery ; \"where\" ) ;\r~where = If ( not IsEmpty ( ~whereArray ) ; While (\r[\r~whereCount = ValueCount ( JSONListKeys ( ~whereArray ; \"\" ) ) ;\r~whereFinal = \"\" ;\r~i = 0\r] ;\r\r~i < ~whereCount ;\r\r[\r~whereObject = JSONGetElement ( ~whereArray ; ~i ) ;\r~whereField = TT.SQL.Field ( JSONGetElement ( ~whereObject ; \"field\" ) ) ;\r~whereOperator = JSONGetElement ( ~whereObject ; \"operator\" ) ;\r~whereValue = JSONGetElement ( ~whereObject ; \"value\" ) ;\r~whereFunction = JSONGetElement ( ~whereObject ; \"function\" ) ;\r~whereField = If ( not IsEmpty ( ~whereFunction ) ; ~whereFunction & \"(\" & ~whereField & \")\" ; ~whereField ) ;\r~whereOr = JSONGetElement ( ~whereObject ; \"or\" ) ;\r\r~whereIsText = TT.Fm.TypeOf ( ~whereValue ) = \"text\" ;\r~whereIsNull = ~whereValue = \"\" or ~whereValue = \"null\" ;\r~whereNot = If ( ~whereOperator = \"!=\" or ~whereOperator = \"<>\" ; \"NOT\" ) ;\r~whereField = If ( ~whereIsText ; \"lower(\" & ~whereField & \")\" ; ~whereField ) ;\r~whereValue = If ( ~whereIsText ; Lower ( ~whereValue ) ; ~whereValue ) ;\r\r~whereFinal = If ( not IsEmpty ( ~whereFinal ) ; ~whereFinal & If ( ~whereOr ; \" OR \" ; \" AND \" ) ) & ~whereField & \" \" & \rIf ( ~whereIsNull ; \r\" IS \" & ~whereNot & \" NULL\" ;\r~whereOperator & \" \" & If ( ~whereOperator ≠ \"in\" or ValueCount ( ~whereValue ) < 2 ; \"?\" ; \"(\" & Substitute ( TT.List.Custom ( 1 ; ValueCount ( ~whereValue ) ; \"\\\"?\\\"\" ) ; ¶ ; \",\" ) & \")\" ) \r) ;\r\r~i = ~i + 1\r] ;\r\rIf ( not IsEmpty ( ~whereFinal ) ; \"WHERE \" & ~whereFinal )\r\r)\r) ;\r\r//------------------------------------------------------------------------------------------------------------------------\r\r~groupByArray = JSONGetElement ( ~jsonQuery ; \"groupBy\" ) ;\r~groupBy = If ( not IsEmpty ( ~groupByArray ) ; While (\r[\r~groupByCount = ValueCount ( JSONListKeys ( ~groupByArray ; \"\" ) ) ;\r~groupByFinal = \"\" ;\r~i = 0\r] ;\r\r~i < ~groupByCount ;\r\r[\r~groupByObject = JSONGetElement ( ~groupByArray ; ~i ) ;\r~groupByField = TT.SQL.Field ( JSONGetElement ( ~groupByObject ; \"field\" ) ) ;\r~groupByDirection = JSONGetElement ( ~groupByObject ; \"direction\" ) ;\r~groupByFinal = If ( not IsEmpty ( ~groupByFinal ) ; ~groupByFinal & \",\" ) & ~groupByField ;\r~i = ~i + 1\r] ;\r\rIf ( not IsEmpty ( ~groupByFinal ) ; \"GROUP BY \" & ~groupByFinal )\r\r)\r) ;\r\r\r//------------------------------------------------------------------------------------------------------------------------\r\r~havingArray = JSONGetElement ( ~jsonQuery ; \"having\" ) ;\r~having = If ( not IsEmpty ( ~havingArray ) ; While (\r[\r~havingCount = ValueCount ( JSONListKeys ( ~havingArray ; \"\" ) ) ;\r~havingFinal = \"\" ;\r~i = 0\r] ;\r\r~i < ~havingCount ;\r\r[\r~havingObject = JSONGetElement ( ~havingArray ; ~i ) ;\r~havingField = TT.SQL.Field ( JSONGetElement ( ~havingObject ; \"field\" ) ) ;\r~havingOperator = JSONGetElement ( ~havingObject ; \"operator\" ) ;\r~havingValue = JSONGetElement ( ~havingObject ; \"value\" ) ;\r~havingFunction = JSONGetElement ( ~havingObject ; \"function\" ) ;\r~havingField = ~havingFunction & \"(\" & ~havingField & \")\" ;\r~havingOr = JSONGetElement ( ~havingObject ; \"or\" ) ;\r\r~havingFinal = If ( not IsEmpty ( ~havingFinal ) ; ~havingFinal & If ( ~havingOr ; \" OR \" ; \" AND \" ) ) & ~havingField & \" \" & ~havingOperator & \" \" &\rIf ( ~havingOperator ≠ \"in\" or ValueCount ( ~havingValue ) < 2; \"?\" ; \"(\" & Substitute ( TT.List.Custom ( 1 ; ValueCount ( ~havingValue ) ; \"\\\"?\\\"\" ) ; ¶ ; \",\" ) & \")\" ) ;\r\r~i = ~i + 1\r] ;\r\rIf ( not IsEmpty ( ~havingFinal ) ; \"HAVING \" & ~havingFinal )\r\r)\r) ;\r//------------------------------------------------------------------------------------------------------------------------\r~orderByArray = JSONGetElement ( ~jsonQuery ; \"orderBy\" ) ;\r~orderBy = If ( not IsEmpty ( ~orderByArray ) ; While (\r[\r~orderByCount = ValueCount ( JSONListKeys ( ~orderByArray ; \"\" ) ) ;\r~orderByFinal = \"\" ;\r~i = 0\r] ;\r\r~i < ~orderByCount ;\r\r[\r~orderByObject = JSONGetElement ( ~orderByArray ; ~i ) ;\r~orderByField = TT.SQL.Field ( JSONGetElement ( ~orderByObject ; \"field\" ) ) ;\r~orderByFunction = JSONGetElement ( ~orderByObject ; \"function\" ) ;\r~orderByField = If ( not IsEmpty ( ~orderByFunction ) ; ~orderByFunction & \"(\" & ~orderByField & \")\" ; ~orderByField ) ;\r~orderByDirection = JSONGetElement ( ~orderByObject ; \"direction\" ) ;\r~orderByFinal = If ( not IsEmpty ( ~orderByFinal ) ; ~orderByFinal & \",\" ) & ~orderByField & \" \" & ~orderByDirection ;\r~i = ~i + 1\r] ;\r\rIf ( not IsEmpty ( ~orderByFinal ) ; \"ORDER BY \" & ~orderByFinal )\r\r) \r) ;\r//------------------------------------------------------------------------------------------------------------------------\r\r~argumentsArray = TT.Json.Array.Merge ( ~whereArray ; ~havingArray ) ;\r~arguments = While (\r[\r~argumentsCount = ValueCount ( JSONListKeys ( ~argumentsArray ; \"\" ) ) ;\r~argumentsFinal = \"\" ;\r~i = 0\r] ;\r\r~i < ~argumentsCount ;\r\r[\r~argumentObject = JSONGetElement ( ~argumentsArray ; ~i ) ;\r~argumentValue = JSONGetElement ( ~argumentObject ; \"value\" ) ;\r~argumentOperator = JSONGetElement ( ~argumentObject ; \"operator\" ) ;\r~argumentType = TT.Fm.TypeOf ( ~argumentValue ) ;\r~argumentIsNull = ~argumentValue = \"\" or ~argumentValue = \"null\" ;\r~argumentValue = If ( ~argumentType = \"text\" ; Lower ( ~argumentValue ) ; ~argumentValue ) ;\r~argumentValue = If ( ~argumentType = \"number\" or ~argumentOperator = \"in\" ; ~argumentValue ; Quote ( ~argumentValue ) ) ;\r\r~argumentsFinal = If ( not IsEmpty ( ~argumentsFinal ) ; ~argumentsFinal ) & \rCase (\r~argumentIsNull ; \"\" ;\r~argumentOperator = \"in\" ; \";\\\"\" & Substitute ( ~argumentValue ; ¶ ; Quote ( \";\" ) ) & \"\\\"\" ;\r\";\" & ~argumentValue  \r) ;\r\r~i = ~i + 1\r] ;\r\r~argumentsFinal\r\r) ;\r//------------------------------------------------------------------------------------------------------------------------\r~firstRows = JSONGetElement ( ~jsonQuery ; \"firstRows\" ) ;\r~firstRows = If ( ~firstRows ; \"FETCH FIRST \" & ~firstRows & \" ROW ONLY\" ) ;\r$rowSeparator = JSONGetElement ( ~jsonQuery ; \"separators.row\" ) ;\r$columnSeparator = JSONGetElement ( ~jsonQuery ; \"separators.column\" ) ;\r$sqlQuery = ~select & \" \" & ~where & \" \" & ~groupBy & \" \" & ~having & \" \" & ~orderBy & \" \" & ~firstRows ;\r~executeSQL = \"ExecuteSQL ( $sqlQuery ; $columnSeparator ; $rowSeparator \" & ~arguments & \" )\"\r\r] ;\r\rEvaluate ( ~executeSQL )\r\r)",
        "Simple": "Let (\r[\r~from = \" FROM \" & TT.Fm.Database.GetTableName ( ~selectField ) ;\r\r~selectField = TT.SQL.Field ( ~selectField ) ;\r~selectField = If ( not IsEmpty ( ~selectFunction ) ; ~selectFunction & \"(\" & ~selectField & \")\" ; ~selectField ) ;\r~select = \"SELECT \" & ~selectField ;\r\r~whereIsText = TT.Fm.TypeOf ( ~whereValue ) = \"text\" ;\r~whereIsNull = ~whereValue = \"\" or ~whereValue = \"null\" ;\r~whereNot = If ( ~whereOperator = \"!=\" or ~whereOperator = \"<>\" ; \"NOT\" ) ;\r~whereValue = If ( ~whereIsText ; Lower ( ~whereValue ) ; ~whereValue ) ;\r~whereField = TT.SQL.Field ( ~whereField ) ;\r~whereField = If ( ~whereIsText ; \"lower(\" & ~whereField & \")\" ; ~whereField ) ;\r\r~where = Case ( \rIsEmpty ( ~whereField ) ; \"\" ;\r~whereIsNull ; \" WHERE \" & ~whereField & \" IS \" & ~whereNot & \" NULL\" ;\r\" WHERE \" & ~whereField & \" \" & ~whereOperator & \" ?\"\r)\r] ;\r\rExecuteSQL ( ~select & ~from & ~where ; \"\" ; \"\" ; ~whereValue )\r\r)"
      },
      "ToJsonArrays": "Let ( \r[\r~query = Replace ( ~query ; Position ( ~query ; \"SELECT\" ; 1 ; 1 ) + 6 ; 1 ; \" '\\\"'||\" )\r] ;\r\rJSONGetElement ( \"[[\" & ExecuteSQL ( ~query ; \"\\\",\\\"\" ; \"\\\"],[\" ; ~argument ) & \"\\\"]]\" ; \"\")\r\r)",
      "ToJsonObjects": "Let ( \r[\r~select = TT.Text.GetBetween ( ~query ; \"SELECT\" ; \"FROM\" ; 1 ; 0 ) ;\r$selectList = Substitute ( ~select ; \",\" ; ¶ ) ;\r$keysList = ~keysList ;\r\r~newSelect = \" '{\\\"\" & TT.List.Custom ( 1 ; ValueCount ( $selectList ) ; \"GetValue ( $keysList ; [n] ) & \\\"\\\\\\\":\\\\\\\"'||\\\" & GetValue ( $selectList ; [n] )\" ) & \"||'\\\"}' \" ;\r~newSelect = Substitute ( ~newSelect ; ¶ ; \"||'\\\",\\\"\" ) ;\r~query = Substitute ( ~query ; ~select ; ~newSelect )\r] ;\r\rJSONGetElement ( \"[\" & ExecuteSQL ( ~query ; \"\" ; \",\" ; ~argument ) & \"]\" ; \"\" )\r\r)"
    },
    "Text": {
      "Accentless": "Substitute ( ~text ;\r[ \"ª\" ; \"a\" ] ;\r[ \"á\" ; \"a\" ] ;\r[ \"Á\" ; \"A\" ] ;\r[ \"à\" ; \"a\" ] ;\r[ \"À\" ; \"A\" ] ;\r[ \"ă\" ; \"a\" ] ;\r[ \"Ă\" ; \"A\" ] ;\r[ \"â\" ; \"a\" ] ;\r[ \"Â\" ; \"A\" ] ;\r[ \"ǎ\" ; \"a\" ] ;\r[ \"Ǎ\" ; \"A\" ] ;\r[ \"å\" ; \"a\" ] ;\r[ \"Å\" ; \"A\" ] ;\r[ \"ǻ\" ; \"a\" ] ;\r[ \"Ǻ\" ; \"A\" ] ;\r[ \"ä\" ; \"a\" ] ;\r[ \"Ä\" ; \"A\" ] ;\r[ \"Ä\" ; \"A\" ] ;\r[ \"ã\" ; \"a\" ] ;\r[ \"Ã\" ; \"A\" ] ;\r[ \"ą\" ; \"a\" ] ;\r[ \"Ą\" ; \"A\" ] ;\r[ \"ā\" ; \"a\" ] ;\r[ \"Ā\" ; \"A\" ] ;\r[ \"æ\" ; \"ae\" ] ;\r[ \"Æ\" ; \"AE\" ] ;\r[ \"ǽ\" ; \"ae\" ] ;\r[ \"Ǽ\" ; \"AE\" ] ;\r[ \"ć\" ; \"c\" ] ;\r[ \"Ć\" ; \"C\" ] ;\r[ \"ĉ\" ; \"c\" ] ;\r[ \"Ĉ\" ; \"C\" ] ;\r[ \"č\" ; \"c\" ] ;\r[ \"Č\" ; \"C\" ] ;\r[ \"ċ\" ; \"c\" ] ;\r[ \"Ċ\" ; \"C\" ] ;\r[ \"ç\" ; \"c\" ] ;\r[ \"Ç\" ; \"C\" ] ;\r[ \"ď\" ; \"d\" ] ;\r[ \"Ď\" ; \"D\" ] ;\r[ \"đ\" ; \"d\" ] ;\r[ \"Đ\" ; \"D\" ] ;\r[ \"ð\" ; \"d\" ] ;\r[ \"Ð\" ; \"D\" ] ;\r[ \"é\" ; \"e\" ] ;\r[ \"É\" ; \"E\" ] ;\r[ \"è\" ; \"e\" ] ;\r[ \"È\" ; \"E\" ] ;\r[ \"ĕ\" ; \"e\" ] ;\r[ \"Ĕ\" ; \"E\" ] ;\r[ \"ê\" ; \"e\" ] ;\r[ \"Ê\" ; \"E\" ] ;\r[ \"ě\" ; \"e\" ] ;\r[ \"Ě\" ; \"E\" ] ;\r[ \"ë\" ; \"e\" ] ;\r[ \"Ë\" ; \"E\" ] ;\r[ \"ė\" ; \"e\" ] ;\r[ \"Ė\" ; \"E\" ] ;\r[ \"ę\" ; \"e\" ] ;\r[ \"Ę\" ; \"E\" ] ;\r[ \"ē\" ; \"e\" ] ;\r[ \"Ē\" ; \"E\" ] ;\r[ \"ƒ\" ; \"f\" ] ;\r[ \"ğ\" ; \"g\" ] ;\r[ \"Ğ\" ; \"G\" ] ;\r[ \"ĝ\" ; \"g\" ] ;\r[ \"Ĝ\" ; \"G\" ] ;\r[ \"ġ\" ; \"g\" ] ;\r[ \"Ġ\" ; \"G\" ] ;\r[ \"ģ\" ; \"g\" ] ;\r[ \"Ģ\" ; \"G\" ] ;\r[ \"ĥ\" ; \"h\" ] ;\r[ \"Ĥ\" ; \"H\" ] ;\r[ \"ħ\" ; \"h\" ] ;\r[ \"Ħ\" ; \"H\" ] ;\r[ \"í\" ; \"i\" ] ;\r[ \"Í\" ; \"I\" ] ;\r[ \"ì\" ; \"i\" ] ;\r[ \"Ì\" ; \"I\" ] ;\r[ \"ĭ\" ; \"i\" ] ;\r[ \"Ĭ\" ; \"I\" ] ;\r[ \"î\" ; \"i\" ] ;\r[ \"Î\" ; \"I\" ] ;\r[ \"ǐ\" ; \"i\" ] ;\r[ \"Ǐ\" ; \"I\" ] ;\r[ \"ï\" ; \"i\" ] ;\r[ \"Ï\" ; \"I\" ] ;\r[ \"ĩ\" ; \"i\" ] ;\r[ \"Ĩ\" ; \"I\" ] ;\r[ \"į\" ; \"i\" ] ;\r[ \"Į\" ; \"I\" ] ;\r[ \"ī\" ; \"i\" ] ;\r[ \"Ī\" ; \"I\" ] ;\r[ \"ĳ\" ; \"ij\" ] ;\r[ \"Ĳ\" ; \"IJ\" ] ;\r[ \"ı\" ; \"i\" ] ;\r[ \"ĵ\" ; \"j\" ] ;\r[ \"Ĵ\" ; \"J\" ] ;\r[ \"ķ\" ; \"k\" ] ;\r[ \"Ķ\" ; \"K\" ] ;\r[ \"ĺ\" ; \"l\" ] ;\r[ \"Ĺ\" ; \"L\" ] ;\r[ \"ľ\" ; \"l\" ] ;\r[ \"Ľ\" ; \"L\" ] ;\r[ \"ļ\" ; \"l\" ] ;\r[ \"Ļ\" ; \"L\" ] ;\r[ \"ł\" ; \"l\" ] ;\r[ \"Ł\" ; \"L\" ] ;\r[ \"ŀ\" ; \"l\" ] ;\r[ \"Ŀ\" ; \"L\" ] ;\r[ \"ń\" ; \"n\" ] ;\r[ \"Ń\" ; \"N\" ] ;\r[ \"ň\" ; \"n\" ] ;\r[ \"Ň\" ; \"N\" ] ;\r[ \"ñ\" ; \"n\" ] ;\r[ \"Ñ\" ; \"N\" ] ;\r[ \"ņ\" ; \"n\" ] ;\r[ \"ŉ\" ; \"n\" ] ;\r[ \"Ņ\" ; \"N\" ] ;\r[ \"º\" ; \"o\" ] ;\r[ \"ó\" ; \"o\" ] ;\r[ \"Ó\" ; \"O\" ] ;\r[ \"ò\" ; \"o\" ] ;\r[ \"Ò\" ; \"O\" ] ;\r[ \"ŏ\" ; \"o\" ] ;\r[ \"Ŏ\" ; \"O\" ] ;\r[ \"ô\" ; \"o\" ] ;\r[ \"Ô\" ; \"O\" ] ;\r[ \"ǒ\" ; \"o\" ] ;\r[ \"Ǒ\" ; \"O\" ] ;\r[ \"ö\" ; \"o\" ] ;\r[ \"Ö\" ; \"O\" ] ;\r[ \"ő\" ; \"o\" ] ;\r[ \"Ő\" ; \"O\" ] ;\r[ \"õ\" ; \"o\" ] ;\r[ \"Õ\" ; \"O\" ] ;\r[ \"ø\" ; \"o\" ] ;\r[ \"Ø\" ; \"O\" ] ;\r[ \"ǿ\" ; \"o\" ] ;\r[ \"Ǿ\" ; \"O\" ] ;\r[ \"ō\" ; \"o\" ] ;\r[ \"Ō\" ; \"O\" ] ;\r[ \"ơ\" ; \"o\" ] ;\r[ \"Ơ\" ; \"O\" ] ;\r[ \"œ\" ; \"oe\" ] ;\r[ \"Œ\" ; \"OE\" ] ;\r[ \"ŕ\" ; \"r\" ] ;\r[ \"Ŕ\" ; \"R\" ] ;\r[ \"ř\" ; \"r\" ] ;\r[ \"Ř\" ; \"R\" ] ;\r[ \"ŗ\" ; \"r\" ] ;\r[ \"Ŗ\" ; \"R\" ] ;\r[ \"ś\" ; \"s\" ] ;\r[ \"Ś\" ; \"S\" ] ;\r[ \"ŝ\" ; \"s\" ] ;\r[ \"Ŝ\" ; \"S\" ] ;\r[ \"š\" ; \"s\" ] ;\r[ \"Š\" ; \"S\" ] ;\r[ \"ş\" ; \"s\" ] ;\r[ \"Ş\" ; \"S\" ] ;\r[ \"ſ\" ; \"s\" ] ;\r[ \"ß\" ; \"SS\" ] ;\r[ \"ť\" ; \"t\" ] ;\r[ \"Ť\" ; \"T\" ] ;\r[ \"ţ\" ; \"t\" ] ;\r[ \"Ţ\" ; \"T\" ] ;\r[ \"ŧ\" ; \"t\" ] ;\r[ \"Ŧ\" ; \"T\" ] ;\r[ \"ú\" ; \"u\" ] ;\r[ \"Ú\" ; \"U\" ] ;\r[ \"ù\" ; \"u\" ] ;\r[ \"Ù\" ; \"U\" ] ;\r[ \"ŭ\" ; \"u\" ] ;\r[ \"Ŭ\" ; \"U\" ] ;\r[ \"û\" ; \"u\" ] ;\r[ \"Û\" ; \"U\" ] ;\r[ \"ǔ\" ; \"u\" ] ;\r[ \"Ǔ\" ; \"U\" ] ;\r[ \"ů\" ; \"u\" ] ;\r[ \"Ů\" ; \"U\" ] ;\r[ \"ü\" ; \"u\" ] ;\r[ \"Ü\" ; \"U\" ] ;\r[ \"ǘ\" ; \"u\" ] ;\r[ \"Ǘ\" ; \"U\" ] ;\r[ \"ǜ\" ; \"u\" ] ;\r[ \"Ǜ\" ; \"U\" ] ;\r[ \"ǚ\" ; \"u\" ] ;\r[ \"Ǚ\" ; \"U\" ] ;\r[ \"ǖ\" ; \"u\" ] ;\r[ \"Ǖ\" ; \"U\" ] ;\r[ \"ű\" ; \"u\" ] ;\r[ \"Ű\" ; \"U\" ] ;\r[ \"ũ\" ; \"u\" ] ;\r[ \"Ũ\" ; \"U\" ] ;\r[ \"ų\" ; \"u\" ] ;\r[ \"Ų\" ; \"U\" ] ;\r[ \"ū\" ; \"u\" ] ;\r[ \"Ū\" ; \"U\" ] ;\r[ \"ư\" ; \"u\" ] ;\r[ \"Ư\" ; \"U\" ] ;\r[ \"ŵ\" ; \"w\" ] ;\r[ \"Ŵ\" ; \"W\" ] ;\r[ \"ý\" ; \"y\" ] ;\r[ \"Ý\" ; \"Y\" ] ;\r[ \"ŷ\" ; \"y\" ] ;\r[ \"Ŷ\" ; \"Y\" ] ;\r[ \"ÿ\" ; \"y\" ] ;\r[ \"Ÿ\" ; \"Y\" ] ;\r[ \"ź\" ; \"z\" ] ;\r[ \"Ź\" ; \"Z\" ] ;\r[ \"ž\" ; \"z\" ] ;\r[ \"Ž\" ; \"Z\" ] ;\r[ \"ż\" ; \"z\" ] ;\r[ \"Ż\" ; \"Z\" ]\r)",
      "Address": {
        "List": "Let ( \r[\r~province = If ( ~province ≠ \"\" ; \"(\"  &~province & \")\" )\r] ;\r\rList (\r~contact ;\r~compagnie ;\rSubstitute ( List ( ~adr1 ; ~adr2 ) ; ¶ ; \" \" )  ;\rSubstitute ( List ( ~ville ; ~province ; ~codePostal ) ; ¶ ; \" \" )  ;\r~pays\r)\r\r)"
      },
      "Concatenate": "Substitute ( ~list ; ¶ ; \" \" )",
      "Email": {
        "isValid": "Filter ( ~email; \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_-@.\" ) = ~email // There are no invalid characters.\rand If (\rPatternCount ( ~email; \"@\" ) = 1 // There is only one @ symbol.\rand IsEmpty ( Filter ( Left ( ~email; 1 ) & Right ( ~email; 1 ); \"@\" ) ) // @ symbol is not first or last character.\rand not ( // No illegal symbol combinations.\r+ PatternCount ( ~email; \"__\" )\r+ PatternCount ( ~email; \"_.\" )\r+ PatternCount ( ~email; \"._\" )\r+ PatternCount ( ~email; \"..\" )\r+ PatternCount ( ~email; \".-\" )\r+ PatternCount ( ~email; \"-.\" )\r) ;\r\rLet (\r[\rposDom = Position ( ~email; \"@\"; 1; 1 ) + 1 ;\rposTLD = Position ( ~email; \".\"; 1; PatternCount( ~email ; \".\" ) ) ;\ruser = Left ( ~email; posDom - 2 ) ;\rdom = Middle ( ~email; posDom; posTLD - posDom ) ;\rtld = Right ( ~email; Length ( ~email ) - posTLD )\r] ;\r\rIf (\r// There is a dot after the @ symbol, but not immediately after.\rposTLD > 1 ;\r\r// The first and last characters are alphanumeric.\rIsEmpty ( Filter ( Left ( user; 1 ) /*& Right ( user; 1 )*/ & Left ( dom; 1 ) & Right ( dom; 1 ) & Left ( tld; 1 ) & Right ( tld; 1 ); \"_-.\" ) )\r\r// No underscore in domain.\rand IsEmpty ( Filter ( dom & tld; \"_\" ) )\r\r// Top level domain is valid.\rand not IsEmpty ( FilterValues ( tld & ¶; \"aero¶asia¶biz¶cat¶com¶coop¶edu¶gov¶info¶int¶jobs¶mil¶mobi¶museum¶name¶net¶org¶pro¶tel¶travel¶ac¶ad¶ae¶af¶ag¶ai¶al¶am¶an¶ao¶aq¶ar¶as¶at¶au¶aw¶ax¶az¶ba¶bb¶bd¶be¶bf¶bg¶bh¶bi¶bj¶bm¶bn¶bo¶br¶bs¶bt¶bv¶bw¶by¶bz¶ca¶cc¶cd¶cf¶cg¶ch¶ci¶ck¶cl¶cm¶cn¶co¶cr¶cu¶cv¶cx¶cy¶cz¶de¶dj¶dk¶dm¶do¶dz¶ec¶ee¶eg¶er¶es¶et¶eu¶fi¶fj¶fk¶fm¶fo¶fr¶ga¶gb¶gd¶ge¶gf¶gg¶gh¶gi¶gl¶gm¶gn¶gp¶gq¶gr¶gs¶gt¶gu¶gw¶gy¶hk¶hm¶hn¶hr¶ht¶hu¶id¶ie¶il¶im¶in¶io¶iq¶ir¶is¶it¶je¶jm¶jo¶jp¶ke¶kg¶kh¶ki¶km¶kn¶kp¶kr¶kw¶ky¶kz¶la¶lb¶lc¶li¶lk¶lr¶ls¶lt¶lu¶lv¶ly¶ma¶mc¶md¶me¶mg¶mh¶mk¶ml¶mm¶mn¶mo¶mp¶mq¶mr¶ms¶mt¶mu¶mv¶mw¶mx¶my¶mz¶na¶nc¶ne¶nf¶ng¶ni¶nl¶no¶np¶nr¶nu¶nz¶om¶pa¶pe¶pf¶pg¶ph¶pk¶pl¶pm¶pn¶pr¶ps¶pt¶pw¶py¶qa¶re¶ro¶rs¶ru¶rw¶sa¶sb¶sc¶sd¶se¶sg¶sh¶si¶sj¶sk¶sl¶sm¶sn¶so¶sr¶st¶su¶sv¶sy¶sz¶tc¶td¶tf¶tg¶th¶tj¶tk¶tl¶tm¶tn¶to¶tp¶tr¶tt¶tv¶tw¶tz¶ua¶ug¶uk¶us¶uy¶uz¶va¶vc¶ve¶vg¶vi¶vn¶vu¶wf¶ws¶ye¶yt¶yu¶za¶zm¶zw¶xn--0zwm56d¶xn--11b5bs3a9aj6g¶xn--80akhbyknj4f¶xn--9t4b11yi5a¶xn--deba0ad¶xn--g6w251d¶xn--hgbk6aj7f53bba¶xn--hlcj6aya9esc7a¶xn--jxalpdlp¶xn--kgbechtv¶xn--zckzah¶arpa¶\" ) )\r\r) // end inner if\r) // end let\r) // end outer if"
      },
      "Exists": "GetAsBoolean ( Position ( ~text ; ~searchString ; 0 ; 1 ) )",
      "Filter": {
        "Alpha": "Filter ( ~text ; \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzªáÁàÀăĂâÂǎǍåÅǻǺäÄÄãÃąĄāĀæeÆEǽeǼEćĆĉĈčČċĊçÇďĎđĐðÐéÉèÈĕĔêÊěĚëËėĖęĘēĒƒğĞĝĜġĠģĢĥĤħĦíÍìÌĭĬîÎǐǏïÏĩĨįĮīĪĳjĲJıĵĴķĶĺĹľĽļĻłŁŀĿńŃňŇñÑņŉŅºóÓòÒŏŎôÔǒǑöÖőŐõÕøØǿǾōŌơƠœeŒEŕŔřŘŗŖśŚŝŜšŠşŞſßSťŤţŢŧŦúÚùÙŭŬûÛǔǓůŮüÜǘǗǜǛǚǙǖǕűŰũŨųŲūŪưƯŵŴýÝŷŶÿŸźŹžŽżŻ¶ \t\" )",
        "Alphanumeric": "Filter ( ~text ; \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzªáÁàÀăĂâÂǎǍåÅǻǺäÄÄãÃąĄāĀæeÆEǽeǼEćĆĉĈčČċĊçÇďĎđĐðÐéÉèÈĕĔêÊěĚëËėĖęĘēĒƒğĞĝĜġĠģĢĥĤħĦíÍìÌĭĬîÎǐǏïÏĩĨįĮīĪĳjĲJıĵĴķĶĺĹľĽļĻłŁŀĿńŃňŇñÑņŉŅºóÓòÒŏŎôÔǒǑöÖőŐõÕøØǿǾōŌơƠœeŒEŕŔřŘŗŖśŚŝŜšŠşŞſßSťŤţŢŧŦúÚùÙŭŬûÛǔǓůŮüÜǘǗǜǛǚǙǖǕűŰũŨųŲūŪưƯŵŴýÝŷŶÿŸźŹžŽżŻ0123456789¶ \t\" )",
        "Numeric": "Filter ( ~text ; \"0123456789¶ \t\" )"
      },
      "Generate": {
        "LoremIpsum": "Let (\r[\r~loremIpsum = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam ornare. Donec suscipit. Integer enim nibh, condimentum non, fermentum non, adipiscing quis, ipsum. Ut pellentesque, enim eget pharetra dignissim, erat pede ultricies mi, suscipit pharetra erat velit gravida purus. Ut sagittis. Aliquam aliquam lacinia dui. Vestibulum erat turpis, rutrum et, molestie vitae, consequat ut, nulla. Nullam suscipit. Mauris neque. Vivamus felis ligula, sagittis in, aliquam eu, ultrices ut, mi. Sed ac nibh ac odio iaculis tristique. Aliquam erat volutpat. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Maecenas viverra commodo eros. Aenean scelerisque consequat quam. Donec fermentum, augue ut porttitor fringilla, nisl leo placerat mi, ac bibendum urna felis id tellus. Duis erat pede, varius vitae, egestas nec, molestie vitae, neque. Donec suscipit luctus massa.\rProin metus sem, sagittis ac, venenatis id, convallis a, velit. Sed iaculis nulla quis diam. Nam vel urna. Fusce rhoncus augue lacinia nisl. Integer id sem eget nisl venenatis vehicula. Proin nibh tellus, faucibus dignissim, viverra pulvinar, imperdiet at, massa. Sed porta sollicitudin lectus. Donec at felis. Quisque sit amet massa in lectus feugiat pretium. Ut gravida, sem non lobortis commodo, lorem mi gravida nisl, vitae tempor nisi nibh vel eros. Fusce turpis. Maecenas blandit velit nec ante. Donec ultricies vehicula leo. Nulla elementum urna quis turpis. Phasellus non ipsum nec eros congue dignissim. Proin varius.¶Nunc lacus libero, sodales et, fermentum a, sodales sit amet, tortor. Nam id metus. Donec congue. Praesent lectus. Nunc ultricies mi vitae urna. Aenean in sem. Donec sodales libero sit amet tortor. Etiam blandit iaculis enim. Sed tincidunt convallis elit. In non risus. Etiam euismod. Phasellus vel magna. Sed iaculis hendrerit lectus. Sed iaculis.¶Pellentesque in neque. Proin vulputate, leo eu condimentum feugiat, nisi metus interdum nunc, et tempor nibh nunc imperdiet massa. Duis neque purus, consectetuer non, lobortis vitae, malesuada sit amet, nibh. Etiam libero purus, pulvinar non, venenatis eu, pharetra cursus, magna. Curabitur convallis ligula quis sem. Curabitur pretium purus eget risus. Sed sapien dui, fringilla non, fermentum et, vehicula vitae, arcu. Nulla at nibh. Vestibulum dignissim tellus eget urna. Ut est. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris posuere. Cras elementum porta libero. Nullam at tortor. Morbi posuere dictum est.¶Maecenas condimentum venenatis quam. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Fusce auctor, elit at venenatis tincidunt, mauris est malesuada dolor, nec gravida mi sapien nec mauris. Ut in risus. Curabitur molestie tincidunt libero. Vivamus dignissim. Vivamus eget felis. Vestibulum posuere. Duis pharetra tincidunt lectus. Suspendisse in urna a nisl porttitor consectetuer. Donec congue mi eu ligula. Phasellus sit amet quam sit amet arcu sodales blandit. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aenean dui. Integer eget massa sit amet velit ultrices molestie. \" ;\r\r~loremSize = WordCount ( ~loremIpsum ) ;\r~loremCount = Ceiling ( ~size / ~loremSize ) ;\r\r~evalString = ( 10 ^ ~loremCount ) - 1 \r\t \r] ;\r\rIf ( ~loremCount > 1 ; \rSubstitute ( Left ( ~evalString ; ~loremCount - 1 ) ; 9 ; ~loremIpsum ) & LeftWords ( ~loremIpsum ; ( Mod ( ~size ; ~loremSize ) ) ) ;\rLeftWords ( ~loremIpsum ; ~size )\r)\r\r)",
        "Password": "Let (\r[\r~CharsLowerCase = \"qwertzuiopasdfghjklyxcvbnm\" ;\r~CharsUpperCase = \"QWERTZUIPASDFGHJKLYXCVBNM\" ;\r~CharsNumeric = \"123456789\" ;\r~CharsSpecial =   \",.-;:_%&$=?!\" ;\r\r$CharsGroupArray = Case(\r        ~parameter =  1 ; ~CharsLowerCase ;\r        ~parameter =  2 ; ~CharsUpperCase ;\r        ~parameter =  3 ; ~CharsNumeric ;\r        ~parameter =  4 ; ~CharsSpecial ;\r        ~parameter =  5 ; List ( ~CharsNumeric ; ~CharsLowerCase ) ;\r        ~parameter =  6 ; List ( ~CharsUpperCase ; ~CharsNumeric ) ;\r        ~parameter =  7 ; List ( ~CharsNumeric ; ~CharsSpecial ) ;\r        ~parameter =  8 ; List ( ~CharsLowerCase ; ~CharsUpperCase ) ;\r        ~parameter =  9 ; List ( ~CharsNumeric ; ~CharsLowerCase ; ~CharsUpperCase ) ;\r        ~parameter = 10 ; List ( ~CharsLowerCase  ; ~CharsUpperCase ; ~CharsNumeric ; ~CharsSpecial ) ;\r        ~parameter = 11 ; List ( ~CharsLowerCase  ; ~CharsUpperCase ; ~CharsNumeric ; ~CharsLowerCase  ; ~CharsUpperCase ; ~CharsNumeric ; ~CharsSpecial )\r\t) ; \r\r$CharsGroupSize = ValueCount ( $CharsGroupArray )\r\r] ;\r\rSubstitute ( TT.List.Custom ( 1 ; ~length ; \"Let ( [ ~group = GetValue ( $CharsGroupArray ; Int ( Random * $CharsGroupSize ) + 1 ) ; ~size = Length ( ~group ) ] ; Middle ( ~group ; Int ( Random * ~size ) + 1 ; 1 ) )\" ) ; ¶ ; \"\" )\r\r)\r\r/*\rLet (\r[\r~CharsLowerCase = \"qwertzuiopasdfghjklyxcvbnm\" ;\r~CharsUpperCase = \"QWERTZUIPASDFGHJKLYXCVBNM\" ;\r~CharsNumeric = \"123456789\" ;\r~CharsSpecial =   \",.-;:_%&$=?!\" ;\r\r$CharsGroupArray = Case(\r        ~parameter =  1 ; ~CharsLowerCase ;\r        ~parameter =  2 ; ~CharsUpperCase ;\r        ~parameter =  3 ; ~CharsNumeric ;\r        ~parameter =  4 ; ~CharsSpecial ;\r        ~parameter =  5 ; List ( ~CharsNumeric ; ~CharsLowerCase ) ;\r        ~parameter =  6 ; List ( ~CharsUpperCase ; ~CharsNumeric ) ;\r        ~parameter =  7 ; List ( ~CharsNumeric ; ~CharsSpecial ) ;\r        ~parameter =  8 ; List ( ~CharsLowerCase ; ~CharsUpperCase ) ;\r        ~parameter =  9 ; List ( ~CharsNumeric ; ~CharsLowerCase ; ~CharsUpperCase ) ;\r        ~parameter = 10 ; List ( ~CharsLowerCase  ; ~CharsUpperCase ; ~CharsNumeric ; ~CharsSpecial ) ;\r        ~parameter = 11 ; List ( ~CharsLowerCase  ; ~CharsUpperCase ; ~CharsNumeric ; ~CharsLowerCase  ; ~CharsUpperCase ; ~CharsNumeric ; ~CharsSpecial )\r\t) ; \r\r$CharsGroupSize = ValueCount ( $CharsGroupArray ) ;\r~evalString = ( 10 ^ ~length ) - 1 ;\r~evalString = Substitute ( ~evalString ; 9 ; \"Let ( [ ~group =  GetValue ( $CharsGroupArray ; Int ( Random * $CharsGroupSize ) + 1 ) ; ~size = Length ( ~group ) ] ; Middle ( ~group ; Int ( Random * ~size ) + 1 ; 1 ) ) &\" )  \r\r] ;\r\rEvaluate ( Left ( ~evalString ; Length ( ~evalString ) - 1 )\r)\r\r)\r*/",
        "Token": "Let (\r[\r$charsList = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" ;\r$charsCount = Length ( $charsList ) ;\r$size = If( IsEmpty ( ~size ) ; 32 ; ~size )\r] ;\r\rSubstitute ( TT.List.Custom ( 1 ; $size ; \"Middle ( $charsList ; Int ( Random * $charsCount ) + 1 ; 1 )\" ) ; ¶ ; \"\" )\r\r)\r\r\r\r\r/*\rWhile (\r[\r~charList = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" ;\r~charListLength = Length ( ~charList ) ; \r~size = If( IsEmpty ( ~size ) ; 32 ; ~size ) ;\r~result = \"\" ;\r~i = 1\r] ;\r\r~i ≤ ~size ;\r\r[\r~result = ~result & Middle ( ~charList ; Int ( Random * ~charListLength ) ; 1 ) ;\r~i = ~i + 1\r] ;\r\r~result\r\r)\r*/"
      },
      "GetBetween": "Let ( \r[\r~occurrence = If ( IsEmpty ( ~occurrence ) or ~occurrence  ≤ 0 ; 1 ; Int ( ~occurrence ) ) ;   // If occerence isn't 1 or more, set it ~to one\r\r~startPos = If ( IsEmpty ( ~from ) ; 1 ; Position ( ~text ; ~from ; 1 ; ~occurrence ) ) ;     // If parameter \"~from\" is empty start ~from the very begining\r~startPos = If ( ~startPos ; ~startPos + If ( not ~includeFromTo ; Length ( ~from ) ) ) ;   // Si trouvé et qu'on inclue pas les bornes, ajouter longueur du from\r                      \r~endPos =  If ( IsEmpty ( ~to ) ; Length ( ~text ) ; Position ( ~text ; ~to ; ~startPos + 1 ; 1 ) ) ;    // If parameter \"to\" is empty include ~to the very end\r~endPos = If ( ~endPos and ~endPos ≠ Length ( ~text ) ; ~endPos + If ( ~includeFromTo ; Length ( ~to ) ) ; ~endPos ) \r\r ] ; \r   Case ( \r       not ~startPos or not ~endPos ; \"\" ;  //  \"~from\" or ~to is not found in the ~text, this should return an empty string\r        Middle ( ~text ; ~startPos ; ~endPos - If ( IsEmpty ( ~to ) ; \"\" ; ~startPos )  ) // Otherwise return string\r    )\r)",
      "Initials": "While(\r[\r~text = Substitute ( ~text ; \"-\" ; \" 0 \" ) ;\r~i = 1 ;\r~wordCount = WordCount ( ~text ) ;\r~result = \"\"\r] ;\r\r~i ≤ ~wordCount ;\r\r[\r~word = MiddleWords ( ~text ; ~i ; 1 ) ;\r~result = ~result & Upper ( Left ( ~word ; 1 ) ) & \". \" ;\r~i = ~i + 1\r] ;\r\rSubstitute ( ~result ;\r[ \" 0. \" ; \"-\" ] ;\r[ \".\" ; If ( ~usePeriods ; \".\" ; \"\" ) ] ;\r[ \"-\" ; If ( ~useHyphens ; \"-\" ; \" \" ) ] ;\r[ \" \" ; If ( ~useSpaces ; \" \" ; \"\" ) ] \r)\r\r)",
      "Pad": "Let (\r[ \r~str = Substitute (( 10 ^ ~length ) - 1 ; 9 ; ~char ) ;\r~right = Left ( ~leftOrRight ; 1 ) = \"R\" or ~leftOrRight\r] ;\r\rCase ( ~right ; Left ( ~input & ~str ; ~length ) ; Right ( ~str & ~input ; ~length ) )\r\r)",
      "Phone": {
        "Format": "Let ( [ \r          JustNumbers  = Filter ( ~phone ; \"0123456789\" ) ;\r          NewNumber   = Left ( JustNumbers ; Length ( JustNumbers ) - 1 ) ;\r          NewFormat    = Left ( ~format ; Length ( ~format ) - 1)\r        ];\r    Case ( \r        not IsEmpty ( JustNumbers ) ;\r            Case (\r                Right ( ~format ; 1 ) = \"#\" ;\r                    TT.Text.Phone.Format ( NewNumber ; NewFormat ) & Right ( JustNumbers ; 1 ) ;\r                not IsEmpty ( Right ( ~format ; 1 ) );\r                    TT.Text.Phone.Format ( JustNumbers ; NewFormat ) & Right ( ~format ; 1 ) ;\r                // Default ;\r                    TT.Text.Phone.Format ( JustNumbers ; \"#\" )\r            ) ;\r        not IsEmpty ( ~format ) and Right ( ~format ; 1 )  ≠ \"#\"  and Right ( ~format ; 1 )  ≠ \" \";\r            Right ( ~format ; 1 )\r    )\r)\r\r\r\r/*\r\rLet ( \r[\r~phone = Filter ( ~phone ; \"0123456789\" ) ;\r~length = Length ( ~phone ) ;\r\r~hasIndicatifInt = Left ( ~phone ; 1 ) = 1 ; \r~indicatifInt = If ( ~hasIndicatifInt ; \"+\" & Left ( ~phone ; 1 ) & \" \" ) ;\r\r~hasExt = ( ~hasIndicatifInt and ~length > 11 ) or ( not ~hasIndicatifInt and ~length > 10 ) ;\r~ext = If ( ~hasExt ; \" poste \" & Right ( ~phone ; ~length - 10 - If ( ~hasIndicatifInt ; 1 )  ) ) ;\r\r~start = ~hasIndicatifInt + 1 ;\r~indicatifReg = \"(\" & Middle ( ~phone ; ~start ; 3 ) & \") \";\r~phoneNumber = Middle ( ~phone ; ~start + 3 ; 3 ) & \"-\" & Middle ( ~phone ; ~start + 6 ; 4 )\r] ;\r\rIf ( ~length < 10 or ~length > 15 ; TextColor ( \"Invalide\" ; RGB ( 255 ; 0 ; 0 ) ) ;\r\r~indicatifInt & ~indicatifReg & ~phoneNumber & ~ext\r\r)\r\r)\r\r\r*/\r\r\r/*\rLet ( \r[\r~phone = Filter ( ~phone ; \"0123456789\" ) ;\r~length = Length ( ~phone ) ;\r\r~hasIndicatifInt = FilterValues ( ~length ; \"11¶14\" ) ≠ \"\" ;\r~indicatifInt = If ( ~hasIndicatifInt ; \"+\" & Left ( ~phone ; 1 ) & \" \" ) ;\r\r~hasExt = FilterValues ( ~length ; \"13¶14\" ) ≠ \"\" ;\r~ext = If ( ~hasExt ; \" poste \" & Right ( ~phone ; 3 ) ) ;\r\r~start = ~hasIndicatifInt + 1 ;\r~indicatifReg = \"(\" & Middle ( ~phone ; ~start ; 3 ) & \") \";\r~phoneNumber = Middle ( ~phone ; ~start + 3 ; 3 ) & \"-\" & Middle ( ~phone ; ~start + 6 ; 4 )\r] ;\r\rIf ( FilterValues ( ~length ; \"10¶11¶12¶13¶14\" ) = \"\" ; TextColor ( \"Invalide\" ; RGB ( 255 ; 0 ; 0 ) ) ;\r\r~indicatifInt & ~indicatifReg & ~phoneNumber & ~ext\r\r)\r\r)\r*/"
      },
      "Stringify": "\"\\\"\" & Substitute ( ~text ; \r[ \"\\\\\" ; \"\\\\\\\\\" ] ;\r[ \"\\\"\" ; \"\\\\\\\"\" ] ;\r[ \"\\¶\" ; \"\\\\\\¶\" ] ;\r[ \"¶\" ; \"\\¶\" ] \r) & \"\\\"\"",
      "SuperTrim": "Let(\r  [\r    // Determine value of original string with ALL whitespace removed.  \r    ~t2 = Substitute( ~text ; [ \" \" ; \"\" ] ; [ \" \" ; \"\" ] ; [ \"\t\" ; \"\" ] ; [ \"¶\" ; \"\" ] ; [Char ( 10 ) ;\"\" ] ) ;\r    \r    // Determine position of first non-ws character in original string.\r    ~first_char = Position( ~text ; Left( ~t2 ; 1 ); 0; 1 ) ;\r    \r    // Determine position of last non-ww character in original string.\r    ~last_char = Position( ~text ; Right( ~t2 ; 1 ); Length( ~text ) ; -1 )\r  ];\r  \r  // If any non-whitespace characters exist return appropriate\r  // middle portion of original TT.Text.\r  \r  Case( ~first_char; Middle( ~text; ~first_char; ~last_char - ~first_char + 1 ) )\r)"
    },
    "Time": {
      "Convert": {
        "CurrentZoneToUTC": "~time - TT.Timestamp.UTC.Offset",
        "FmToIso": "Let (\r[\r~hours = Hour ( ~time ) ;\r~hours = Right ( \"00\" & ~hours ; 2 ) ;\r\r~minutes = Minute ( ~time ) ;\r~minutes = Right ( \"00\" & ~minutes ; 2 ) ;\r\r~seconds = Seconds ( ~time ) ;\r~secondsDecimals = Mod ( ~seconds ; 1 ) ;\r~seconds = Right ( \"00\" & Int ( ~seconds ) ; 2 ) & If ( ~secondsDecimals ; ~secondsDecimals ) ;\r\r\r~time = List ( ~hours ; ~minutes ; ~seconds )\r\r] ;\r\rSubstitute ( ~time ; ¶ ; \":\" )\r\r)",
        "IsoToFM": "Let (  \r[\r~list = Substitute ( ~isoTime ; \":\" ; ¶ ) ;\r~hours = GetValue ( ~list ; 1 ) ;\r~minutes = GetValue ( ~list ; 2 ) ;\r~seconds = GetValue ( ~list ; 3 )\r] ;\r\rTime ( ~hours ; ~minutes ; ~seconds )\r\r)",
        "UtcToCurrentZone": "~utcTime + TT.Timestamp.UTC.Offset"
      },
      "FastInput": "Let ( [ \r~decimalSeparator = Left ( 1/2 ; 1 ) ;\r~input = Substitute ( GetAsText ( Trim ( ~input ) ) ; [\",\";~decimalSeparator] ; [\".\";~decimalSeparator] )\r] ;\r\rCase (\r\tnot IsEmpty ( Filter ( ~input ; \".,\" ) ) ; Time ( Floor ( ~input ) ; Mod ( ~input ; 1 ) * 60 ; 0 ) ;\r\t~input = GetAsTime ( ~input ) ; GetAsTime ( ~input ) ;  // input is a valid time, leave it untouched\r\t~input = \"//\" ; GetAsTime ( Get ( CurrentHostTimestamp )) ; // current host time\r\t~input = Filter ( ~input ; 1234567890 ) ; Case ( GetAsNumber ( Middle ( ~input ; 1 ; 2 )) > 23 ; Time ( 0 ; Middle ( ~input ; 1 ; 2 ) ; Middle ( ~input ; 3 ; 2 )) ; Time ( 0 + Middle ( ~input ; 1 ; 2 ) ; 0 + Middle ( ~input ; 3 ; 2 ) ; 0 + Middle ( ~input ; 5 ; 2 ))) ;\r\rLet ([\r\t~i = Substitute ( Filter ( ~input ; \"1234567890 :-\" ) ; [\":\" ; \" \"] ; [ \"-\" ; \" \" ] ) ;\r\t~merid = Case (\r\t\t\tPatternCount ( ~input ; \"AM\" ) ; \"AM\" ;\r\t\t\tPatternCount ( ~input ; \"PM\" ) ; \"PM\"\r\t\t) ;\r\t~clock = Case ( not IsEmpty ( ~merid ) ; 12 ; 23 ) ; // 12 AM exists, but 23 is the last displayed hour.\r\t~str = Case (\r\t\tWordCount ( ~i ) = 3 ; \"HMS\"  ;\r\t\tWordCount ( ~i ) = 2 ; Case ( GetAsNumber ( MiddleWords ( ~i ; 1 ; 1 )) <= ~clock ; \"HM\" ; \"MS\" ) ;\r\t\tWordCount ( ~i ) = 1 ; Case ( GetAsNumber ( MiddleWords ( ~i ; 1 ; 1 )) <= ~clock ; \"H\" ; \"M\" )\r\t\t) ;\r\t~h = 0 + Case ( PatternCount ( ~str ; \"H\" ) ; GetAsNumber ( MiddleWords ( ~i ; Position ( ~str ; \"H\" ; 1 ; 1 ) ; 1 ))) ;\r\t~h = Case ( ~merid = \"AM\" and ~h = 12 ; 0 ; ~merid = \"PM\" and ~h <> 12 ; ~h + 12 ; ~h ) ;\r\t~m = 0 + Case ( PatternCount ( ~str ; \"M\" ) ; GetAsNumber ( MiddleWords ( ~i ; Position ( ~str ; \"M\" ; 1 ; 1 ) ; 1 ))) ;\r\t~s = 0 + Case ( PatternCount ( ~str ; \"S\" ) ; GetAsNumber ( MiddleWords ( ~i ; Position ( ~str ; \"S\" ; 1 ; 1 ) ; 1 )))\r];\r\rTime ( ~h ; ~m ; ~s )\r)\r)\r)",
      "Format": "Case ( not IsEmpty ( ~time ) ; \rLet ( \r [ \r// FIXED VARIABLES\r~padhoursChar           = \"\" ;        //   Character to pad the ~hours with in a text result, (Ex.\"0\", \" \", \"\")\r~padAMPMChar         = \" \" ;      //   Character to pad the AM/PM with in a text result, (Ex.\"0\", \" \", \"\")\r~suffixAM                  = \"AM\" ;  //    <------------ CHANGE AM Suffix Here\r~suffixPM                  = \"PM\" ;   //    <------------ CHANGE PM Suffix Here\r\r// DYN. VARIABLES\r~time = GetAsTime ( ~time ) ;  \r~hasSeconds = PatternCount ( GetAsText ( ~time ) ; \":\" ) = 2 ;\r~secs = Mod ( Seconds ( ~time ) ; 60 ) ; \r~secs = If ( ~roundSeconds ; Round ( ~secs ; 0 ) ; ~secs ) ;\r~mins = Mod ( Minute ( ~time ) ; 60 ) + Div ( Seconds ( ~time ) ; 60 ) ; \r~hours = Hour ( ~time ) + Div ( Minute ( ~time ) ; 60 ) ; \r\r\r// -------------- BEGIN 24 HOUR TIME CALC ----------------------\r\r~time = If ( ~hasSeconds and ~roundSeconds ; Time ( Hour ( ~time ) ; Minute ( ~time ) ; ~secs ) ; ~time ) ;\r~result24 = GetAsTime ( ~time ) + 1 - 1 ; \r~result24 = If ( ~removeSeconds ; Left ( ~result24 ; 5 ) ; ~result24 ) ;\r\r// -------------- BEGIN 12 HOUR TIME CALC ----------------------\r\r~hours = Mod ( Hour ( ~time ) ; 12 ) ; \r\r~temphours =  Case ( ( ~hours < 1 ) or ( ~hours - 12 = 0 ) ; 12 ; ~hours ) ; \r~calc12hours = \r                     Left ( \r                              ~padhoursChar & ~padhoursChar ; \r                              2 - Length ( ~temphours ) \r                             ) & \r                             ~temphours ; \r~calc12Minutes = Left ( \"00\" ; 2 - Length ( ~mins ) ) & ~mins ; \r~calc12Seconds = Left ( \"00\" ; 2 - Length ( ~secs ) ) & ~secs ;\r~calc12Suffix    = Case ( Mod ( Hour ( ~time ) ; 24 ) >= 12 ; ~suffixPM ; ~suffixAM ) ; \r~result12          = ~calc12hours & \r                          \":\" & ~calc12Minutes & \r                          // if original time included a non-zero seconds value, display seconds\r                          Case ( ~hasSeconds and not ~removeSeconds and ~secs > 0 ; \":\" & ~calc12Seconds ) &  \r                          ~padAMPMChar & ~calc12Suffix \r] ; \r\r\rCase ( ~type12or24 >= \"24\" ; ~result24 ; ~result12 )\r\r) // END LET\r) // END CASE\r",
      "Round": "Case ( not IsEmpty ( ~time ) ; \rLet ( \r[ \r~time = GetAsTime ( ~time ) ; \r~increment = GetAsTime ( If ( IsEmpty ( ~increment ) ; \"00:00:01\" ; ~increment ) ) ; \r~forceUpDown = If ( IsEmpty ( ~forceUpDown ) ; 0 ; Substitute ( Lower ( ~forceUpDown ) ; [ \"up\" ; \"1\" ] ; [ \"dn\" ; \"-1\" ] ;  [ \"down\" ; \"-1\" ] ) ) ; \r\r\r~typeAdj = Case ( \r                         ~forceUpDown > 0 ; ~increment * ,99999999 ; // Round Up\r                        ~forceUpDown < 0 ; ~increment * 0 ; // Round Down\r                        ~forceUpDown = 0 ; ~increment * ,5  // Round Normal\r                         ) ;\r\r~rnd = ( Int ( ( ~time + ~typeAdj ) / ~increment ) ) * ~increment\r] ; \r\rGetAsTime ( ~rnd ) \r\r\r) \r\r)"
    },
    "Timestamp": {
      "Convert": {
        "CurrentZoneToUTC": "~timestamp - TT.Timestamp.UTC.Offset",
        "DataApiToFm": "Let (  \r[\r~list = Substitute ( ~apiTimestamp ; [ \":\" ; ¶ ]; [ \"/\" ; ¶ ] ; [ \" \" ; ¶ ] ) ;\r~year = GetValue ( ~list ; 3 ) ;\r~month = GetValue ( ~list ; 1 ) ;\r~day = GetValue ( ~list ; 2 ) ;\r~hours = GetValue ( ~list ; 4 ) ;\r~minutes = GetValue ( ~list ; 5 ) ;\r~seconds = GetValue ( ~list ; 6 ) ;\r\r~date = Date ( ~month ; ~day ; ~year ) ;\r~time = Time ( ~hours ; ~minutes ; ~seconds )\r] ;\r\rTimestamp ( ~date ; ~time )\r)",
        "FmToDataApi": "Let (\r[\r~date = Substitute ( \r\rList ( \rRight ( \"00\" & Month ( ~timestamp ) ; 2 ) ; \rRight ( \"00\" & Day ( ~timestamp ) ; 2 ) ;\rYear ( ~timestamp ) \r) ; \r\r¶ ; \"/\" \r) ;\r\r~time = Substitute (\r\rList (\rRight ( \"00\" & Hour ( ~timestamp ) ; 2 ) ; \rRight ( \"00\" & Minute ( ~timestamp ) ; 2 ) ; \rRight ( \"00\" & Seconds ( ~timestamp ) ; 2 )\r) ;\r\r¶ ; \":\"\r)\r] ;\r\r~date & \" \" & ~time\r\r)",
        "FmToIso": "Let (\r[\r~year = Year ( ~timestamp ) ;\r~year = Right ( \"000\" & ~year ; 4 ) ;\r~month = Month ( ~timestamp ) ;\r~month = Right ( \"0\" & ~month ; 2 ) ;\r~day = Day ( ~timestamp ) ;\r~day = Right ( \"0\" & ~day ; 2 ) ;\r\r~date = Substitute ( List ( ~year ; ~month ; ~day ) ; ¶ ; \"-\" ) ;\r\r~hours = Hour ( ~timestamp ) ;\r~hours = Right ( \"00\" & ~hours ; 2 ) ;\r\r~minutes = Minute ( ~timestamp ) ;\r~minutes = Right ( \"00\" & ~minutes ; 2 ) ;\r\r~seconds = Seconds ( ~timestamp ) ;\r~secondsDecimals = Mod ( ~seconds ; 1 ) ;\r~seconds = Right ( \"00\" & Int ( ~seconds ) ; 2 ) & If ( ~secondsDecimals ; ~secondsDecimals ) ;\r\r~time = Substitute ( List ( ~hours ; ~minutes ; ~seconds ) ; ¶ ; \":\" )\r\r] ;\r\r~date & ~separator & ~time\r\r)",
        "FmToUnix": "GetAsNumber ( TT.Timestamp.Convert.CurrentZoneToUTC ( ~timestamp ) - Timestamp ( Date ( 1 ; 1 ; 1970 ) ; \"0:0:0\" ) ) * If ( ~isMilliseconds ; 1000 ; 1 )",
        "IsoToFM": "Let (  \r[\r~list = Substitute ( ~isoTimestamp ; [ \":\" ; ¶ ]; [ \"-\" ; ¶ ] ; [ \" \" ; ¶ ] ; [ \"T\" ; ¶ ] ) ;\r~year = GetValue ( ~list ; 1 ) ;\r~month = GetValue ( ~list ; 2 ) ;\r~day = GetValue ( ~list ; 3 ) ;\r~hours = GetValue ( ~list ; 4 ) ;\r~minutes = GetValue ( ~list ; 5 ) ;\r~seconds = GetValue ( ~list ; 6 ) ;\r\r~date = Date ( ~month ; ~day ; ~year ) ;\r~time = Time ( ~hours ; ~minutes ; ~seconds )\r] ;\r\rTimestamp ( ~date ; ~time )\r)",
        "UnixToFM": "Let ( \r[\r~seconds = Round ( ~secondsOrMilliseconds / If ( ~secondsOrMilliseconds ≤ 2147486400 ; 1 ; 1000 ) ; 0 ) ;\r~unixSeconds = GetAsNumber ( Timestamp ( Date ( 1 ; 1 ; 1970 ) ; \"0:0:0\" ) )\r] ; \r\rTT.Timestamp.Convert.UtcToCurrentZone ( GetAsTimestamp ( ~unixSeconds + ~seconds ) )\r\r)",
        "UtcToCurrentZone": "~utcTimestamp + TT.Timestamp.UTC.Offset"
      },
      "Format": "Let ( [\r\t~indata = If ( GetAsText ( ~timestamp ) = \"\" ; \r\t\t\t\tGet ( CurrentTimestamp ) ; // default to now\r\t\t\t// else\r\t\t\t\t~timestamp ) ;\r\t~hr = Hour ( ~indata ) ;\r\t~hr12 = Mod ( ~hr - 1 ; 12 ) + 1 ;\r\t~dayNameList = TT.Date.Day.NameList ( ~locale ) ;\r\t~monthNameList = TT.Date.Month.NameList ( ~locale ) ;\r\t~seconds = Seconds ( ~indata )\r\t] ;\r\r\tSubstitute ( ~formatString ;\r\t\t[ \"[HH]\" ; Right ( \"0\" & ~hr ; 2 ) ] ;\r\t\t[ \"[H]\" ; ~hr ] ;\r\t\t[ \"[hh]\" ; Right ( \"0\" & ~hr12 ; 2) ] ;\r\t\t[ \"[h]\" ; ~hr12 ] ;\r\t\t[ \"[mm]\" ; Right ( \"0\" & Minute ( ~indata ) ; 2 ) ] ;\r\t\t[ \"[m]\" ; Minute ( ~indata ) ] ;\r\t\t[ \"[SS]\" ; Right ( \"0\" & Int ( ~seconds ) ; 2 ) & Let ( ~mod = Mod ( ~seconds ; 1 ) ; If ( ~mod ; ~mod ) ) ] ;\r\t\t[ \"[ss]\" ; Right ( \"0\" & Int ( ~seconds ) ; 2 ) ] ;\r\t\t[ \"[S]\" ; ~seconds ] ;\r\t\t[ \"[s]\" ; Int ( ~seconds ) ] ;\r\t\t[ \"[am]\" ; If ( ~hr < 12 ; \"am\" ; \"pm\" ) ] ;\r\t\t[ \"[pm]\" ; If ( ~hr < 12 ; \"am\" ; \"pm\" ) ] ;\r\t\t[ \"[AM]\" ; If ( ~hr < 12 ; \"AM\" ; \"PM\" ) ] ;\r\t\t[ \"[PM]\" ; If ( ~hr < 12 ; \"AM\" ; \"PM\" ) ] ;\r\t\t[ \"[Dayname]\" ; Proper ( Substitute ( MiddleValues ( ~dayNameList ; DayOfWeek ( ~indata ) ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[dayname]\" ; Lower ( Substitute ( MiddleValues ( ~dayNameList ; DayOfWeek ( ~indata ) ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[DAYNAME]\" ; Upper ( Substitute ( MiddleValues ( ~dayNameList ; DayOfWeek ( ~indata ) ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[Day]\" ; Proper ( Substitute ( MiddleValues ( ~dayNameList ; DayOfWeek ( ~indata ) + 7 ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[day]\" ; Lower ( Substitute ( MiddleValues ( ~dayNameList ; DayOfWeek ( ~indata ) + 7 ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[DAY]\" ; Upper ( Substitute ( MiddleValues ( ~dayNameList ; DayOfWeek ( ~indata ) + 7 ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[DD]\" ; Right ( \"0\" & Day ( ~indata ) ; 2 ) ] ;\r\t\t[ \"[D]\" ; Day ( ~indata ) ] ;\r\t\t[ \"[MM]\" ; Right ( \"0\" & Month ( ~indata ) ; 2 ) ] ;\r\t\t[ \"[M]\" ; Month ( ~indata ) ] ;\r\t\t[ \"[Month]\" ; Proper ( Substitute ( MiddleValues ( ~monthNameList ; Month ( ~indata ) ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[month]\" ; Lower ( Substitute ( MiddleValues ( ~monthNameList ; Month ( ~indata ) ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[MONTH]\" ; Upper ( Substitute ( MiddleValues ( ~monthNameList ; Month ( ~indata ) ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[Mon]\" ; Proper ( Substitute ( MiddleValues ( ~monthNameList ; Month ( ~indata ) + 12 ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[mon]\" ; Lower ( Substitute ( MiddleValues ( ~monthNameList ; Month ( ~indata ) + 12 ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[MON]\" ; Upper ( Substitute ( MiddleValues ( ~monthNameList ; Month ( ~indata ) + 12 ; 1 ) ; \"¶\" ; \"\" ) ) ] ;\r\t\t[ \"[YYYY]\" ; Year ( ~indata ) ] ;\r\t\t[ \"[YY]\" ; Right ( Year ( ~indata ) ; 2 ) ] \r\t)\r)",
      "UTC": {
        "Offset": "GetAsTime (\r\tGet ( CurrentTimestamp )\r\t- Floor ( Get ( CurrentTimeUTCMilliseconds ) / 1000 )\r)"
      }
    },
    "Variable": {
      "Set": "Let (\r[\r~quote = If ( Filter ( ~value ; \"0123456789\" ) ≠ ~value or IsEmpty ( ~value ) ; \"\\\"\" ) ;\r~variableName = If ( Left ( ~variableName ; 1 ) ≠ \"$\" ; \"$\" ) & ~variableName\r] ;\rEvaluate ( \"Let(\" & ~variableName & \"=\" & ~quote & ~value & ~quote & \";\\\"OK\\\")\" )\r)"
    },
    "XML": {
      "Encode": "Substitute ( ~text ;\r[ \"&\" ; \"&amp;\" ] ;\r[ \"<\" ; \"&lt;\" ] ;\r[ \">\" ; \"&gt;\" ] ;\r[ \"\\\"\" ; \"&quot;\" ] ;\r[ \"'\" ; \"&apos;\" ]\r)"
    }
  }
}
